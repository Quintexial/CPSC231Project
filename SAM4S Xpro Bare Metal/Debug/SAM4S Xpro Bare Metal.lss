
SAM4S Xpro Bare Metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e04  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402e04  00402e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000848  20000000  00402e0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000009c  20000848  00403654  00020848  2**2
                  ALLOC
  4 .stack        00003004  200008e4  004036f0  00020848  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020848  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020872  2**0
                  CONTENTS, READONLY
  7 .debug_info   00009aa7  00000000  00000000  000208cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001b5d  00000000  00000000  0002a372  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000970  00000000  00000000  0002becf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_macro  000144f3  00000000  00000000  0002c83f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000aa17  00000000  00000000  00040d32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000555b1  00000000  00000000  0004b749  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000535c  00000000  00000000  000a0cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008c0  00000000  00000000  000a6056  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002800  00000000  00000000  000a6918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <_sfixed>:
  400000:	200038e8 	.word	0x200038e8
  400004:	00401f8d 	.word	0x00401f8d
  400008:	00402055 	.word	0x00402055
  40000c:	00402055 	.word	0x00402055
  400010:	00402055 	.word	0x00402055
  400014:	00402055 	.word	0x00402055
  400018:	00402055 	.word	0x00402055
	...
  40002c:	00402055 	.word	0x00402055
  400030:	00402055 	.word	0x00402055
  400034:	00000000 	.word	0x00000000
  400038:	00402055 	.word	0x00402055
  40003c:	00402055 	.word	0x00402055
  400040:	00402055 	.word	0x00402055
  400044:	00402055 	.word	0x00402055
  400048:	00402055 	.word	0x00402055
  40004c:	00402055 	.word	0x00402055
  400050:	00402055 	.word	0x00402055
  400054:	00402055 	.word	0x00402055
  400058:	00402055 	.word	0x00402055
  40005c:	00402055 	.word	0x00402055
  400060:	00402055 	.word	0x00402055
  400064:	00402055 	.word	0x00402055
  400068:	00000000 	.word	0x00000000
  40006c:	004015e9 	.word	0x004015e9
  400070:	00401601 	.word	0x00401601
  400074:	00401619 	.word	0x00401619
  400078:	00402055 	.word	0x00402055
  40007c:	00402055 	.word	0x00402055
	...
  400088:	00402055 	.word	0x00402055
  40008c:	00402055 	.word	0x00402055
  400090:	00402055 	.word	0x00402055
  400094:	00402055 	.word	0x00402055
  400098:	00402055 	.word	0x00402055
  40009c:	00402055 	.word	0x00402055
  4000a0:	00402055 	.word	0x00402055
  4000a4:	00402055 	.word	0x00402055
  4000a8:	00402055 	.word	0x00402055
  4000ac:	00402055 	.word	0x00402055
  4000b0:	00402055 	.word	0x00402055
  4000b4:	00402055 	.word	0x00402055
  4000b8:	00402055 	.word	0x00402055
  4000bc:	00402055 	.word	0x00402055
  4000c0:	00402055 	.word	0x00402055
  4000c4:	00402055 	.word	0x00402055
  4000c8:	00402055 	.word	0x00402055

004000cc <__do_global_dtors_aux>:
  4000cc:	b510      	push	{r4, lr}
  4000ce:	4c05      	ldr	r4, [pc, #20]	; (4000e4 <__do_global_dtors_aux+0x18>)
  4000d0:	7823      	ldrb	r3, [r4, #0]
  4000d2:	b933      	cbnz	r3, 4000e2 <__do_global_dtors_aux+0x16>
  4000d4:	4b04      	ldr	r3, [pc, #16]	; (4000e8 <__do_global_dtors_aux+0x1c>)
  4000d6:	b113      	cbz	r3, 4000de <__do_global_dtors_aux+0x12>
  4000d8:	4804      	ldr	r0, [pc, #16]	; (4000ec <__do_global_dtors_aux+0x20>)
  4000da:	f3af 8000 	nop.w
  4000de:	2301      	movs	r3, #1
  4000e0:	7023      	strb	r3, [r4, #0]
  4000e2:	bd10      	pop	{r4, pc}
  4000e4:	20000848 	.word	0x20000848
  4000e8:	00000000 	.word	0x00000000
  4000ec:	00402e0c 	.word	0x00402e0c

004000f0 <frame_dummy>:
  4000f0:	4b08      	ldr	r3, [pc, #32]	; (400114 <frame_dummy+0x24>)
  4000f2:	b510      	push	{r4, lr}
  4000f4:	b11b      	cbz	r3, 4000fe <frame_dummy+0xe>
  4000f6:	4908      	ldr	r1, [pc, #32]	; (400118 <frame_dummy+0x28>)
  4000f8:	4808      	ldr	r0, [pc, #32]	; (40011c <frame_dummy+0x2c>)
  4000fa:	f3af 8000 	nop.w
  4000fe:	4808      	ldr	r0, [pc, #32]	; (400120 <frame_dummy+0x30>)
  400100:	6803      	ldr	r3, [r0, #0]
  400102:	b903      	cbnz	r3, 400106 <frame_dummy+0x16>
  400104:	bd10      	pop	{r4, pc}
  400106:	4b07      	ldr	r3, [pc, #28]	; (400124 <frame_dummy+0x34>)
  400108:	2b00      	cmp	r3, #0
  40010a:	d0fb      	beq.n	400104 <frame_dummy+0x14>
  40010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  400110:	4718      	bx	r3
  400112:	bf00      	nop
  400114:	00000000 	.word	0x00000000
  400118:	2000084c 	.word	0x2000084c
  40011c:	00402e0c 	.word	0x00402e0c
  400120:	00402e0c 	.word	0x00402e0c
  400124:	00000000 	.word	0x00000000

00400128 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400128:	b480      	push	{r7}
  40012a:	b083      	sub	sp, #12
  40012c:	af00      	add	r7, sp, #0
  40012e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400130:	687b      	ldr	r3, [r7, #4]
  400132:	2b07      	cmp	r3, #7
  400134:	d825      	bhi.n	400182 <osc_get_rate+0x5a>
  400136:	a201      	add	r2, pc, #4	; (adr r2, 40013c <osc_get_rate+0x14>)
  400138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  40013c:	0040015d 	.word	0x0040015d
  400140:	00400163 	.word	0x00400163
  400144:	00400169 	.word	0x00400169
  400148:	0040016f 	.word	0x0040016f
  40014c:	00400173 	.word	0x00400173
  400150:	00400177 	.word	0x00400177
  400154:	0040017b 	.word	0x0040017b
  400158:	0040017f 	.word	0x0040017f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  40015c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400160:	e010      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400166:	e00d      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40016c:	e00a      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40016e:	4b08      	ldr	r3, [pc, #32]	; (400190 <osc_get_rate+0x68>)
  400170:	e008      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400172:	4b08      	ldr	r3, [pc, #32]	; (400194 <osc_get_rate+0x6c>)
  400174:	e006      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400176:	4b08      	ldr	r3, [pc, #32]	; (400198 <osc_get_rate+0x70>)
  400178:	e004      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40017a:	4b07      	ldr	r3, [pc, #28]	; (400198 <osc_get_rate+0x70>)
  40017c:	e002      	b.n	400184 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40017e:	4b06      	ldr	r3, [pc, #24]	; (400198 <osc_get_rate+0x70>)
  400180:	e000      	b.n	400184 <osc_get_rate+0x5c>
	}

	return 0;
  400182:	2300      	movs	r3, #0
}
  400184:	4618      	mov	r0, r3
  400186:	370c      	adds	r7, #12
  400188:	46bd      	mov	sp, r7
  40018a:	bc80      	pop	{r7}
  40018c:	4770      	bx	lr
  40018e:	bf00      	nop
  400190:	003d0900 	.word	0x003d0900
  400194:	007a1200 	.word	0x007a1200
  400198:	00b71b00 	.word	0x00b71b00

0040019c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40019c:	b580      	push	{r7, lr}
  40019e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4001a0:	2006      	movs	r0, #6
  4001a2:	4b04      	ldr	r3, [pc, #16]	; (4001b4 <sysclk_get_main_hz+0x18>)
  4001a4:	4798      	blx	r3
  4001a6:	4602      	mov	r2, r0
  4001a8:	4613      	mov	r3, r2
  4001aa:	009b      	lsls	r3, r3, #2
  4001ac:	4413      	add	r3, r2
  4001ae:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4001b0:	4618      	mov	r0, r3
  4001b2:	bd80      	pop	{r7, pc}
  4001b4:	00400129 	.word	0x00400129

004001b8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4001b8:	b580      	push	{r7, lr}
  4001ba:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4001bc:	4b02      	ldr	r3, [pc, #8]	; (4001c8 <sysclk_get_cpu_hz+0x10>)
  4001be:	4798      	blx	r3
  4001c0:	4603      	mov	r3, r0
  4001c2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4001c4:	4618      	mov	r0, r3
  4001c6:	bd80      	pop	{r7, pc}
  4001c8:	0040019d 	.word	0x0040019d

004001cc <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
  4001cc:	b480      	push	{r7}
  4001ce:	b083      	sub	sp, #12
  4001d0:	af00      	add	r7, sp, #0
  4001d2:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  4001d4:	687b      	ldr	r3, [r7, #4]
  4001d6:	2201      	movs	r2, #1
  4001d8:	601a      	str	r2, [r3, #0]
}
  4001da:	bf00      	nop
  4001dc:	370c      	adds	r7, #12
  4001de:	46bd      	mov	sp, r7
  4001e0:	bc80      	pop	{r7}
  4001e2:	4770      	bx	lr

004001e4 <spi_put>:
 * \param p_spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
  4001e4:	b480      	push	{r7}
  4001e6:	b083      	sub	sp, #12
  4001e8:	af00      	add	r7, sp, #0
  4001ea:	6078      	str	r0, [r7, #4]
  4001ec:	460b      	mov	r3, r1
  4001ee:	807b      	strh	r3, [r7, #2]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4001f0:	887a      	ldrh	r2, [r7, #2]
  4001f2:	687b      	ldr	r3, [r7, #4]
  4001f4:	60da      	str	r2, [r3, #12]
}
  4001f6:	bf00      	nop
  4001f8:	370c      	adds	r7, #12
  4001fa:	46bd      	mov	sp, r7
  4001fc:	bc80      	pop	{r7}
  4001fe:	4770      	bx	lr

00400200 <spi_write_single>:
 * \param p_spi     Base address of the SPI instance.
 * \param data      Data to write.
 *
 */
static inline void spi_write_single(Spi *p_spi, uint8_t data)
{
  400200:	b580      	push	{r7, lr}
  400202:	b082      	sub	sp, #8
  400204:	af00      	add	r7, sp, #0
  400206:	6078      	str	r0, [r7, #4]
  400208:	460b      	mov	r3, r1
  40020a:	70fb      	strb	r3, [r7, #3]
	spi_put(p_spi, (uint16_t)data);
  40020c:	78fb      	ldrb	r3, [r7, #3]
  40020e:	b29b      	uxth	r3, r3
  400210:	4619      	mov	r1, r3
  400212:	6878      	ldr	r0, [r7, #4]
  400214:	4b02      	ldr	r3, [pc, #8]	; (400220 <spi_write_single+0x20>)
  400216:	4798      	blx	r3
}
  400218:	bf00      	nop
  40021a:	3708      	adds	r7, #8
  40021c:	46bd      	mov	sp, r7
  40021e:	bd80      	pop	{r7, pc}
  400220:	004001e5 	.word	0x004001e5
  400224:	00000000 	.word	0x00000000

00400228 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  400228:	b5f0      	push	{r4, r5, r6, r7, lr}
  40022a:	b08d      	sub	sp, #52	; 0x34
  40022c:	af00      	add	r7, sp, #0
  40022e:	4603      	mov	r3, r0
  400230:	71fb      	strb	r3, [r7, #7]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  400232:	2301      	movs	r3, #1
  400234:	60fb      	str	r3, [r7, #12]
	spi_select_device(SSD1306_SPI, &device);
  400236:	f107 030c 	add.w	r3, r7, #12
  40023a:	4619      	mov	r1, r3
  40023c:	2000      	movs	r0, #0
  40023e:	4b30      	ldr	r3, [pc, #192]	; (400300 <ssd1306_write_command+0xd8>)
  400240:	4798      	blx	r3
  400242:	2300      	movs	r3, #0
  400244:	62fb      	str	r3, [r7, #44]	; 0x2c
  400246:	2300      	movs	r3, #0
  400248:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40024e:	627b      	str	r3, [r7, #36]	; 0x24
  400250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400252:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400254:	6a3b      	ldr	r3, [r7, #32]
  400256:	095b      	lsrs	r3, r3, #5
  400258:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40025a:	69fb      	ldr	r3, [r7, #28]
  40025c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400260:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400264:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400266:	61bb      	str	r3, [r7, #24]

	if (level) {
  400268:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40026c:	2b00      	cmp	r3, #0
  40026e:	d009      	beq.n	400284 <ssd1306_write_command+0x5c>
  400270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400272:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400274:	697b      	ldr	r3, [r7, #20]
  400276:	f003 031f 	and.w	r3, r3, #31
  40027a:	2201      	movs	r2, #1
  40027c:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40027e:	69bb      	ldr	r3, [r7, #24]
  400280:	631a      	str	r2, [r3, #48]	; 0x30
  400282:	e008      	b.n	400296 <ssd1306_write_command+0x6e>
  400284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400286:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400288:	693b      	ldr	r3, [r7, #16]
  40028a:	f003 031f 	and.w	r3, r3, #31
  40028e:	2201      	movs	r2, #1
  400290:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400292:	69bb      	ldr	r3, [r7, #24]
  400294:	635a      	str	r2, [r3, #52]	; 0x34
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
  400296:	79fb      	ldrb	r3, [r7, #7]
  400298:	4619      	mov	r1, r3
  40029a:	2000      	movs	r0, #0
  40029c:	4b19      	ldr	r3, [pc, #100]	; (400304 <ssd1306_write_command+0xdc>)
  40029e:	4798      	blx	r3
	delay_us(SSD1306_LATENCY); // At least 3us
  4002a0:	4b19      	ldr	r3, [pc, #100]	; (400308 <ssd1306_write_command+0xe0>)
  4002a2:	4798      	blx	r3
  4002a4:	4603      	mov	r3, r0
  4002a6:	f04f 0400 	mov.w	r4, #0
  4002aa:	18db      	adds	r3, r3, r3
  4002ac:	eb44 0404 	adc.w	r4, r4, r4
  4002b0:	00a6      	lsls	r6, r4, #2
  4002b2:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4002b6:	009d      	lsls	r5, r3, #2
  4002b8:	195b      	adds	r3, r3, r5
  4002ba:	eb44 0406 	adc.w	r4, r4, r6
  4002be:	a20e      	add	r2, pc, #56	; (adr r2, 4002f8 <ssd1306_write_command+0xd0>)
  4002c0:	e9d2 1200 	ldrd	r1, r2, [r2]
  4002c4:	185d      	adds	r5, r3, r1
  4002c6:	eb44 0602 	adc.w	r6, r4, r2
  4002ca:	4628      	mov	r0, r5
  4002cc:	4631      	mov	r1, r6
  4002ce:	4c0f      	ldr	r4, [pc, #60]	; (40030c <ssd1306_write_command+0xe4>)
  4002d0:	4a0f      	ldr	r2, [pc, #60]	; (400310 <ssd1306_write_command+0xe8>)
  4002d2:	f04f 0300 	mov.w	r3, #0
  4002d6:	47a0      	blx	r4
  4002d8:	4603      	mov	r3, r0
  4002da:	460c      	mov	r4, r1
  4002dc:	4618      	mov	r0, r3
  4002de:	4b0d      	ldr	r3, [pc, #52]	; (400314 <ssd1306_write_command+0xec>)
  4002e0:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4002e2:	f107 030c 	add.w	r3, r7, #12
  4002e6:	4619      	mov	r1, r3
  4002e8:	2000      	movs	r0, #0
  4002ea:	4b0b      	ldr	r3, [pc, #44]	; (400318 <ssd1306_write_command+0xf0>)
  4002ec:	4798      	blx	r3
#endif
}
  4002ee:	bf00      	nop
  4002f0:	3734      	adds	r7, #52	; 0x34
  4002f2:	46bd      	mov	sp, r7
  4002f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4002f6:	bf00      	nop
  4002f8:	00d59f7f 	.word	0x00d59f7f
  4002fc:	00000000 	.word	0x00000000
  400300:	00400d59 	.word	0x00400d59
  400304:	00400201 	.word	0x00400201
  400308:	004001b9 	.word	0x004001b9
  40030c:	00402979 	.word	0x00402979
  400310:	00d59f80 	.word	0x00d59f80
  400314:	20000001 	.word	0x20000001
  400318:	00400db1 	.word	0x00400db1
  40031c:	00000000 	.word	0x00000000

00400320 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
static inline void ssd1306_write_data(uint8_t data)
{
  400320:	b5f0      	push	{r4, r5, r6, r7, lr}
  400322:	b08d      	sub	sp, #52	; 0x34
  400324:	af00      	add	r7, sp, #0
  400326:	4603      	mov	r3, r0
  400328:	71fb      	strb	r3, [r7, #7]
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40032a:	2301      	movs	r3, #1
  40032c:	60fb      	str	r3, [r7, #12]
	spi_select_device(SSD1306_SPI, &device);
  40032e:	f107 030c 	add.w	r3, r7, #12
  400332:	4619      	mov	r1, r3
  400334:	2000      	movs	r0, #0
  400336:	4b30      	ldr	r3, [pc, #192]	; (4003f8 <ssd1306_write_data+0xd8>)
  400338:	4798      	blx	r3
  40033a:	2300      	movs	r3, #0
  40033c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40033e:	2301      	movs	r3, #1
  400340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400346:	627b      	str	r3, [r7, #36]	; 0x24
  400348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40034a:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40034c:	6a3b      	ldr	r3, [r7, #32]
  40034e:	095b      	lsrs	r3, r3, #5
  400350:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400352:	69fb      	ldr	r3, [r7, #28]
  400354:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400358:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40035c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40035e:	61bb      	str	r3, [r7, #24]

	if (level) {
  400360:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400364:	2b00      	cmp	r3, #0
  400366:	d009      	beq.n	40037c <ssd1306_write_data+0x5c>
  400368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40036a:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40036c:	697b      	ldr	r3, [r7, #20]
  40036e:	f003 031f 	and.w	r3, r3, #31
  400372:	2201      	movs	r2, #1
  400374:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400376:	69bb      	ldr	r3, [r7, #24]
  400378:	631a      	str	r2, [r3, #48]	; 0x30
  40037a:	e008      	b.n	40038e <ssd1306_write_data+0x6e>
  40037c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40037e:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400380:	693b      	ldr	r3, [r7, #16]
  400382:	f003 031f 	and.w	r3, r3, #31
  400386:	2201      	movs	r2, #1
  400388:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40038a:	69bb      	ldr	r3, [r7, #24]
  40038c:	635a      	str	r2, [r3, #52]	; 0x34
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
  40038e:	79fb      	ldrb	r3, [r7, #7]
  400390:	4619      	mov	r1, r3
  400392:	2000      	movs	r0, #0
  400394:	4b19      	ldr	r3, [pc, #100]	; (4003fc <ssd1306_write_data+0xdc>)
  400396:	4798      	blx	r3
	delay_us(SSD1306_LATENCY); // At least 3us
  400398:	4b19      	ldr	r3, [pc, #100]	; (400400 <ssd1306_write_data+0xe0>)
  40039a:	4798      	blx	r3
  40039c:	4603      	mov	r3, r0
  40039e:	f04f 0400 	mov.w	r4, #0
  4003a2:	18db      	adds	r3, r3, r3
  4003a4:	eb44 0404 	adc.w	r4, r4, r4
  4003a8:	00a6      	lsls	r6, r4, #2
  4003aa:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4003ae:	009d      	lsls	r5, r3, #2
  4003b0:	195b      	adds	r3, r3, r5
  4003b2:	eb44 0406 	adc.w	r4, r4, r6
  4003b6:	a20e      	add	r2, pc, #56	; (adr r2, 4003f0 <ssd1306_write_data+0xd0>)
  4003b8:	e9d2 1200 	ldrd	r1, r2, [r2]
  4003bc:	185d      	adds	r5, r3, r1
  4003be:	eb44 0602 	adc.w	r6, r4, r2
  4003c2:	4628      	mov	r0, r5
  4003c4:	4631      	mov	r1, r6
  4003c6:	4c0f      	ldr	r4, [pc, #60]	; (400404 <ssd1306_write_data+0xe4>)
  4003c8:	4a0f      	ldr	r2, [pc, #60]	; (400408 <ssd1306_write_data+0xe8>)
  4003ca:	f04f 0300 	mov.w	r3, #0
  4003ce:	47a0      	blx	r4
  4003d0:	4603      	mov	r3, r0
  4003d2:	460c      	mov	r4, r1
  4003d4:	4618      	mov	r0, r3
  4003d6:	4b0d      	ldr	r3, [pc, #52]	; (40040c <ssd1306_write_data+0xec>)
  4003d8:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4003da:	f107 030c 	add.w	r3, r7, #12
  4003de:	4619      	mov	r1, r3
  4003e0:	2000      	movs	r0, #0
  4003e2:	4b0b      	ldr	r3, [pc, #44]	; (400410 <ssd1306_write_data+0xf0>)
  4003e4:	4798      	blx	r3
#endif
}
  4003e6:	bf00      	nop
  4003e8:	3734      	adds	r7, #52	; 0x34
  4003ea:	46bd      	mov	sp, r7
  4003ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4003ee:	bf00      	nop
  4003f0:	00d59f7f 	.word	0x00d59f7f
  4003f4:	00000000 	.word	0x00000000
  4003f8:	00400d59 	.word	0x00400d59
  4003fc:	00400201 	.word	0x00400201
  400400:	004001b9 	.word	0x004001b9
  400404:	00402979 	.word	0x00402979
  400408:	00d59f80 	.word	0x00d59f80
  40040c:	20000001 	.word	0x20000001
  400410:	00400db1 	.word	0x00400db1
  400414:	00000000 	.word	0x00000000

00400418 <ssd1306_hard_reset>:
 * This functions will reset the OLED controller by setting the reset pin low.
 * \note this functions should not be confused with the \ref ssd1306_soft_reset()
 * function, this command will control the RST pin.
 */
static inline void ssd1306_hard_reset(void)
{
  400418:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40041c:	b091      	sub	sp, #68	; 0x44
  40041e:	af00      	add	r7, sp, #0
  400420:	2302      	movs	r3, #2
  400422:	63fb      	str	r3, [r7, #60]	; 0x3c
  400424:	2300      	movs	r3, #0
  400426:	76fb      	strb	r3, [r7, #27]
  400428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40042a:	617b      	str	r3, [r7, #20]
  40042c:	697b      	ldr	r3, [r7, #20]
  40042e:	613b      	str	r3, [r7, #16]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400430:	693b      	ldr	r3, [r7, #16]
  400432:	095b      	lsrs	r3, r3, #5
  400434:	60fb      	str	r3, [r7, #12]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400436:	68fb      	ldr	r3, [r7, #12]
  400438:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  40043c:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400440:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400442:	60bb      	str	r3, [r7, #8]

	if (level) {
  400444:	7efb      	ldrb	r3, [r7, #27]
  400446:	2b00      	cmp	r3, #0
  400448:	d009      	beq.n	40045e <ssd1306_hard_reset+0x46>
  40044a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  40044c:	607b      	str	r3, [r7, #4]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40044e:	687b      	ldr	r3, [r7, #4]
  400450:	f003 031f 	and.w	r3, r3, #31
  400454:	2201      	movs	r2, #1
  400456:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400458:	68bb      	ldr	r3, [r7, #8]
  40045a:	631a      	str	r2, [r3, #48]	; 0x30
  40045c:	e008      	b.n	400470 <ssd1306_hard_reset+0x58>
  40045e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
  400460:	603b      	str	r3, [r7, #0]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400462:	683b      	ldr	r3, [r7, #0]
  400464:	f003 031f 	and.w	r3, r3, #31
  400468:	2201      	movs	r2, #1
  40046a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40046c:	68bb      	ldr	r3, [r7, #8]
  40046e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(SSD1306_RES_PIN, false);
	delay_us(SSD1306_LATENCY); // At least 3us
  400470:	4b3d      	ldr	r3, [pc, #244]	; (400568 <ssd1306_hard_reset+0x150>)
  400472:	4798      	blx	r3
  400474:	4603      	mov	r3, r0
  400476:	f04f 0400 	mov.w	r4, #0
  40047a:	18db      	adds	r3, r3, r3
  40047c:	eb44 0404 	adc.w	r4, r4, r4
  400480:	ea4f 0984 	mov.w	r9, r4, lsl #2
  400484:	ea49 7993 	orr.w	r9, r9, r3, lsr #30
  400488:	ea4f 0883 	mov.w	r8, r3, lsl #2
  40048c:	eb13 0308 	adds.w	r3, r3, r8
  400490:	eb44 0409 	adc.w	r4, r4, r9
  400494:	a232      	add	r2, pc, #200	; (adr r2, 400560 <ssd1306_hard_reset+0x148>)
  400496:	e9d2 1200 	ldrd	r1, r2, [r2]
  40049a:	eb13 0801 	adds.w	r8, r3, r1
  40049e:	eb44 0902 	adc.w	r9, r4, r2
  4004a2:	4640      	mov	r0, r8
  4004a4:	4649      	mov	r1, r9
  4004a6:	4c31      	ldr	r4, [pc, #196]	; (40056c <ssd1306_hard_reset+0x154>)
  4004a8:	4a31      	ldr	r2, [pc, #196]	; (400570 <ssd1306_hard_reset+0x158>)
  4004aa:	f04f 0300 	mov.w	r3, #0
  4004ae:	47a0      	blx	r4
  4004b0:	4603      	mov	r3, r0
  4004b2:	460c      	mov	r4, r1
  4004b4:	4618      	mov	r0, r3
  4004b6:	4b2f      	ldr	r3, [pc, #188]	; (400574 <ssd1306_hard_reset+0x15c>)
  4004b8:	4798      	blx	r3
  4004ba:	2302      	movs	r3, #2
  4004bc:	63bb      	str	r3, [r7, #56]	; 0x38
  4004be:	2301      	movs	r3, #1
  4004c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  4004c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4004c6:	633b      	str	r3, [r7, #48]	; 0x30
  4004c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  4004ca:	62fb      	str	r3, [r7, #44]	; 0x2c
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  4004cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4004ce:	095b      	lsrs	r3, r3, #5
  4004d0:	62bb      	str	r3, [r7, #40]	; 0x28
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4004d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4004d4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4004d8:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4004dc:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4004de:	627b      	str	r3, [r7, #36]	; 0x24

	if (level) {
  4004e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4004e4:	2b00      	cmp	r3, #0
  4004e6:	d009      	beq.n	4004fc <ssd1306_hard_reset+0xe4>
  4004e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4004ea:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4004ec:	6a3b      	ldr	r3, [r7, #32]
  4004ee:	f003 031f 	and.w	r3, r3, #31
  4004f2:	2201      	movs	r2, #1
  4004f4:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4004f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4004f8:	631a      	str	r2, [r3, #48]	; 0x30
  4004fa:	e008      	b.n	40050e <ssd1306_hard_reset+0xf6>
  4004fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  4004fe:	61fb      	str	r3, [r7, #28]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400500:	69fb      	ldr	r3, [r7, #28]
  400502:	f003 031f 	and.w	r3, r3, #31
  400506:	2201      	movs	r2, #1
  400508:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  40050a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40050c:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(SSD1306_RES_PIN, true);
	delay_us(SSD1306_LATENCY); // At least 3us
  40050e:	4b16      	ldr	r3, [pc, #88]	; (400568 <ssd1306_hard_reset+0x150>)
  400510:	4798      	blx	r3
  400512:	4603      	mov	r3, r0
  400514:	f04f 0400 	mov.w	r4, #0
  400518:	18db      	adds	r3, r3, r3
  40051a:	eb44 0404 	adc.w	r4, r4, r4
  40051e:	00a6      	lsls	r6, r4, #2
  400520:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  400524:	009d      	lsls	r5, r3, #2
  400526:	195b      	adds	r3, r3, r5
  400528:	eb44 0406 	adc.w	r4, r4, r6
  40052c:	a20c      	add	r2, pc, #48	; (adr r2, 400560 <ssd1306_hard_reset+0x148>)
  40052e:	e9d2 1200 	ldrd	r1, r2, [r2]
  400532:	185d      	adds	r5, r3, r1
  400534:	eb44 0602 	adc.w	r6, r4, r2
  400538:	4628      	mov	r0, r5
  40053a:	4631      	mov	r1, r6
  40053c:	4c0b      	ldr	r4, [pc, #44]	; (40056c <ssd1306_hard_reset+0x154>)
  40053e:	4a0c      	ldr	r2, [pc, #48]	; (400570 <ssd1306_hard_reset+0x158>)
  400540:	f04f 0300 	mov.w	r3, #0
  400544:	47a0      	blx	r4
  400546:	4603      	mov	r3, r0
  400548:	460c      	mov	r4, r1
  40054a:	4618      	mov	r0, r3
  40054c:	4b09      	ldr	r3, [pc, #36]	; (400574 <ssd1306_hard_reset+0x15c>)
  40054e:	4798      	blx	r3
}
  400550:	bf00      	nop
  400552:	3744      	adds	r7, #68	; 0x44
  400554:	46bd      	mov	sp, r7
  400556:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40055a:	bf00      	nop
  40055c:	f3af 8000 	nop.w
  400560:	00d59f7f 	.word	0x00d59f7f
  400564:	00000000 	.word	0x00000000
  400568:	004001b9 	.word	0x004001b9
  40056c:	00402979 	.word	0x00402979
  400570:	00d59f80 	.word	0x00d59f80
  400574:	20000001 	.word	0x20000001

00400578 <ssd1306_display_on>:
 * \brief Turn the OLED display on
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
  400578:	b580      	push	{r7, lr}
  40057a:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  40057c:	20af      	movs	r0, #175	; 0xaf
  40057e:	4b02      	ldr	r3, [pc, #8]	; (400588 <ssd1306_display_on+0x10>)
  400580:	4798      	blx	r3
}
  400582:	bf00      	nop
  400584:	bd80      	pop	{r7, pc}
  400586:	bf00      	nop
  400588:	00400229 	.word	0x00400229

0040058c <ssd1306_set_contrast>:
 * \param contrast a number between 0 and 0xFF
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
  40058c:	b580      	push	{r7, lr}
  40058e:	b082      	sub	sp, #8
  400590:	af00      	add	r7, sp, #0
  400592:	4603      	mov	r3, r0
  400594:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400596:	2081      	movs	r0, #129	; 0x81
  400598:	4b05      	ldr	r3, [pc, #20]	; (4005b0 <ssd1306_set_contrast+0x24>)
  40059a:	4798      	blx	r3
	ssd1306_write_command(contrast);
  40059c:	79fb      	ldrb	r3, [r7, #7]
  40059e:	4618      	mov	r0, r3
  4005a0:	4b03      	ldr	r3, [pc, #12]	; (4005b0 <ssd1306_set_contrast+0x24>)
  4005a2:	4798      	blx	r3
	return contrast;
  4005a4:	79fb      	ldrb	r3, [r7, #7]
}
  4005a6:	4618      	mov	r0, r3
  4005a8:	3708      	adds	r7, #8
  4005aa:	46bd      	mov	sp, r7
  4005ac:	bd80      	pop	{r7, pc}
  4005ae:	bf00      	nop
  4005b0:	00400229 	.word	0x00400229

004005b4 <ssd1306_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
  4005b4:	b580      	push	{r7, lr}
  4005b6:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  4005b8:	20a6      	movs	r0, #166	; 0xa6
  4005ba:	4b02      	ldr	r3, [pc, #8]	; (4005c4 <ssd1306_display_invert_disable+0x10>)
  4005bc:	4798      	blx	r3
}
  4005be:	bf00      	nop
  4005c0:	bd80      	pop	{r7, pc}
  4005c2:	bf00      	nop
  4005c4:	00400229 	.word	0x00400229

004005c8 <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
  4005c8:	b590      	push	{r4, r7, lr}
  4005ca:	b087      	sub	sp, #28
  4005cc:	af02      	add	r7, sp, #8
#ifdef SSD1306_SERIAL_INTERFACE
	spi_flags_t spi_flags = SPI_MODE_0;
  4005ce:	2300      	movs	r3, #0
  4005d0:	73fb      	strb	r3, [r7, #15]
	board_spi_select_id_t spi_select_id = 0;
  4005d2:	2300      	movs	r3, #0
  4005d4:	60bb      	str	r3, [r7, #8]
	};
	usart_spi_init(SSD1306_USART_SPI);
	usart_spi_setup_device(SSD1306_USART_SPI, &device, spi_flags,
			SSD1306_CLOCK_SPEED, spi_select_id);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {
  4005d6:	2301      	movs	r3, #1
  4005d8:	607b      	str	r3, [r7, #4]
		.id = SSD1306_CS_PIN,
	};
	spi_master_init(SSD1306_SPI);
  4005da:	2000      	movs	r0, #0
  4005dc:	4b08      	ldr	r3, [pc, #32]	; (400600 <ssd1306_interface_init+0x38>)
  4005de:	4798      	blx	r3
	spi_master_setup_device(SSD1306_SPI, &device, spi_flags,
  4005e0:	7bfa      	ldrb	r2, [r7, #15]
  4005e2:	1d39      	adds	r1, r7, #4
  4005e4:	68bb      	ldr	r3, [r7, #8]
  4005e6:	9300      	str	r3, [sp, #0]
  4005e8:	4b06      	ldr	r3, [pc, #24]	; (400604 <ssd1306_interface_init+0x3c>)
  4005ea:	2000      	movs	r0, #0
  4005ec:	4c06      	ldr	r4, [pc, #24]	; (400608 <ssd1306_interface_init+0x40>)
  4005ee:	47a0      	blx	r4
			SSD1306_CLOCK_SPEED, spi_select_id);
#ifdef SAM
	spi_enable(SSD1306_SPI);
  4005f0:	2000      	movs	r0, #0
  4005f2:	4b06      	ldr	r3, [pc, #24]	; (40060c <ssd1306_interface_init+0x44>)
  4005f4:	4798      	blx	r3
#endif
#endif
}
  4005f6:	bf00      	nop
  4005f8:	3714      	adds	r7, #20
  4005fa:	46bd      	mov	sp, r7
  4005fc:	bd90      	pop	{r4, r7, pc}
  4005fe:	bf00      	nop
  400600:	00400c35 	.word	0x00400c35
  400604:	00b71b00 	.word	0x00b71b00
  400608:	00400ca5 	.word	0x00400ca5
  40060c:	004001cd 	.word	0x004001cd

00400610 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
  400610:	b580      	push	{r7, lr}
  400612:	af00      	add	r7, sp, #0
	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
  400614:	4b21      	ldr	r3, [pc, #132]	; (40069c <ssd1306_init+0x8c>)
  400616:	4798      	blx	r3

	// Initialize the interface
	ssd1306_interface_init();
  400618:	4b21      	ldr	r3, [pc, #132]	; (4006a0 <ssd1306_init+0x90>)
  40061a:	4798      	blx	r3

	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  40061c:	20a8      	movs	r0, #168	; 0xa8
  40061e:	4b21      	ldr	r3, [pc, #132]	; (4006a4 <ssd1306_init+0x94>)
  400620:	4798      	blx	r3
	ssd1306_write_command(0x1F);
  400622:	201f      	movs	r0, #31
  400624:	4b1f      	ldr	r3, [pc, #124]	; (4006a4 <ssd1306_init+0x94>)
  400626:	4798      	blx	r3

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400628:	20d3      	movs	r0, #211	; 0xd3
  40062a:	4b1e      	ldr	r3, [pc, #120]	; (4006a4 <ssd1306_init+0x94>)
  40062c:	4798      	blx	r3
	ssd1306_write_command(0x00);
  40062e:	2000      	movs	r0, #0
  400630:	4b1c      	ldr	r3, [pc, #112]	; (4006a4 <ssd1306_init+0x94>)
  400632:	4798      	blx	r3

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_START_LINE(0x00));
  400634:	2040      	movs	r0, #64	; 0x40
  400636:	4b1b      	ldr	r3, [pc, #108]	; (4006a4 <ssd1306_init+0x94>)
  400638:	4798      	blx	r3

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  40063a:	20a1      	movs	r0, #161	; 0xa1
  40063c:	4b19      	ldr	r3, [pc, #100]	; (4006a4 <ssd1306_init+0x94>)
  40063e:	4798      	blx	r3

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400640:	20c8      	movs	r0, #200	; 0xc8
  400642:	4b18      	ldr	r3, [pc, #96]	; (4006a4 <ssd1306_init+0x94>)
  400644:	4798      	blx	r3

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400646:	20da      	movs	r0, #218	; 0xda
  400648:	4b16      	ldr	r3, [pc, #88]	; (4006a4 <ssd1306_init+0x94>)
  40064a:	4798      	blx	r3
	ssd1306_write_command(0x02);
  40064c:	2002      	movs	r0, #2
  40064e:	4b15      	ldr	r3, [pc, #84]	; (4006a4 <ssd1306_init+0x94>)
  400650:	4798      	blx	r3

	ssd1306_set_contrast(0x8F);
  400652:	208f      	movs	r0, #143	; 0x8f
  400654:	4b14      	ldr	r3, [pc, #80]	; (4006a8 <ssd1306_init+0x98>)
  400656:	4798      	blx	r3

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400658:	20a4      	movs	r0, #164	; 0xa4
  40065a:	4b12      	ldr	r3, [pc, #72]	; (4006a4 <ssd1306_init+0x94>)
  40065c:	4798      	blx	r3

	ssd1306_display_invert_disable();
  40065e:	4b13      	ldr	r3, [pc, #76]	; (4006ac <ssd1306_init+0x9c>)
  400660:	4798      	blx	r3

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400662:	20d5      	movs	r0, #213	; 0xd5
  400664:	4b0f      	ldr	r3, [pc, #60]	; (4006a4 <ssd1306_init+0x94>)
  400666:	4798      	blx	r3
	ssd1306_write_command(0x80);
  400668:	2080      	movs	r0, #128	; 0x80
  40066a:	4b0e      	ldr	r3, [pc, #56]	; (4006a4 <ssd1306_init+0x94>)
  40066c:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  40066e:	208d      	movs	r0, #141	; 0x8d
  400670:	4b0c      	ldr	r3, [pc, #48]	; (4006a4 <ssd1306_init+0x94>)
  400672:	4798      	blx	r3
	ssd1306_write_command(0x14);
  400674:	2014      	movs	r0, #20
  400676:	4b0b      	ldr	r3, [pc, #44]	; (4006a4 <ssd1306_init+0x94>)
  400678:	4798      	blx	r3

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  40067a:	20db      	movs	r0, #219	; 0xdb
  40067c:	4b09      	ldr	r3, [pc, #36]	; (4006a4 <ssd1306_init+0x94>)
  40067e:	4798      	blx	r3
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400680:	2040      	movs	r0, #64	; 0x40
  400682:	4b08      	ldr	r3, [pc, #32]	; (4006a4 <ssd1306_init+0x94>)
  400684:	4798      	blx	r3

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400686:	20d9      	movs	r0, #217	; 0xd9
  400688:	4b06      	ldr	r3, [pc, #24]	; (4006a4 <ssd1306_init+0x94>)
  40068a:	4798      	blx	r3
	ssd1306_write_command(0xF1);
  40068c:	20f1      	movs	r0, #241	; 0xf1
  40068e:	4b05      	ldr	r3, [pc, #20]	; (4006a4 <ssd1306_init+0x94>)
  400690:	4798      	blx	r3

	ssd1306_display_on();
  400692:	4b07      	ldr	r3, [pc, #28]	; (4006b0 <ssd1306_init+0xa0>)
  400694:	4798      	blx	r3
}
  400696:	bf00      	nop
  400698:	bd80      	pop	{r7, pc}
  40069a:	bf00      	nop
  40069c:	00400419 	.word	0x00400419
  4006a0:	004005c9 	.word	0x004005c9
  4006a4:	00400229 	.word	0x00400229
  4006a8:	0040058d 	.word	0x0040058d
  4006ac:	004005b5 	.word	0x004005b5
  4006b0:	00400579 	.word	0x00400579

004006b4 <ssd1306_write_text>:
/**
 * \brief Display text on OLED screen.
 * \param string String to display.
 */
void ssd1306_write_text(const char *string)
{
  4006b4:	b580      	push	{r7, lr}
  4006b6:	b084      	sub	sp, #16
  4006b8:	af00      	add	r7, sp, #0
  4006ba:	6078      	str	r0, [r7, #4]
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
  4006bc:	e022      	b.n	400704 <ssd1306_write_text+0x50>
		if (*string < 0x7F) {
  4006be:	687b      	ldr	r3, [r7, #4]
  4006c0:	781b      	ldrb	r3, [r3, #0]
  4006c2:	2b7e      	cmp	r3, #126	; 0x7e
  4006c4:	d81b      	bhi.n	4006fe <ssd1306_write_text+0x4a>
			char_ptr = font_table[*string - 32];
  4006c6:	687b      	ldr	r3, [r7, #4]
  4006c8:	781b      	ldrb	r3, [r3, #0]
  4006ca:	3b20      	subs	r3, #32
  4006cc:	4a11      	ldr	r2, [pc, #68]	; (400714 <ssd1306_write_text+0x60>)
  4006ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
  4006d2:	60bb      	str	r3, [r7, #8]
			for (i = 1; i <= char_ptr[0]; i++) {
  4006d4:	2301      	movs	r3, #1
  4006d6:	73fb      	strb	r3, [r7, #15]
  4006d8:	e009      	b.n	4006ee <ssd1306_write_text+0x3a>
				ssd1306_write_data(char_ptr[i]);
  4006da:	7bfb      	ldrb	r3, [r7, #15]
  4006dc:	68ba      	ldr	r2, [r7, #8]
  4006de:	4413      	add	r3, r2
  4006e0:	781b      	ldrb	r3, [r3, #0]
  4006e2:	4618      	mov	r0, r3
  4006e4:	4b0c      	ldr	r3, [pc, #48]	; (400718 <ssd1306_write_text+0x64>)
  4006e6:	4798      	blx	r3
	uint8_t i;

	while (*string != 0) {
		if (*string < 0x7F) {
			char_ptr = font_table[*string - 32];
			for (i = 1; i <= char_ptr[0]; i++) {
  4006e8:	7bfb      	ldrb	r3, [r7, #15]
  4006ea:	3301      	adds	r3, #1
  4006ec:	73fb      	strb	r3, [r7, #15]
  4006ee:	68bb      	ldr	r3, [r7, #8]
  4006f0:	781b      	ldrb	r3, [r3, #0]
  4006f2:	7bfa      	ldrb	r2, [r7, #15]
  4006f4:	429a      	cmp	r2, r3
  4006f6:	d9f0      	bls.n	4006da <ssd1306_write_text+0x26>
				ssd1306_write_data(char_ptr[i]);
			}
			ssd1306_write_data(0x00);
  4006f8:	2000      	movs	r0, #0
  4006fa:	4b07      	ldr	r3, [pc, #28]	; (400718 <ssd1306_write_text+0x64>)
  4006fc:	4798      	blx	r3
		}
			string++;
  4006fe:	687b      	ldr	r3, [r7, #4]
  400700:	3301      	adds	r3, #1
  400702:	607b      	str	r3, [r7, #4]
void ssd1306_write_text(const char *string)
{
	uint8_t *char_ptr;
	uint8_t i;

	while (*string != 0) {
  400704:	687b      	ldr	r3, [r7, #4]
  400706:	781b      	ldrb	r3, [r3, #0]
  400708:	2b00      	cmp	r3, #0
  40070a:	d1d8      	bne.n	4006be <ssd1306_write_text+0xa>
			}
			ssd1306_write_data(0x00);
		}
			string++;
	}
}
  40070c:	bf00      	nop
  40070e:	3710      	adds	r7, #16
  400710:	46bd      	mov	sp, r7
  400712:	bd80      	pop	{r7, pc}
  400714:	2000001c 	.word	0x2000001c
  400718:	00400321 	.word	0x00400321

0040071c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
  40071c:	b580      	push	{r7, lr}
  40071e:	b082      	sub	sp, #8
  400720:	af00      	add	r7, sp, #0
  400722:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400724:	687b      	ldr	r3, [r7, #4]
  400726:	2b07      	cmp	r3, #7
  400728:	d831      	bhi.n	40078e <osc_enable+0x72>
  40072a:	a201      	add	r2, pc, #4	; (adr r2, 400730 <osc_enable+0x14>)
  40072c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400730:	0040078d 	.word	0x0040078d
  400734:	00400751 	.word	0x00400751
  400738:	00400759 	.word	0x00400759
  40073c:	00400761 	.word	0x00400761
  400740:	00400769 	.word	0x00400769
  400744:	00400771 	.word	0x00400771
  400748:	00400779 	.word	0x00400779
  40074c:	00400783 	.word	0x00400783
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  400750:	2000      	movs	r0, #0
  400752:	4b11      	ldr	r3, [pc, #68]	; (400798 <osc_enable+0x7c>)
  400754:	4798      	blx	r3
		break;
  400756:	e01a      	b.n	40078e <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  400758:	2001      	movs	r0, #1
  40075a:	4b0f      	ldr	r3, [pc, #60]	; (400798 <osc_enable+0x7c>)
  40075c:	4798      	blx	r3
		break;
  40075e:	e016      	b.n	40078e <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  400760:	2000      	movs	r0, #0
  400762:	4b0e      	ldr	r3, [pc, #56]	; (40079c <osc_enable+0x80>)
  400764:	4798      	blx	r3
		break;
  400766:	e012      	b.n	40078e <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  400768:	2010      	movs	r0, #16
  40076a:	4b0c      	ldr	r3, [pc, #48]	; (40079c <osc_enable+0x80>)
  40076c:	4798      	blx	r3
		break;
  40076e:	e00e      	b.n	40078e <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  400770:	2020      	movs	r0, #32
  400772:	4b0a      	ldr	r3, [pc, #40]	; (40079c <osc_enable+0x80>)
  400774:	4798      	blx	r3
		break;
  400776:	e00a      	b.n	40078e <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400778:	213e      	movs	r1, #62	; 0x3e
  40077a:	2000      	movs	r0, #0
  40077c:	4b08      	ldr	r3, [pc, #32]	; (4007a0 <osc_enable+0x84>)
  40077e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  400780:	e005      	b.n	40078e <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  400782:	213e      	movs	r1, #62	; 0x3e
  400784:	2001      	movs	r0, #1
  400786:	4b06      	ldr	r3, [pc, #24]	; (4007a0 <osc_enable+0x84>)
  400788:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
  40078a:	e000      	b.n	40078e <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
  40078c:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
  40078e:	bf00      	nop
  400790:	3708      	adds	r7, #8
  400792:	46bd      	mov	sp, r7
  400794:	bd80      	pop	{r7, pc}
  400796:	bf00      	nop
  400798:	004016b1 	.word	0x004016b1
  40079c:	0040171d 	.word	0x0040171d
  4007a0:	0040178d 	.word	0x0040178d

004007a4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
  4007a4:	b580      	push	{r7, lr}
  4007a6:	b082      	sub	sp, #8
  4007a8:	af00      	add	r7, sp, #0
  4007aa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4007ac:	687b      	ldr	r3, [r7, #4]
  4007ae:	2b07      	cmp	r3, #7
  4007b0:	d826      	bhi.n	400800 <osc_is_ready+0x5c>
  4007b2:	a201      	add	r2, pc, #4	; (adr r2, 4007b8 <osc_is_ready+0x14>)
  4007b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4007b8:	004007d9 	.word	0x004007d9
  4007bc:	004007dd 	.word	0x004007dd
  4007c0:	004007dd 	.word	0x004007dd
  4007c4:	004007ef 	.word	0x004007ef
  4007c8:	004007ef 	.word	0x004007ef
  4007cc:	004007ef 	.word	0x004007ef
  4007d0:	004007ef 	.word	0x004007ef
  4007d4:	004007ef 	.word	0x004007ef
	case OSC_SLCK_32K_RC:
		return 1;
  4007d8:	2301      	movs	r3, #1
  4007da:	e012      	b.n	400802 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
  4007dc:	4b0b      	ldr	r3, [pc, #44]	; (40080c <osc_is_ready+0x68>)
  4007de:	4798      	blx	r3
  4007e0:	4603      	mov	r3, r0
  4007e2:	2b00      	cmp	r3, #0
  4007e4:	bf14      	ite	ne
  4007e6:	2301      	movne	r3, #1
  4007e8:	2300      	moveq	r3, #0
  4007ea:	b2db      	uxtb	r3, r3
  4007ec:	e009      	b.n	400802 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4007ee:	4b08      	ldr	r3, [pc, #32]	; (400810 <osc_is_ready+0x6c>)
  4007f0:	4798      	blx	r3
  4007f2:	4603      	mov	r3, r0
  4007f4:	2b00      	cmp	r3, #0
  4007f6:	bf14      	ite	ne
  4007f8:	2301      	movne	r3, #1
  4007fa:	2300      	moveq	r3, #0
  4007fc:	b2db      	uxtb	r3, r3
  4007fe:	e000      	b.n	400802 <osc_is_ready+0x5e>
	}

	return 0;
  400800:	2300      	movs	r3, #0
}
  400802:	4618      	mov	r0, r3
  400804:	3708      	adds	r7, #8
  400806:	46bd      	mov	sp, r7
  400808:	bd80      	pop	{r7, pc}
  40080a:	bf00      	nop
  40080c:	004016e9 	.word	0x004016e9
  400810:	00401805 	.word	0x00401805

00400814 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400814:	b480      	push	{r7}
  400816:	b083      	sub	sp, #12
  400818:	af00      	add	r7, sp, #0
  40081a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40081c:	687b      	ldr	r3, [r7, #4]
  40081e:	2b07      	cmp	r3, #7
  400820:	d825      	bhi.n	40086e <osc_get_rate+0x5a>
  400822:	a201      	add	r2, pc, #4	; (adr r2, 400828 <osc_get_rate+0x14>)
  400824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400828:	00400849 	.word	0x00400849
  40082c:	0040084f 	.word	0x0040084f
  400830:	00400855 	.word	0x00400855
  400834:	0040085b 	.word	0x0040085b
  400838:	0040085f 	.word	0x0040085f
  40083c:	00400863 	.word	0x00400863
  400840:	00400867 	.word	0x00400867
  400844:	0040086b 	.word	0x0040086b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400848:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  40084c:	e010      	b.n	400870 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  40084e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400852:	e00d      	b.n	400870 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400858:	e00a      	b.n	400870 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  40085a:	4b08      	ldr	r3, [pc, #32]	; (40087c <osc_get_rate+0x68>)
  40085c:	e008      	b.n	400870 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  40085e:	4b08      	ldr	r3, [pc, #32]	; (400880 <osc_get_rate+0x6c>)
  400860:	e006      	b.n	400870 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400862:	4b08      	ldr	r3, [pc, #32]	; (400884 <osc_get_rate+0x70>)
  400864:	e004      	b.n	400870 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400866:	4b07      	ldr	r3, [pc, #28]	; (400884 <osc_get_rate+0x70>)
  400868:	e002      	b.n	400870 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40086a:	4b06      	ldr	r3, [pc, #24]	; (400884 <osc_get_rate+0x70>)
  40086c:	e000      	b.n	400870 <osc_get_rate+0x5c>
	}

	return 0;
  40086e:	2300      	movs	r3, #0
}
  400870:	4618      	mov	r0, r3
  400872:	370c      	adds	r7, #12
  400874:	46bd      	mov	sp, r7
  400876:	bc80      	pop	{r7}
  400878:	4770      	bx	lr
  40087a:	bf00      	nop
  40087c:	003d0900 	.word	0x003d0900
  400880:	007a1200 	.word	0x007a1200
  400884:	00b71b00 	.word	0x00b71b00

00400888 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  400888:	b580      	push	{r7, lr}
  40088a:	b082      	sub	sp, #8
  40088c:	af00      	add	r7, sp, #0
  40088e:	4603      	mov	r3, r0
  400890:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  400892:	bf00      	nop
  400894:	79fb      	ldrb	r3, [r7, #7]
  400896:	4618      	mov	r0, r3
  400898:	4b05      	ldr	r3, [pc, #20]	; (4008b0 <osc_wait_ready+0x28>)
  40089a:	4798      	blx	r3
  40089c:	4603      	mov	r3, r0
  40089e:	f083 0301 	eor.w	r3, r3, #1
  4008a2:	b2db      	uxtb	r3, r3
  4008a4:	2b00      	cmp	r3, #0
  4008a6:	d1f5      	bne.n	400894 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  4008a8:	bf00      	nop
  4008aa:	3708      	adds	r7, #8
  4008ac:	46bd      	mov	sp, r7
  4008ae:	bd80      	pop	{r7, pc}
  4008b0:	004007a5 	.word	0x004007a5

004008b4 <pll_config_init>:
 * \note The SAM3S PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  4008b4:	b580      	push	{r7, lr}
  4008b6:	b086      	sub	sp, #24
  4008b8:	af00      	add	r7, sp, #0
  4008ba:	60f8      	str	r0, [r7, #12]
  4008bc:	607a      	str	r2, [r7, #4]
  4008be:	603b      	str	r3, [r7, #0]
  4008c0:	460b      	mov	r3, r1
  4008c2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4008c4:	7afb      	ldrb	r3, [r7, #11]
  4008c6:	4618      	mov	r0, r3
  4008c8:	4b0d      	ldr	r3, [pc, #52]	; (400900 <pll_config_init+0x4c>)
  4008ca:	4798      	blx	r3
  4008cc:	4602      	mov	r2, r0
  4008ce:	687b      	ldr	r3, [r7, #4]
  4008d0:	fbb2 f3f3 	udiv	r3, r2, r3
  4008d4:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4008d6:	697b      	ldr	r3, [r7, #20]
  4008d8:	683a      	ldr	r2, [r7, #0]
  4008da:	fb02 f303 	mul.w	r3, r2, r3
  4008de:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
	p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4008e0:	683b      	ldr	r3, [r7, #0]
  4008e2:	3b01      	subs	r3, #1
  4008e4:	041a      	lsls	r2, r3, #16
  4008e6:	4b07      	ldr	r3, [pc, #28]	; (400904 <pll_config_init+0x50>)
  4008e8:	4013      	ands	r3, r2
  4008ea:	687a      	ldr	r2, [r7, #4]
  4008ec:	b2d2      	uxtb	r2, r2
  4008ee:	4313      	orrs	r3, r2
  4008f0:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
  4008f4:	68fb      	ldr	r3, [r7, #12]
  4008f6:	601a      	str	r2, [r3, #0]
}
  4008f8:	bf00      	nop
  4008fa:	3718      	adds	r7, #24
  4008fc:	46bd      	mov	sp, r7
  4008fe:	bd80      	pop	{r7, pc}
  400900:	00400815 	.word	0x00400815
  400904:	07ff0000 	.word	0x07ff0000

00400908 <pll_enable>:
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  400908:	b580      	push	{r7, lr}
  40090a:	b082      	sub	sp, #8
  40090c:	af00      	add	r7, sp, #0
  40090e:	6078      	str	r0, [r7, #4]
  400910:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400912:	683b      	ldr	r3, [r7, #0]
  400914:	2b00      	cmp	r3, #0
  400916:	d108      	bne.n	40092a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  400918:	4b09      	ldr	r3, [pc, #36]	; (400940 <pll_enable+0x38>)
  40091a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40091c:	4a09      	ldr	r2, [pc, #36]	; (400944 <pll_enable+0x3c>)
  40091e:	687b      	ldr	r3, [r7, #4]
  400920:	681b      	ldr	r3, [r3, #0]
  400922:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  400926:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		pmc_disable_pllbck();
		PMC->CKGR_PLLBR = p_cfg->ctrl;
	}
}
  400928:	e005      	b.n	400936 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		pmc_disable_pllbck();
  40092a:	4b07      	ldr	r3, [pc, #28]	; (400948 <pll_enable+0x40>)
  40092c:	4798      	blx	r3
		PMC->CKGR_PLLBR = p_cfg->ctrl;
  40092e:	4a05      	ldr	r2, [pc, #20]	; (400944 <pll_enable+0x3c>)
  400930:	687b      	ldr	r3, [r7, #4]
  400932:	681b      	ldr	r3, [r3, #0]
  400934:	62d3      	str	r3, [r2, #44]	; 0x2c
	}
}
  400936:	bf00      	nop
  400938:	3708      	adds	r7, #8
  40093a:	46bd      	mov	sp, r7
  40093c:	bd80      	pop	{r7, pc}
  40093e:	bf00      	nop
  400940:	0040181d 	.word	0x0040181d
  400944:	400e0400 	.word	0x400e0400
  400948:	0040184d 	.word	0x0040184d

0040094c <pll_is_locked>:
		pmc_disable_pllbck();
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  40094c:	b580      	push	{r7, lr}
  40094e:	b082      	sub	sp, #8
  400950:	af00      	add	r7, sp, #0
  400952:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  400954:	687b      	ldr	r3, [r7, #4]
  400956:	2b00      	cmp	r3, #0
  400958:	d103      	bne.n	400962 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
  40095a:	4b05      	ldr	r3, [pc, #20]	; (400970 <pll_is_locked+0x24>)
  40095c:	4798      	blx	r3
  40095e:	4603      	mov	r3, r0
  400960:	e002      	b.n	400968 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_pllbck();
  400962:	4b04      	ldr	r3, [pc, #16]	; (400974 <pll_is_locked+0x28>)
  400964:	4798      	blx	r3
  400966:	4603      	mov	r3, r0
	}
}
  400968:	4618      	mov	r0, r3
  40096a:	3708      	adds	r7, #8
  40096c:	46bd      	mov	sp, r7
  40096e:	bd80      	pop	{r7, pc}
  400970:	00401835 	.word	0x00401835
  400974:	00401865 	.word	0x00401865

00400978 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  400978:	b580      	push	{r7, lr}
  40097a:	b082      	sub	sp, #8
  40097c:	af00      	add	r7, sp, #0
  40097e:	4603      	mov	r3, r0
  400980:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  400982:	79fb      	ldrb	r3, [r7, #7]
  400984:	3b03      	subs	r3, #3
  400986:	2b04      	cmp	r3, #4
  400988:	d808      	bhi.n	40099c <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  40098a:	79fb      	ldrb	r3, [r7, #7]
  40098c:	4618      	mov	r0, r3
  40098e:	4b06      	ldr	r3, [pc, #24]	; (4009a8 <pll_enable_source+0x30>)
  400990:	4798      	blx	r3
		osc_wait_ready(e_src);
  400992:	79fb      	ldrb	r3, [r7, #7]
  400994:	4618      	mov	r0, r3
  400996:	4b05      	ldr	r3, [pc, #20]	; (4009ac <pll_enable_source+0x34>)
  400998:	4798      	blx	r3
		break;
  40099a:	e000      	b.n	40099e <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  40099c:	bf00      	nop
	}
}
  40099e:	bf00      	nop
  4009a0:	3708      	adds	r7, #8
  4009a2:	46bd      	mov	sp, r7
  4009a4:	bd80      	pop	{r7, pc}
  4009a6:	bf00      	nop
  4009a8:	0040071d 	.word	0x0040071d
  4009ac:	00400889 	.word	0x00400889

004009b0 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4009b0:	b580      	push	{r7, lr}
  4009b2:	b082      	sub	sp, #8
  4009b4:	af00      	add	r7, sp, #0
  4009b6:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4009b8:	bf00      	nop
  4009ba:	6878      	ldr	r0, [r7, #4]
  4009bc:	4b04      	ldr	r3, [pc, #16]	; (4009d0 <pll_wait_for_lock+0x20>)
  4009be:	4798      	blx	r3
  4009c0:	4603      	mov	r3, r0
  4009c2:	2b00      	cmp	r3, #0
  4009c4:	d0f9      	beq.n	4009ba <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4009c6:	2300      	movs	r3, #0
}
  4009c8:	4618      	mov	r0, r3
  4009ca:	3708      	adds	r7, #8
  4009cc:	46bd      	mov	sp, r7
  4009ce:	bd80      	pop	{r7, pc}
  4009d0:	0040094d 	.word	0x0040094d

004009d4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  4009d4:	b580      	push	{r7, lr}
  4009d6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  4009d8:	2006      	movs	r0, #6
  4009da:	4b04      	ldr	r3, [pc, #16]	; (4009ec <sysclk_get_main_hz+0x18>)
  4009dc:	4798      	blx	r3
  4009de:	4602      	mov	r2, r0
  4009e0:	4613      	mov	r3, r2
  4009e2:	009b      	lsls	r3, r3, #2
  4009e4:	4413      	add	r3, r2
  4009e6:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  4009e8:	4618      	mov	r0, r3
  4009ea:	bd80      	pop	{r7, pc}
  4009ec:	00400815 	.word	0x00400815

004009f0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  4009f0:	b580      	push	{r7, lr}
  4009f2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  4009f4:	4b02      	ldr	r3, [pc, #8]	; (400a00 <sysclk_get_cpu_hz+0x10>)
  4009f6:	4798      	blx	r3
  4009f8:	4603      	mov	r3, r0
  4009fa:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  4009fc:	4618      	mov	r0, r3
  4009fe:	bd80      	pop	{r7, pc}
  400a00:	004009d5 	.word	0x004009d5

00400a04 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400a04:	b590      	push	{r4, r7, lr}
  400a06:	b083      	sub	sp, #12
  400a08:	af00      	add	r7, sp, #0
	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400a0a:	4811      	ldr	r0, [pc, #68]	; (400a50 <sysclk_init+0x4c>)
  400a0c:	4b11      	ldr	r3, [pc, #68]	; (400a54 <sysclk_init+0x50>)
  400a0e:	4798      	blx	r3

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		struct pll_config pllcfg;

		pll_enable_source(CONFIG_PLL0_SOURCE);
  400a10:	2006      	movs	r0, #6
  400a12:	4b11      	ldr	r3, [pc, #68]	; (400a58 <sysclk_init+0x54>)
  400a14:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  400a16:	1d38      	adds	r0, r7, #4
  400a18:	2314      	movs	r3, #20
  400a1a:	2201      	movs	r2, #1
  400a1c:	2106      	movs	r1, #6
  400a1e:	4c0f      	ldr	r4, [pc, #60]	; (400a5c <sysclk_init+0x58>)
  400a20:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  400a22:	1d3b      	adds	r3, r7, #4
  400a24:	2100      	movs	r1, #0
  400a26:	4618      	mov	r0, r3
  400a28:	4b0d      	ldr	r3, [pc, #52]	; (400a60 <sysclk_init+0x5c>)
  400a2a:	4798      	blx	r3
		pll_wait_for_lock(0);
  400a2c:	2000      	movs	r0, #0
  400a2e:	4b0d      	ldr	r3, [pc, #52]	; (400a64 <sysclk_init+0x60>)
  400a30:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400a32:	2010      	movs	r0, #16
  400a34:	4b0c      	ldr	r3, [pc, #48]	; (400a68 <sysclk_init+0x64>)
  400a36:	4798      	blx	r3
		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
	}
#endif

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400a38:	4b0c      	ldr	r3, [pc, #48]	; (400a6c <sysclk_init+0x68>)
  400a3a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400a3c:	4b0c      	ldr	r3, [pc, #48]	; (400a70 <sysclk_init+0x6c>)
  400a3e:	4798      	blx	r3
  400a40:	4603      	mov	r3, r0
  400a42:	4618      	mov	r0, r3
  400a44:	4b03      	ldr	r3, [pc, #12]	; (400a54 <sysclk_init+0x50>)
  400a46:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  400a48:	bf00      	nop
  400a4a:	370c      	adds	r7, #12
  400a4c:	46bd      	mov	sp, r7
  400a4e:	bd90      	pop	{r4, r7, pc}
  400a50:	07270e00 	.word	0x07270e00
  400a54:	004021f9 	.word	0x004021f9
  400a58:	00400979 	.word	0x00400979
  400a5c:	004008b5 	.word	0x004008b5
  400a60:	00400909 	.word	0x00400909
  400a64:	004009b1 	.word	0x004009b1
  400a68:	00401631 	.word	0x00401631
  400a6c:	0040205d 	.word	0x0040205d
  400a70:	004009f1 	.word	0x004009f1

00400a74 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400a74:	b480      	push	{r7}
  400a76:	b083      	sub	sp, #12
  400a78:	af00      	add	r7, sp, #0
  400a7a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400a7c:	687b      	ldr	r3, [r7, #4]
  400a7e:	2b07      	cmp	r3, #7
  400a80:	d825      	bhi.n	400ace <osc_get_rate+0x5a>
  400a82:	a201      	add	r2, pc, #4	; (adr r2, 400a88 <osc_get_rate+0x14>)
  400a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400a88:	00400aa9 	.word	0x00400aa9
  400a8c:	00400aaf 	.word	0x00400aaf
  400a90:	00400ab5 	.word	0x00400ab5
  400a94:	00400abb 	.word	0x00400abb
  400a98:	00400abf 	.word	0x00400abf
  400a9c:	00400ac3 	.word	0x00400ac3
  400aa0:	00400ac7 	.word	0x00400ac7
  400aa4:	00400acb 	.word	0x00400acb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400aa8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400aac:	e010      	b.n	400ad0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ab2:	e00d      	b.n	400ad0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400ab8:	e00a      	b.n	400ad0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400aba:	4b08      	ldr	r3, [pc, #32]	; (400adc <osc_get_rate+0x68>)
  400abc:	e008      	b.n	400ad0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400abe:	4b08      	ldr	r3, [pc, #32]	; (400ae0 <osc_get_rate+0x6c>)
  400ac0:	e006      	b.n	400ad0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400ac2:	4b08      	ldr	r3, [pc, #32]	; (400ae4 <osc_get_rate+0x70>)
  400ac4:	e004      	b.n	400ad0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400ac6:	4b07      	ldr	r3, [pc, #28]	; (400ae4 <osc_get_rate+0x70>)
  400ac8:	e002      	b.n	400ad0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400aca:	4b06      	ldr	r3, [pc, #24]	; (400ae4 <osc_get_rate+0x70>)
  400acc:	e000      	b.n	400ad0 <osc_get_rate+0x5c>
	}

	return 0;
  400ace:	2300      	movs	r3, #0
}
  400ad0:	4618      	mov	r0, r3
  400ad2:	370c      	adds	r7, #12
  400ad4:	46bd      	mov	sp, r7
  400ad6:	bc80      	pop	{r7}
  400ad8:	4770      	bx	lr
  400ada:	bf00      	nop
  400adc:	003d0900 	.word	0x003d0900
  400ae0:	007a1200 	.word	0x007a1200
  400ae4:	00b71b00 	.word	0x00b71b00

00400ae8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  400ae8:	b580      	push	{r7, lr}
  400aea:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  400aec:	2006      	movs	r0, #6
  400aee:	4b04      	ldr	r3, [pc, #16]	; (400b00 <sysclk_get_main_hz+0x18>)
  400af0:	4798      	blx	r3
  400af2:	4602      	mov	r2, r0
  400af4:	4613      	mov	r3, r2
  400af6:	009b      	lsls	r3, r3, #2
  400af8:	4413      	add	r3, r2
  400afa:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  400afc:	4618      	mov	r0, r3
  400afe:	bd80      	pop	{r7, pc}
  400b00:	00400a75 	.word	0x00400a75

00400b04 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  400b04:	b580      	push	{r7, lr}
  400b06:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  400b08:	4b02      	ldr	r3, [pc, #8]	; (400b14 <sysclk_get_cpu_hz+0x10>)
  400b0a:	4798      	blx	r3
  400b0c:	4603      	mov	r3, r0
  400b0e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  400b10:	4618      	mov	r0, r3
  400b12:	bd80      	pop	{r7, pc}
  400b14:	00400ae9 	.word	0x00400ae9

00400b18 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
  400b18:	b480      	push	{r7}
  400b1a:	b083      	sub	sp, #12
  400b1c:	af00      	add	r7, sp, #0
  400b1e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400b20:	687b      	ldr	r3, [r7, #4]
  400b22:	2280      	movs	r2, #128	; 0x80
  400b24:	601a      	str	r2, [r3, #0]
}
  400b26:	bf00      	nop
  400b28:	370c      	adds	r7, #12
  400b2a:	46bd      	mov	sp, r7
  400b2c:	bc80      	pop	{r7}
  400b2e:	4770      	bx	lr

00400b30 <spi_set_lastxfer>:
 *  The next transfer is the last transfer and after that CS is de-asserted.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_lastxfer(Spi *p_spi)
{
  400b30:	b480      	push	{r7}
  400b32:	b083      	sub	sp, #12
  400b34:	af00      	add	r7, sp, #0
  400b36:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_LASTXFER;
  400b38:	687b      	ldr	r3, [r7, #4]
  400b3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  400b3e:	601a      	str	r2, [r3, #0]
}
  400b40:	bf00      	nop
  400b42:	370c      	adds	r7, #12
  400b44:	46bd      	mov	sp, r7
  400b46:	bc80      	pop	{r7}
  400b48:	4770      	bx	lr
  400b4a:	bf00      	nop

00400b4c <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
  400b4c:	b480      	push	{r7}
  400b4e:	b083      	sub	sp, #12
  400b50:	af00      	add	r7, sp, #0
  400b52:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400b54:	687b      	ldr	r3, [r7, #4]
  400b56:	685b      	ldr	r3, [r3, #4]
  400b58:	f043 0201 	orr.w	r2, r3, #1
  400b5c:	687b      	ldr	r3, [r7, #4]
  400b5e:	605a      	str	r2, [r3, #4]
}
  400b60:	bf00      	nop
  400b62:	370c      	adds	r7, #12
  400b64:	46bd      	mov	sp, r7
  400b66:	bc80      	pop	{r7}
  400b68:	4770      	bx	lr
  400b6a:	bf00      	nop

00400b6c <spi_set_fixed_peripheral_select>:
 *  Peripheral Chip Select is controlled by SPI_MR.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
  400b6c:	b480      	push	{r7}
  400b6e:	b083      	sub	sp, #12
  400b70:	af00      	add	r7, sp, #0
  400b72:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400b74:	687b      	ldr	r3, [r7, #4]
  400b76:	685b      	ldr	r3, [r3, #4]
  400b78:	f023 0202 	bic.w	r2, r3, #2
  400b7c:	687b      	ldr	r3, [r7, #4]
  400b7e:	605a      	str	r2, [r3, #4]
}
  400b80:	bf00      	nop
  400b82:	370c      	adds	r7, #12
  400b84:	46bd      	mov	sp, r7
  400b86:	bc80      	pop	{r7}
  400b88:	4770      	bx	lr
  400b8a:	bf00      	nop

00400b8c <spi_disable_peripheral_select_decode>:
 * \brief Disable Peripheral Select Decode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
  400b8c:	b480      	push	{r7}
  400b8e:	b083      	sub	sp, #12
  400b90:	af00      	add	r7, sp, #0
  400b92:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  400b94:	687b      	ldr	r3, [r7, #4]
  400b96:	685b      	ldr	r3, [r3, #4]
  400b98:	f023 0204 	bic.w	r2, r3, #4
  400b9c:	687b      	ldr	r3, [r7, #4]
  400b9e:	605a      	str	r2, [r3, #4]
}
  400ba0:	bf00      	nop
  400ba2:	370c      	adds	r7, #12
  400ba4:	46bd      	mov	sp, r7
  400ba6:	bc80      	pop	{r7}
  400ba8:	4770      	bx	lr
  400baa:	bf00      	nop

00400bac <spi_get_peripheral_select_decode_setting>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for decode mode, 0 for direct mode.
 */
static inline uint32_t spi_get_peripheral_select_decode_setting(Spi *p_spi)
{
  400bac:	b480      	push	{r7}
  400bae:	b083      	sub	sp, #12
  400bb0:	af00      	add	r7, sp, #0
  400bb2:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  400bb4:	687b      	ldr	r3, [r7, #4]
  400bb6:	685b      	ldr	r3, [r3, #4]
  400bb8:	f003 0304 	and.w	r3, r3, #4
  400bbc:	2b00      	cmp	r3, #0
  400bbe:	d001      	beq.n	400bc4 <spi_get_peripheral_select_decode_setting+0x18>
		return 1;
  400bc0:	2301      	movs	r3, #1
  400bc2:	e000      	b.n	400bc6 <spi_get_peripheral_select_decode_setting+0x1a>
	} else {
		return 0;
  400bc4:	2300      	movs	r3, #0
	}
}
  400bc6:	4618      	mov	r0, r3
  400bc8:	370c      	adds	r7, #12
  400bca:	46bd      	mov	sp, r7
  400bcc:	bc80      	pop	{r7}
  400bce:	4770      	bx	lr

00400bd0 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  400bd0:	b480      	push	{r7}
  400bd2:	b083      	sub	sp, #12
  400bd4:	af00      	add	r7, sp, #0
  400bd6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400bd8:	687b      	ldr	r3, [r7, #4]
  400bda:	685b      	ldr	r3, [r3, #4]
  400bdc:	f043 0210 	orr.w	r2, r3, #16
  400be0:	687b      	ldr	r3, [r7, #4]
  400be2:	605a      	str	r2, [r3, #4]
}
  400be4:	bf00      	nop
  400be6:	370c      	adds	r7, #12
  400be8:	46bd      	mov	sp, r7
  400bea:	bc80      	pop	{r7}
  400bec:	4770      	bx	lr
  400bee:	bf00      	nop

00400bf0 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  400bf0:	b480      	push	{r7}
  400bf2:	b083      	sub	sp, #12
  400bf4:	af00      	add	r7, sp, #0
  400bf6:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400bf8:	687b      	ldr	r3, [r7, #4]
  400bfa:	685b      	ldr	r3, [r3, #4]
  400bfc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  400c00:	687b      	ldr	r3, [r7, #4]
  400c02:	605a      	str	r2, [r3, #4]
}
  400c04:	bf00      	nop
  400c06:	370c      	adds	r7, #12
  400c08:	46bd      	mov	sp, r7
  400c0a:	bc80      	pop	{r7}
  400c0c:	4770      	bx	lr
  400c0e:	bf00      	nop

00400c10 <spi_is_tx_empty>:
 *
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_empty(Spi *p_spi)
{
  400c10:	b480      	push	{r7}
  400c12:	b083      	sub	sp, #12
  400c14:	af00      	add	r7, sp, #0
  400c16:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_SR & SPI_SR_TXEMPTY) {
  400c18:	687b      	ldr	r3, [r7, #4]
  400c1a:	691b      	ldr	r3, [r3, #16]
  400c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  400c20:	2b00      	cmp	r3, #0
  400c22:	d001      	beq.n	400c28 <spi_is_tx_empty+0x18>
		return 1;
  400c24:	2301      	movs	r3, #1
  400c26:	e000      	b.n	400c2a <spi_is_tx_empty+0x1a>
	} else {
		return 0;
  400c28:	2300      	movs	r3, #0
	}
}
  400c2a:	4618      	mov	r0, r3
  400c2c:	370c      	adds	r7, #12
  400c2e:	46bd      	mov	sp, r7
  400c30:	bc80      	pop	{r7}
  400c32:	4770      	bx	lr

00400c34 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  400c34:	b580      	push	{r7, lr}
  400c36:	b082      	sub	sp, #8
  400c38:	af00      	add	r7, sp, #0
  400c3a:	6078      	str	r0, [r7, #4]
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  400c3c:	6878      	ldr	r0, [r7, #4]
  400c3e:	4b10      	ldr	r3, [pc, #64]	; (400c80 <spi_master_init+0x4c>)
  400c40:	4798      	blx	r3
#endif
	spi_reset(p_spi);
  400c42:	6878      	ldr	r0, [r7, #4]
  400c44:	4b0f      	ldr	r3, [pc, #60]	; (400c84 <spi_master_init+0x50>)
  400c46:	4798      	blx	r3
	spi_set_master_mode(p_spi);
  400c48:	6878      	ldr	r0, [r7, #4]
  400c4a:	4b0f      	ldr	r3, [pc, #60]	; (400c88 <spi_master_init+0x54>)
  400c4c:	4798      	blx	r3
	spi_disable_mode_fault_detect(p_spi);
  400c4e:	6878      	ldr	r0, [r7, #4]
  400c50:	4b0e      	ldr	r3, [pc, #56]	; (400c8c <spi_master_init+0x58>)
  400c52:	4798      	blx	r3
	spi_disable_loopback(p_spi);
  400c54:	6878      	ldr	r0, [r7, #4]
  400c56:	4b0e      	ldr	r3, [pc, #56]	; (400c90 <spi_master_init+0x5c>)
  400c58:	4798      	blx	r3
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  400c5a:	2100      	movs	r1, #0
  400c5c:	6878      	ldr	r0, [r7, #4]
  400c5e:	4b0d      	ldr	r3, [pc, #52]	; (400c94 <spi_master_init+0x60>)
  400c60:	4798      	blx	r3
	spi_set_fixed_peripheral_select(p_spi);
  400c62:	6878      	ldr	r0, [r7, #4]
  400c64:	4b0c      	ldr	r3, [pc, #48]	; (400c98 <spi_master_init+0x64>)
  400c66:	4798      	blx	r3
	spi_disable_peripheral_select_decode(p_spi);
  400c68:	6878      	ldr	r0, [r7, #4]
  400c6a:	4b0c      	ldr	r3, [pc, #48]	; (400c9c <spi_master_init+0x68>)
  400c6c:	4798      	blx	r3
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  400c6e:	2100      	movs	r1, #0
  400c70:	6878      	ldr	r0, [r7, #4]
  400c72:	4b0b      	ldr	r3, [pc, #44]	; (400ca0 <spi_master_init+0x6c>)
  400c74:	4798      	blx	r3
}
  400c76:	bf00      	nop
  400c78:	3708      	adds	r7, #8
  400c7a:	46bd      	mov	sp, r7
  400c7c:	bd80      	pop	{r7, pc}
  400c7e:	bf00      	nop
  400c80:	00401919 	.word	0x00401919
  400c84:	00400b19 	.word	0x00400b19
  400c88:	00400b4d 	.word	0x00400b4d
  400c8c:	00400bd1 	.word	0x00400bd1
  400c90:	00400bf1 	.word	0x00400bf1
  400c94:	00401935 	.word	0x00401935
  400c98:	00400b6d 	.word	0x00400b6d
  400c9c:	00400b8d 	.word	0x00400b8d
  400ca0:	00401969 	.word	0x00401969

00400ca4 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400ca4:	b590      	push	{r4, r7, lr}
  400ca6:	b087      	sub	sp, #28
  400ca8:	af00      	add	r7, sp, #0
  400caa:	60f8      	str	r0, [r7, #12]
  400cac:	60b9      	str	r1, [r7, #8]
  400cae:	603b      	str	r3, [r7, #0]
  400cb0:	4613      	mov	r3, r2
  400cb2:	71fb      	strb	r3, [r7, #7]
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_cpu_hz());
  400cb4:	4b20      	ldr	r3, [pc, #128]	; (400d38 <spi_master_setup_device+0x94>)
  400cb6:	4798      	blx	r3
  400cb8:	4603      	mov	r3, r0
  400cba:	4619      	mov	r1, r3
  400cbc:	6838      	ldr	r0, [r7, #0]
  400cbe:	4b1f      	ldr	r3, [pc, #124]	; (400d3c <spi_master_setup_device+0x98>)
  400cc0:	4798      	blx	r3
  400cc2:	4603      	mov	r3, r0
  400cc4:	82fb      	strh	r3, [r7, #22]
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400cc6:	68bb      	ldr	r3, [r7, #8]
  400cc8:	6819      	ldr	r1, [r3, #0]
  400cca:	2300      	movs	r3, #0
  400ccc:	2200      	movs	r2, #0
  400cce:	68f8      	ldr	r0, [r7, #12]
  400cd0:	4c1b      	ldr	r4, [pc, #108]	; (400d40 <spi_master_setup_device+0x9c>)
  400cd2:	47a0      	blx	r4
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400cd4:	68bb      	ldr	r3, [r7, #8]
  400cd6:	681b      	ldr	r3, [r3, #0]
  400cd8:	2208      	movs	r2, #8
  400cda:	4619      	mov	r1, r3
  400cdc:	68f8      	ldr	r0, [r7, #12]
  400cde:	4b19      	ldr	r3, [pc, #100]	; (400d44 <spi_master_setup_device+0xa0>)
  400ce0:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400ce2:	68bb      	ldr	r3, [r7, #8]
  400ce4:	681b      	ldr	r3, [r3, #0]
  400ce6:	8afa      	ldrh	r2, [r7, #22]
  400ce8:	b2d2      	uxtb	r2, r2
  400cea:	4619      	mov	r1, r3
  400cec:	68f8      	ldr	r0, [r7, #12]
  400cee:	4b16      	ldr	r3, [pc, #88]	; (400d48 <spi_master_setup_device+0xa4>)
  400cf0:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  400cf2:	68bb      	ldr	r3, [r7, #8]
  400cf4:	681b      	ldr	r3, [r3, #0]
  400cf6:	2208      	movs	r2, #8
  400cf8:	4619      	mov	r1, r3
  400cfa:	68f8      	ldr	r0, [r7, #12]
  400cfc:	4b13      	ldr	r3, [pc, #76]	; (400d4c <spi_master_setup_device+0xa8>)
  400cfe:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  400d00:	68bb      	ldr	r3, [r7, #8]
  400d02:	6819      	ldr	r1, [r3, #0]
  400d04:	79fb      	ldrb	r3, [r7, #7]
  400d06:	085b      	lsrs	r3, r3, #1
  400d08:	b2db      	uxtb	r3, r3
  400d0a:	461a      	mov	r2, r3
  400d0c:	68f8      	ldr	r0, [r7, #12]
  400d0e:	4b10      	ldr	r3, [pc, #64]	; (400d50 <spi_master_setup_device+0xac>)
  400d10:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  400d12:	68bb      	ldr	r3, [r7, #8]
  400d14:	6819      	ldr	r1, [r3, #0]
  400d16:	79fb      	ldrb	r3, [r7, #7]
  400d18:	f003 0301 	and.w	r3, r3, #1
  400d1c:	2b00      	cmp	r3, #0
  400d1e:	bf0c      	ite	eq
  400d20:	2301      	moveq	r3, #1
  400d22:	2300      	movne	r3, #0
  400d24:	b2db      	uxtb	r3, r3
  400d26:	461a      	mov	r2, r3
  400d28:	68f8      	ldr	r0, [r7, #12]
  400d2a:	4b0a      	ldr	r3, [pc, #40]	; (400d54 <spi_master_setup_device+0xb0>)
  400d2c:	4798      	blx	r3
}
  400d2e:	bf00      	nop
  400d30:	371c      	adds	r7, #28
  400d32:	46bd      	mov	sp, r7
  400d34:	bd90      	pop	{r4, r7, pc}
  400d36:	bf00      	nop
  400d38:	00400b05 	.word	0x00400b05
  400d3c:	00401b25 	.word	0x00401b25
  400d40:	00401bbd 	.word	0x00401bbd
  400d44:	00401add 	.word	0x00401add
  400d48:	00401b61 	.word	0x00401b61
  400d4c:	00401a39 	.word	0x00401a39
  400d50:	00401999 	.word	0x00401999
  400d54:	004019e9 	.word	0x004019e9

00400d58 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  400d58:	b580      	push	{r7, lr}
  400d5a:	b082      	sub	sp, #8
  400d5c:	af00      	add	r7, sp, #0
  400d5e:	6078      	str	r0, [r7, #4]
  400d60:	6039      	str	r1, [r7, #0]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400d62:	6878      	ldr	r0, [r7, #4]
  400d64:	4b10      	ldr	r3, [pc, #64]	; (400da8 <spi_select_device+0x50>)
  400d66:	4798      	blx	r3
  400d68:	4603      	mov	r3, r0
  400d6a:	2b00      	cmp	r3, #0
  400d6c:	d00a      	beq.n	400d84 <spi_select_device+0x2c>
		if (device->id < MAX_NUM_WITH_DECODER) {
  400d6e:	683b      	ldr	r3, [r7, #0]
  400d70:	681b      	ldr	r3, [r3, #0]
  400d72:	2b0f      	cmp	r3, #15
  400d74:	d814      	bhi.n	400da0 <spi_select_device+0x48>
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  400d76:	683b      	ldr	r3, [r7, #0]
  400d78:	681b      	ldr	r3, [r3, #0]
  400d7a:	4619      	mov	r1, r3
  400d7c:	6878      	ldr	r0, [r7, #4]
  400d7e:	4b0b      	ldr	r3, [pc, #44]	; (400dac <spi_select_device+0x54>)
  400d80:	4798      	blx	r3
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
		}
	}
}
  400d82:	e00d      	b.n	400da0 <spi_select_device+0x48>
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
		if (device->id < MAX_NUM_WITH_DECODER) {
			spi_set_peripheral_chip_select_value(p_spi, device->id);
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  400d84:	683b      	ldr	r3, [r7, #0]
  400d86:	681b      	ldr	r3, [r3, #0]
  400d88:	2b03      	cmp	r3, #3
  400d8a:	d809      	bhi.n	400da0 <spi_select_device+0x48>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  400d8c:	683b      	ldr	r3, [r7, #0]
  400d8e:	681b      	ldr	r3, [r3, #0]
  400d90:	2201      	movs	r2, #1
  400d92:	fa02 f303 	lsl.w	r3, r2, r3
  400d96:	43db      	mvns	r3, r3
  400d98:	4619      	mov	r1, r3
  400d9a:	6878      	ldr	r0, [r7, #4]
  400d9c:	4b03      	ldr	r3, [pc, #12]	; (400dac <spi_select_device+0x54>)
  400d9e:	4798      	blx	r3
		}
	}
}
  400da0:	bf00      	nop
  400da2:	3708      	adds	r7, #8
  400da4:	46bd      	mov	sp, r7
  400da6:	bd80      	pop	{r7, pc}
  400da8:	00400bad 	.word	0x00400bad
  400dac:	00401935 	.word	0x00401935

00400db0 <spi_deselect_device>:
 * \param device  SPI device.
 *
 * \pre SPI device must be selected with spi_select_device() first.
 */
void spi_deselect_device(Spi *p_spi, struct spi_device *device)
{
  400db0:	b580      	push	{r7, lr}
  400db2:	b082      	sub	sp, #8
  400db4:	af00      	add	r7, sp, #0
  400db6:	6078      	str	r0, [r7, #4]
  400db8:	6039      	str	r1, [r7, #0]
	/* avoid Cppcheck Warning */
	UNUSED(device);
	while (!spi_is_tx_empty(p_spi)) {
  400dba:	bf00      	nop
  400dbc:	6878      	ldr	r0, [r7, #4]
  400dbe:	4b08      	ldr	r3, [pc, #32]	; (400de0 <spi_deselect_device+0x30>)
  400dc0:	4798      	blx	r3
  400dc2:	4603      	mov	r3, r0
  400dc4:	2b00      	cmp	r3, #0
  400dc6:	d0f9      	beq.n	400dbc <spi_deselect_device+0xc>
	}

	// Assert all lines; no peripheral is selected.
	spi_set_peripheral_chip_select_value(p_spi, NONE_CHIP_SELECT_ID);
  400dc8:	210f      	movs	r1, #15
  400dca:	6878      	ldr	r0, [r7, #4]
  400dcc:	4b05      	ldr	r3, [pc, #20]	; (400de4 <spi_deselect_device+0x34>)
  400dce:	4798      	blx	r3

	// Last transfer, so de-assert the current NPCS if CSAAT is set.
	spi_set_lastxfer(p_spi);
  400dd0:	6878      	ldr	r0, [r7, #4]
  400dd2:	4b05      	ldr	r3, [pc, #20]	; (400de8 <spi_deselect_device+0x38>)
  400dd4:	4798      	blx	r3

}
  400dd6:	bf00      	nop
  400dd8:	3708      	adds	r7, #8
  400dda:	46bd      	mov	sp, r7
  400ddc:	bd80      	pop	{r7, pc}
  400dde:	bf00      	nop
  400de0:	00400c11 	.word	0x00400c11
  400de4:	00401935 	.word	0x00401935
  400de8:	00400b31 	.word	0x00400b31

00400dec <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  400dec:	b580      	push	{r7, lr}
  400dee:	b082      	sub	sp, #8
  400df0:	af00      	add	r7, sp, #0
  400df2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  400df4:	6878      	ldr	r0, [r7, #4]
  400df6:	4b03      	ldr	r3, [pc, #12]	; (400e04 <sysclk_enable_peripheral_clock+0x18>)
  400df8:	4798      	blx	r3
}
  400dfa:	bf00      	nop
  400dfc:	3708      	adds	r7, #8
  400dfe:	46bd      	mov	sp, r7
  400e00:	bd80      	pop	{r7, pc}
  400e02:	bf00      	nop
  400e04:	0040187d 	.word	0x0040187d

00400e08 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
  400e08:	b580      	push	{r7, lr}
  400e0a:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
  400e0c:	200b      	movs	r0, #11
  400e0e:	4b05      	ldr	r3, [pc, #20]	; (400e24 <ioport_init+0x1c>)
  400e10:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
  400e12:	200c      	movs	r0, #12
  400e14:	4b03      	ldr	r3, [pc, #12]	; (400e24 <ioport_init+0x1c>)
  400e16:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
  400e18:	200d      	movs	r0, #13
  400e1a:	4b02      	ldr	r3, [pc, #8]	; (400e24 <ioport_init+0x1c>)
  400e1c:	4798      	blx	r3
	arch_ioport_init();
}
  400e1e:	bf00      	nop
  400e20:	bd80      	pop	{r7, pc}
  400e22:	bf00      	nop
  400e24:	00400ded 	.word	0x00400ded

00400e28 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400e28:	b480      	push	{r7}
  400e2a:	b08d      	sub	sp, #52	; 0x34
  400e2c:	af00      	add	r7, sp, #0
  400e2e:	6078      	str	r0, [r7, #4]
  400e30:	6039      	str	r1, [r7, #0]
  400e32:	687b      	ldr	r3, [r7, #4]
  400e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  400e36:	683b      	ldr	r3, [r7, #0]
  400e38:	62bb      	str	r3, [r7, #40]	; 0x28
  400e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400e3c:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400e40:	095a      	lsrs	r2, r3, #5
  400e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400e44:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400e46:	6a3b      	ldr	r3, [r7, #32]
  400e48:	f003 031f 	and.w	r3, r3, #31
  400e4c:	2101      	movs	r1, #1
  400e4e:	fa01 f303 	lsl.w	r3, r1, r3
  400e52:	61fa      	str	r2, [r7, #28]
  400e54:	61bb      	str	r3, [r7, #24]
  400e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400e58:	617b      	str	r3, [r7, #20]
  400e5a:	69fb      	ldr	r3, [r7, #28]
  400e5c:	613b      	str	r3, [r7, #16]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400e5e:	693b      	ldr	r3, [r7, #16]
  400e60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400e64:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400e68:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400e6a:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400e6c:	697b      	ldr	r3, [r7, #20]
  400e6e:	f003 0308 	and.w	r3, r3, #8
  400e72:	2b00      	cmp	r3, #0
  400e74:	d003      	beq.n	400e7e <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
  400e76:	68fb      	ldr	r3, [r7, #12]
  400e78:	69ba      	ldr	r2, [r7, #24]
  400e7a:	665a      	str	r2, [r3, #100]	; 0x64
  400e7c:	e002      	b.n	400e84 <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
  400e7e:	68fb      	ldr	r3, [r7, #12]
  400e80:	69ba      	ldr	r2, [r7, #24]
  400e82:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400e84:	697b      	ldr	r3, [r7, #20]
  400e86:	f003 0310 	and.w	r3, r3, #16
  400e8a:	2b00      	cmp	r3, #0
  400e8c:	d004      	beq.n	400e98 <ioport_set_pin_mode+0x70>
		base->PIO_PPDER = mask;
  400e8e:	68fb      	ldr	r3, [r7, #12]
  400e90:	69ba      	ldr	r2, [r7, #24]
  400e92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400e96:	e003      	b.n	400ea0 <ioport_set_pin_mode+0x78>
	} else {
		base->PIO_PPDDR = mask;
  400e98:	68fb      	ldr	r3, [r7, #12]
  400e9a:	69ba      	ldr	r2, [r7, #24]
  400e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400ea0:	697b      	ldr	r3, [r7, #20]
  400ea2:	f003 0320 	and.w	r3, r3, #32
  400ea6:	2b00      	cmp	r3, #0
  400ea8:	d003      	beq.n	400eb2 <ioport_set_pin_mode+0x8a>
		base->PIO_MDER = mask;
  400eaa:	68fb      	ldr	r3, [r7, #12]
  400eac:	69ba      	ldr	r2, [r7, #24]
  400eae:	651a      	str	r2, [r3, #80]	; 0x50
  400eb0:	e002      	b.n	400eb8 <ioport_set_pin_mode+0x90>
	} else {
		base->PIO_MDDR = mask;
  400eb2:	68fb      	ldr	r3, [r7, #12]
  400eb4:	69ba      	ldr	r2, [r7, #24]
  400eb6:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400eb8:	697b      	ldr	r3, [r7, #20]
  400eba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400ebe:	2b00      	cmp	r3, #0
  400ec0:	d003      	beq.n	400eca <ioport_set_pin_mode+0xa2>
		base->PIO_IFER = mask;
  400ec2:	68fb      	ldr	r3, [r7, #12]
  400ec4:	69ba      	ldr	r2, [r7, #24]
  400ec6:	621a      	str	r2, [r3, #32]
  400ec8:	e002      	b.n	400ed0 <ioport_set_pin_mode+0xa8>
	} else {
		base->PIO_IFDR = mask;
  400eca:	68fb      	ldr	r3, [r7, #12]
  400ecc:	69ba      	ldr	r2, [r7, #24]
  400ece:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400ed0:	697b      	ldr	r3, [r7, #20]
  400ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400ed6:	2b00      	cmp	r3, #0
  400ed8:	d004      	beq.n	400ee4 <ioport_set_pin_mode+0xbc>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400eda:	68fb      	ldr	r3, [r7, #12]
  400edc:	69ba      	ldr	r2, [r7, #24]
  400ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400ee2:	e003      	b.n	400eec <ioport_set_pin_mode+0xc4>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400ee4:	68fb      	ldr	r3, [r7, #12]
  400ee6:	69ba      	ldr	r2, [r7, #24]
  400ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400eec:	697b      	ldr	r3, [r7, #20]
  400eee:	f003 0301 	and.w	r3, r3, #1
  400ef2:	2b00      	cmp	r3, #0
  400ef4:	d006      	beq.n	400f04 <ioport_set_pin_mode+0xdc>
		base->PIO_ABCDSR[0] |= mask;
  400ef6:	68fb      	ldr	r3, [r7, #12]
  400ef8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400efa:	69bb      	ldr	r3, [r7, #24]
  400efc:	431a      	orrs	r2, r3
  400efe:	68fb      	ldr	r3, [r7, #12]
  400f00:	671a      	str	r2, [r3, #112]	; 0x70
  400f02:	e006      	b.n	400f12 <ioport_set_pin_mode+0xea>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400f04:	68fb      	ldr	r3, [r7, #12]
  400f06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400f08:	69bb      	ldr	r3, [r7, #24]
  400f0a:	43db      	mvns	r3, r3
  400f0c:	401a      	ands	r2, r3
  400f0e:	68fb      	ldr	r3, [r7, #12]
  400f10:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400f12:	697b      	ldr	r3, [r7, #20]
  400f14:	f003 0302 	and.w	r3, r3, #2
  400f18:	2b00      	cmp	r3, #0
  400f1a:	d006      	beq.n	400f2a <ioport_set_pin_mode+0x102>
		base->PIO_ABCDSR[1] |= mask;
  400f1c:	68fb      	ldr	r3, [r7, #12]
  400f1e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f20:	69bb      	ldr	r3, [r7, #24]
  400f22:	431a      	orrs	r2, r3
  400f24:	68fb      	ldr	r3, [r7, #12]
  400f26:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400f28:	e006      	b.n	400f38 <ioport_set_pin_mode+0x110>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400f2a:	68fb      	ldr	r3, [r7, #12]
  400f2c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400f2e:	69bb      	ldr	r3, [r7, #24]
  400f30:	43db      	mvns	r3, r3
  400f32:	401a      	ands	r2, r3
  400f34:	68fb      	ldr	r3, [r7, #12]
  400f36:	675a      	str	r2, [r3, #116]	; 0x74
  400f38:	bf00      	nop
  400f3a:	3734      	adds	r7, #52	; 0x34
  400f3c:	46bd      	mov	sp, r7
  400f3e:	bc80      	pop	{r7}
  400f40:	4770      	bx	lr
  400f42:	bf00      	nop

00400f44 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400f44:	b480      	push	{r7}
  400f46:	b08d      	sub	sp, #52	; 0x34
  400f48:	af00      	add	r7, sp, #0
  400f4a:	6078      	str	r0, [r7, #4]
  400f4c:	460b      	mov	r3, r1
  400f4e:	70fb      	strb	r3, [r7, #3]
  400f50:	687b      	ldr	r3, [r7, #4]
  400f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  400f54:	78fb      	ldrb	r3, [r7, #3]
  400f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f5c:	627b      	str	r3, [r7, #36]	; 0x24
  400f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400f60:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400f62:	6a3b      	ldr	r3, [r7, #32]
  400f64:	095b      	lsrs	r3, r3, #5
  400f66:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400f68:	69fb      	ldr	r3, [r7, #28]
  400f6a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400f6e:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400f72:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400f74:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400f76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400f7a:	2b01      	cmp	r3, #1
  400f7c:	d109      	bne.n	400f92 <ioport_set_pin_dir+0x4e>
  400f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f80:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400f82:	697b      	ldr	r3, [r7, #20]
  400f84:	f003 031f 	and.w	r3, r3, #31
  400f88:	2201      	movs	r2, #1
  400f8a:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400f8c:	69bb      	ldr	r3, [r7, #24]
  400f8e:	611a      	str	r2, [r3, #16]
  400f90:	e00c      	b.n	400fac <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  400f92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400f96:	2b00      	cmp	r3, #0
  400f98:	d108      	bne.n	400fac <ioport_set_pin_dir+0x68>
  400f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400f9c:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400f9e:	693b      	ldr	r3, [r7, #16]
  400fa0:	f003 031f 	and.w	r3, r3, #31
  400fa4:	2201      	movs	r2, #1
  400fa6:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400fa8:	69bb      	ldr	r3, [r7, #24]
  400faa:	615a      	str	r2, [r3, #20]
  400fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400fae:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400fb0:	68fb      	ldr	r3, [r7, #12]
  400fb2:	f003 031f 	and.w	r3, r3, #31
  400fb6:	2201      	movs	r2, #1
  400fb8:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400fba:	69bb      	ldr	r3, [r7, #24]
  400fbc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400fc0:	bf00      	nop
  400fc2:	3734      	adds	r7, #52	; 0x34
  400fc4:	46bd      	mov	sp, r7
  400fc6:	bc80      	pop	{r7}
  400fc8:	4770      	bx	lr
  400fca:	bf00      	nop

00400fcc <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400fcc:	b480      	push	{r7}
  400fce:	b08b      	sub	sp, #44	; 0x2c
  400fd0:	af00      	add	r7, sp, #0
  400fd2:	6078      	str	r0, [r7, #4]
  400fd4:	460b      	mov	r3, r1
  400fd6:	70fb      	strb	r3, [r7, #3]
  400fd8:	687b      	ldr	r3, [r7, #4]
  400fda:	627b      	str	r3, [r7, #36]	; 0x24
  400fdc:	78fb      	ldrb	r3, [r7, #3]
  400fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400fe4:	61fb      	str	r3, [r7, #28]
  400fe6:	69fb      	ldr	r3, [r7, #28]
  400fe8:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400fea:	69bb      	ldr	r3, [r7, #24]
  400fec:	095b      	lsrs	r3, r3, #5
  400fee:	617b      	str	r3, [r7, #20]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400ff0:	697b      	ldr	r3, [r7, #20]
  400ff2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  400ff6:	f203 7307 	addw	r3, r3, #1799	; 0x707
  400ffa:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400ffc:	613b      	str	r3, [r7, #16]

	if (level) {
  400ffe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  401002:	2b00      	cmp	r3, #0
  401004:	d009      	beq.n	40101a <ioport_set_pin_level+0x4e>
  401006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401008:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40100a:	68fb      	ldr	r3, [r7, #12]
  40100c:	f003 031f 	and.w	r3, r3, #31
  401010:	2201      	movs	r2, #1
  401012:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  401014:	693b      	ldr	r3, [r7, #16]
  401016:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  401018:	e008      	b.n	40102c <ioport_set_pin_level+0x60>
  40101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40101c:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40101e:	68bb      	ldr	r3, [r7, #8]
  401020:	f003 031f 	and.w	r3, r3, #31
  401024:	2201      	movs	r2, #1
  401026:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  401028:	693b      	ldr	r3, [r7, #16]
  40102a:	635a      	str	r2, [r3, #52]	; 0x34
  40102c:	bf00      	nop
  40102e:	372c      	adds	r7, #44	; 0x2c
  401030:	46bd      	mov	sp, r7
  401032:	bc80      	pop	{r7}
  401034:	4770      	bx	lr
  401036:	bf00      	nop

00401038 <board_init>:
 * \addtogroup sam4s_xplained_pro_group
 * @{
 */

void board_init(void)
{
  401038:	b580      	push	{r7, lr}
  40103a:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	wdt_disable(WDT);
  40103c:	481d      	ldr	r0, [pc, #116]	; (4010b4 <board_init+0x7c>)
  40103e:	4b1e      	ldr	r3, [pc, #120]	; (4010b8 <board_init+0x80>)
  401040:	4798      	blx	r3

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
  401042:	4b1e      	ldr	r3, [pc, #120]	; (4010bc <board_init+0x84>)
  401044:	4798      	blx	r3

	/* Initialize LED0, turned off */
	ioport_set_pin_level(LED_0_PIN, !LED_0_ACTIVE);
  401046:	2101      	movs	r1, #1
  401048:	2057      	movs	r0, #87	; 0x57
  40104a:	4b1d      	ldr	r3, [pc, #116]	; (4010c0 <board_init+0x88>)
  40104c:	4798      	blx	r3
	ioport_set_pin_dir(LED_0_PIN, IOPORT_DIR_OUTPUT);
  40104e:	2101      	movs	r1, #1
  401050:	2057      	movs	r0, #87	; 0x57
  401052:	4b1c      	ldr	r3, [pc, #112]	; (4010c4 <board_init+0x8c>)
  401054:	4798      	blx	r3

	/* Initialize SW0 */
	ioport_set_pin_dir(BUTTON_0_PIN, IOPORT_DIR_INPUT);
  401056:	2100      	movs	r1, #0
  401058:	2002      	movs	r0, #2
  40105a:	4b1a      	ldr	r3, [pc, #104]	; (4010c4 <board_init+0x8c>)
  40105c:	4798      	blx	r3
	ioport_set_pin_mode(BUTTON_0_PIN, (BUTTON_0_ACTIVE ?
  40105e:	2108      	movs	r1, #8
  401060:	2002      	movs	r0, #2
  401062:	4b19      	ldr	r3, [pc, #100]	; (4010c8 <board_init+0x90>)
  401064:	4798      	blx	r3
				IOPORT_MODE_PULLDOWN : IOPORT_MODE_PULLUP));

	/* Initialize EXT3 LED0, LED1 & LED2, turned off */
	ioport_set_pin_level(IO1_LED1_PIN, !IO1_LED1_ACTIVE);
  401066:	2101      	movs	r1, #1
  401068:	2054      	movs	r0, #84	; 0x54
  40106a:	4b15      	ldr	r3, [pc, #84]	; (4010c0 <board_init+0x88>)
  40106c:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED1_PIN, IOPORT_DIR_OUTPUT);
  40106e:	2101      	movs	r1, #1
  401070:	2054      	movs	r0, #84	; 0x54
  401072:	4b14      	ldr	r3, [pc, #80]	; (4010c4 <board_init+0x8c>)
  401074:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED2_PIN, !IO1_LED2_ACTIVE);
  401076:	2101      	movs	r1, #1
  401078:	2010      	movs	r0, #16
  40107a:	4b11      	ldr	r3, [pc, #68]	; (4010c0 <board_init+0x88>)
  40107c:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED2_PIN, IOPORT_DIR_OUTPUT);
  40107e:	2101      	movs	r1, #1
  401080:	2010      	movs	r0, #16
  401082:	4b10      	ldr	r3, [pc, #64]	; (4010c4 <board_init+0x8c>)
  401084:	4798      	blx	r3
	ioport_set_pin_level(IO1_LED3_PIN, !IO1_LED3_ACTIVE);
  401086:	2101      	movs	r1, #1
  401088:	2056      	movs	r0, #86	; 0x56
  40108a:	4b0d      	ldr	r3, [pc, #52]	; (4010c0 <board_init+0x88>)
  40108c:	4798      	blx	r3
	ioport_set_pin_dir(IO1_LED3_PIN, IOPORT_DIR_OUTPUT);
  40108e:	2101      	movs	r1, #1
  401090:	2056      	movs	r0, #86	; 0x56
  401092:	4b0c      	ldr	r3, [pc, #48]	; (4010c4 <board_init+0x8c>)
  401094:	4798      	blx	r3
	/* Configure UART pins */
	gpio_configure_group(PINS_UART1_PIO, PINS_UART1, PINS_UART1_FLAGS);
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
  401096:	490d      	ldr	r1, [pc, #52]	; (4010cc <board_init+0x94>)
  401098:	2003      	movs	r0, #3
  40109a:	4b0d      	ldr	r3, [pc, #52]	; (4010d0 <board_init+0x98>)
  40109c:	4798      	blx	r3
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
  40109e:	490b      	ldr	r1, [pc, #44]	; (4010cc <board_init+0x94>)
  4010a0:	2004      	movs	r0, #4
  4010a2:	4b0b      	ldr	r3, [pc, #44]	; (4010d0 <board_init+0x98>)
  4010a4:	4798      	blx	r3

  if ( BUTTON_0_ACTIVE ) {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLDOWN);
	}
  else {
		ioport_set_pin_mode(BUTTON_0_PIN, IOPORT_MODE_PULLUP);
  4010a6:	2108      	movs	r1, #8
  4010a8:	2002      	movs	r0, #2
  4010aa:	4b07      	ldr	r3, [pc, #28]	; (4010c8 <board_init+0x90>)
  4010ac:	4798      	blx	r3

#endif



}
  4010ae:	bf00      	nop
  4010b0:	bd80      	pop	{r7, pc}
  4010b2:	bf00      	nop
  4010b4:	400e1450 	.word	0x400e1450
  4010b8:	00401f71 	.word	0x00401f71
  4010bc:	00400e09 	.word	0x00400e09
  4010c0:	00400fcd 	.word	0x00400fcd
  4010c4:	00400f45 	.word	0x00400f45
  4010c8:	00400e29 	.word	0x00400e29
  4010cc:	08000001 	.word	0x08000001
  4010d0:	00401341 	.word	0x00401341

004010d4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  4010d4:	b480      	push	{r7}
  4010d6:	b085      	sub	sp, #20
  4010d8:	af00      	add	r7, sp, #0
  4010da:	60f8      	str	r0, [r7, #12]
  4010dc:	60b9      	str	r1, [r7, #8]
  4010de:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  4010e0:	687b      	ldr	r3, [r7, #4]
  4010e2:	2b00      	cmp	r3, #0
  4010e4:	d003      	beq.n	4010ee <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  4010e6:	68fb      	ldr	r3, [r7, #12]
  4010e8:	68ba      	ldr	r2, [r7, #8]
  4010ea:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  4010ec:	e002      	b.n	4010f4 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  4010ee:	68fb      	ldr	r3, [r7, #12]
  4010f0:	68ba      	ldr	r2, [r7, #8]
  4010f2:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
  4010f4:	bf00      	nop
  4010f6:	3714      	adds	r7, #20
  4010f8:	46bd      	mov	sp, r7
  4010fa:	bc80      	pop	{r7}
  4010fc:	4770      	bx	lr
  4010fe:	bf00      	nop

00401100 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401100:	b480      	push	{r7}
  401102:	b087      	sub	sp, #28
  401104:	af00      	add	r7, sp, #0
  401106:	60f8      	str	r0, [r7, #12]
  401108:	60b9      	str	r1, [r7, #8]
  40110a:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  40110c:	68fb      	ldr	r3, [r7, #12]
  40110e:	687a      	ldr	r2, [r7, #4]
  401110:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401112:	68bb      	ldr	r3, [r7, #8]
  401114:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401118:	d04a      	beq.n	4011b0 <pio_set_peripheral+0xb0>
  40111a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40111e:	d808      	bhi.n	401132 <pio_set_peripheral+0x32>
  401120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401124:	d016      	beq.n	401154 <pio_set_peripheral+0x54>
  401126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  40112a:	d02c      	beq.n	401186 <pio_set_peripheral+0x86>
  40112c:	2b00      	cmp	r3, #0
  40112e:	d069      	beq.n	401204 <pio_set_peripheral+0x104>
  401130:	e064      	b.n	4011fc <pio_set_peripheral+0xfc>
  401132:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401136:	d065      	beq.n	401204 <pio_set_peripheral+0x104>
  401138:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  40113c:	d803      	bhi.n	401146 <pio_set_peripheral+0x46>
  40113e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401142:	d04a      	beq.n	4011da <pio_set_peripheral+0xda>
  401144:	e05a      	b.n	4011fc <pio_set_peripheral+0xfc>
  401146:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40114a:	d05b      	beq.n	401204 <pio_set_peripheral+0x104>
  40114c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401150:	d058      	beq.n	401204 <pio_set_peripheral+0x104>
  401152:	e053      	b.n	4011fc <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401154:	68fb      	ldr	r3, [r7, #12]
  401156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401158:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40115a:	68fb      	ldr	r3, [r7, #12]
  40115c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  40115e:	687b      	ldr	r3, [r7, #4]
  401160:	43d9      	mvns	r1, r3
  401162:	697b      	ldr	r3, [r7, #20]
  401164:	400b      	ands	r3, r1
  401166:	401a      	ands	r2, r3
  401168:	68fb      	ldr	r3, [r7, #12]
  40116a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40116c:	68fb      	ldr	r3, [r7, #12]
  40116e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401170:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401172:	68fb      	ldr	r3, [r7, #12]
  401174:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401176:	687b      	ldr	r3, [r7, #4]
  401178:	43d9      	mvns	r1, r3
  40117a:	697b      	ldr	r3, [r7, #20]
  40117c:	400b      	ands	r3, r1
  40117e:	401a      	ands	r2, r3
  401180:	68fb      	ldr	r3, [r7, #12]
  401182:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401184:	e03a      	b.n	4011fc <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401186:	68fb      	ldr	r3, [r7, #12]
  401188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  40118a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40118c:	687a      	ldr	r2, [r7, #4]
  40118e:	697b      	ldr	r3, [r7, #20]
  401190:	431a      	orrs	r2, r3
  401192:	68fb      	ldr	r3, [r7, #12]
  401194:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401196:	68fb      	ldr	r3, [r7, #12]
  401198:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  40119a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40119c:	68fb      	ldr	r3, [r7, #12]
  40119e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4011a0:	687b      	ldr	r3, [r7, #4]
  4011a2:	43d9      	mvns	r1, r3
  4011a4:	697b      	ldr	r3, [r7, #20]
  4011a6:	400b      	ands	r3, r1
  4011a8:	401a      	ands	r2, r3
  4011aa:	68fb      	ldr	r3, [r7, #12]
  4011ac:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4011ae:	e025      	b.n	4011fc <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4011b0:	68fb      	ldr	r3, [r7, #12]
  4011b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4011b4:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4011b6:	68fb      	ldr	r3, [r7, #12]
  4011b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  4011ba:	687b      	ldr	r3, [r7, #4]
  4011bc:	43d9      	mvns	r1, r3
  4011be:	697b      	ldr	r3, [r7, #20]
  4011c0:	400b      	ands	r3, r1
  4011c2:	401a      	ands	r2, r3
  4011c4:	68fb      	ldr	r3, [r7, #12]
  4011c6:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4011c8:	68fb      	ldr	r3, [r7, #12]
  4011ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4011cc:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4011ce:	687a      	ldr	r2, [r7, #4]
  4011d0:	697b      	ldr	r3, [r7, #20]
  4011d2:	431a      	orrs	r2, r3
  4011d4:	68fb      	ldr	r3, [r7, #12]
  4011d6:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4011d8:	e010      	b.n	4011fc <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4011da:	68fb      	ldr	r3, [r7, #12]
  4011dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  4011de:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4011e0:	687a      	ldr	r2, [r7, #4]
  4011e2:	697b      	ldr	r3, [r7, #20]
  4011e4:	431a      	orrs	r2, r3
  4011e6:	68fb      	ldr	r3, [r7, #12]
  4011e8:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4011ea:	68fb      	ldr	r3, [r7, #12]
  4011ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  4011ee:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4011f0:	687a      	ldr	r2, [r7, #4]
  4011f2:	697b      	ldr	r3, [r7, #20]
  4011f4:	431a      	orrs	r2, r3
  4011f6:	68fb      	ldr	r3, [r7, #12]
  4011f8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  4011fa:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4011fc:	68fb      	ldr	r3, [r7, #12]
  4011fe:	687a      	ldr	r2, [r7, #4]
  401200:	605a      	str	r2, [r3, #4]
  401202:	e000      	b.n	401206 <pio_set_peripheral+0x106>
		/* Other types are invalid in this function */
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
  401204:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
  401206:	371c      	adds	r7, #28
  401208:	46bd      	mov	sp, r7
  40120a:	bc80      	pop	{r7}
  40120c:	4770      	bx	lr
  40120e:	bf00      	nop

00401210 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401210:	b580      	push	{r7, lr}
  401212:	b084      	sub	sp, #16
  401214:	af00      	add	r7, sp, #0
  401216:	60f8      	str	r0, [r7, #12]
  401218:	60b9      	str	r1, [r7, #8]
  40121a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  40121c:	68b9      	ldr	r1, [r7, #8]
  40121e:	68f8      	ldr	r0, [r7, #12]
  401220:	4b19      	ldr	r3, [pc, #100]	; (401288 <pio_set_input+0x78>)
  401222:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401224:	687b      	ldr	r3, [r7, #4]
  401226:	f003 0301 	and.w	r3, r3, #1
  40122a:	461a      	mov	r2, r3
  40122c:	68b9      	ldr	r1, [r7, #8]
  40122e:	68f8      	ldr	r0, [r7, #12]
  401230:	4b16      	ldr	r3, [pc, #88]	; (40128c <pio_set_input+0x7c>)
  401232:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401234:	687b      	ldr	r3, [r7, #4]
  401236:	f003 030a 	and.w	r3, r3, #10
  40123a:	2b00      	cmp	r3, #0
  40123c:	d003      	beq.n	401246 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  40123e:	68fb      	ldr	r3, [r7, #12]
  401240:	68ba      	ldr	r2, [r7, #8]
  401242:	621a      	str	r2, [r3, #32]
  401244:	e002      	b.n	40124c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401246:	68fb      	ldr	r3, [r7, #12]
  401248:	68ba      	ldr	r2, [r7, #8]
  40124a:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  40124c:	687b      	ldr	r3, [r7, #4]
  40124e:	f003 0302 	and.w	r3, r3, #2
  401252:	2b00      	cmp	r3, #0
  401254:	d004      	beq.n	401260 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401256:	68fb      	ldr	r3, [r7, #12]
  401258:	68ba      	ldr	r2, [r7, #8]
  40125a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  40125e:	e008      	b.n	401272 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401260:	687b      	ldr	r3, [r7, #4]
  401262:	f003 0308 	and.w	r3, r3, #8
  401266:	2b00      	cmp	r3, #0
  401268:	d003      	beq.n	401272 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  40126a:	68fb      	ldr	r3, [r7, #12]
  40126c:	68ba      	ldr	r2, [r7, #8]
  40126e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401272:	68fb      	ldr	r3, [r7, #12]
  401274:	68ba      	ldr	r2, [r7, #8]
  401276:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401278:	68fb      	ldr	r3, [r7, #12]
  40127a:	68ba      	ldr	r2, [r7, #8]
  40127c:	601a      	str	r2, [r3, #0]
}
  40127e:	bf00      	nop
  401280:	3710      	adds	r7, #16
  401282:	46bd      	mov	sp, r7
  401284:	bd80      	pop	{r7, pc}
  401286:	bf00      	nop
  401288:	004012f5 	.word	0x004012f5
  40128c:	004010d5 	.word	0x004010d5

00401290 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401290:	b580      	push	{r7, lr}
  401292:	b084      	sub	sp, #16
  401294:	af00      	add	r7, sp, #0
  401296:	60f8      	str	r0, [r7, #12]
  401298:	60b9      	str	r1, [r7, #8]
  40129a:	607a      	str	r2, [r7, #4]
  40129c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  40129e:	68b9      	ldr	r1, [r7, #8]
  4012a0:	68f8      	ldr	r0, [r7, #12]
  4012a2:	4b12      	ldr	r3, [pc, #72]	; (4012ec <pio_set_output+0x5c>)
  4012a4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  4012a6:	69ba      	ldr	r2, [r7, #24]
  4012a8:	68b9      	ldr	r1, [r7, #8]
  4012aa:	68f8      	ldr	r0, [r7, #12]
  4012ac:	4b10      	ldr	r3, [pc, #64]	; (4012f0 <pio_set_output+0x60>)
  4012ae:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  4012b0:	683b      	ldr	r3, [r7, #0]
  4012b2:	2b00      	cmp	r3, #0
  4012b4:	d003      	beq.n	4012be <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  4012b6:	68fb      	ldr	r3, [r7, #12]
  4012b8:	68ba      	ldr	r2, [r7, #8]
  4012ba:	651a      	str	r2, [r3, #80]	; 0x50
  4012bc:	e002      	b.n	4012c4 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  4012be:	68fb      	ldr	r3, [r7, #12]
  4012c0:	68ba      	ldr	r2, [r7, #8]
  4012c2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  4012c4:	687b      	ldr	r3, [r7, #4]
  4012c6:	2b00      	cmp	r3, #0
  4012c8:	d003      	beq.n	4012d2 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  4012ca:	68fb      	ldr	r3, [r7, #12]
  4012cc:	68ba      	ldr	r2, [r7, #8]
  4012ce:	631a      	str	r2, [r3, #48]	; 0x30
  4012d0:	e002      	b.n	4012d8 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  4012d2:	68fb      	ldr	r3, [r7, #12]
  4012d4:	68ba      	ldr	r2, [r7, #8]
  4012d6:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  4012d8:	68fb      	ldr	r3, [r7, #12]
  4012da:	68ba      	ldr	r2, [r7, #8]
  4012dc:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  4012de:	68fb      	ldr	r3, [r7, #12]
  4012e0:	68ba      	ldr	r2, [r7, #8]
  4012e2:	601a      	str	r2, [r3, #0]
}
  4012e4:	bf00      	nop
  4012e6:	3710      	adds	r7, #16
  4012e8:	46bd      	mov	sp, r7
  4012ea:	bd80      	pop	{r7, pc}
  4012ec:	004012f5 	.word	0x004012f5
  4012f0:	004010d5 	.word	0x004010d5

004012f4 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  4012f4:	b480      	push	{r7}
  4012f6:	b083      	sub	sp, #12
  4012f8:	af00      	add	r7, sp, #0
  4012fa:	6078      	str	r0, [r7, #4]
  4012fc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  4012fe:	687b      	ldr	r3, [r7, #4]
  401300:	683a      	ldr	r2, [r7, #0]
  401302:	645a      	str	r2, [r3, #68]	; 0x44
}
  401304:	bf00      	nop
  401306:	370c      	adds	r7, #12
  401308:	46bd      	mov	sp, r7
  40130a:	bc80      	pop	{r7}
  40130c:	4770      	bx	lr
  40130e:	bf00      	nop

00401310 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401310:	b480      	push	{r7}
  401312:	b083      	sub	sp, #12
  401314:	af00      	add	r7, sp, #0
  401316:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401318:	687b      	ldr	r3, [r7, #4]
  40131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  40131c:	4618      	mov	r0, r3
  40131e:	370c      	adds	r7, #12
  401320:	46bd      	mov	sp, r7
  401322:	bc80      	pop	{r7}
  401324:	4770      	bx	lr
  401326:	bf00      	nop

00401328 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401328:	b480      	push	{r7}
  40132a:	b083      	sub	sp, #12
  40132c:	af00      	add	r7, sp, #0
  40132e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401330:	687b      	ldr	r3, [r7, #4]
  401332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401334:	4618      	mov	r0, r3
  401336:	370c      	adds	r7, #12
  401338:	46bd      	mov	sp, r7
  40133a:	bc80      	pop	{r7}
  40133c:	4770      	bx	lr
  40133e:	bf00      	nop

00401340 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
  401340:	b590      	push	{r4, r7, lr}
  401342:	b087      	sub	sp, #28
  401344:	af02      	add	r7, sp, #8
  401346:	6078      	str	r0, [r7, #4]
  401348:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
  40134a:	6878      	ldr	r0, [r7, #4]
  40134c:	4b63      	ldr	r3, [pc, #396]	; (4014dc <pio_configure_pin+0x19c>)
  40134e:	4798      	blx	r3
  401350:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
  401352:	683b      	ldr	r3, [r7, #0]
  401354:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
  401358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40135c:	d067      	beq.n	40142e <pio_configure_pin+0xee>
  40135e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401362:	d809      	bhi.n	401378 <pio_configure_pin+0x38>
  401364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401368:	d02b      	beq.n	4013c2 <pio_configure_pin+0x82>
  40136a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  40136e:	d043      	beq.n	4013f8 <pio_configure_pin+0xb8>
  401370:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401374:	d00a      	beq.n	40138c <pio_configure_pin+0x4c>
  401376:	e0a9      	b.n	4014cc <pio_configure_pin+0x18c>
  401378:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  40137c:	d07e      	beq.n	40147c <pio_configure_pin+0x13c>
  40137e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401382:	d07b      	beq.n	40147c <pio_configure_pin+0x13c>
  401384:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401388:	d06c      	beq.n	401464 <pio_configure_pin+0x124>
  40138a:	e09f      	b.n	4014cc <pio_configure_pin+0x18c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40138c:	687b      	ldr	r3, [r7, #4]
  40138e:	f003 031f 	and.w	r3, r3, #31
  401392:	2201      	movs	r2, #1
  401394:	fa02 f303 	lsl.w	r3, r2, r3
  401398:	461a      	mov	r2, r3
  40139a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40139e:	68f8      	ldr	r0, [r7, #12]
  4013a0:	4b4f      	ldr	r3, [pc, #316]	; (4014e0 <pio_configure_pin+0x1a0>)
  4013a2:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4013a4:	687b      	ldr	r3, [r7, #4]
  4013a6:	f003 031f 	and.w	r3, r3, #31
  4013aa:	2201      	movs	r2, #1
  4013ac:	fa02 f303 	lsl.w	r3, r2, r3
  4013b0:	4619      	mov	r1, r3
  4013b2:	683b      	ldr	r3, [r7, #0]
  4013b4:	f003 0301 	and.w	r3, r3, #1
  4013b8:	461a      	mov	r2, r3
  4013ba:	68f8      	ldr	r0, [r7, #12]
  4013bc:	4b49      	ldr	r3, [pc, #292]	; (4014e4 <pio_configure_pin+0x1a4>)
  4013be:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4013c0:	e086      	b.n	4014d0 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  4013c2:	687b      	ldr	r3, [r7, #4]
  4013c4:	f003 031f 	and.w	r3, r3, #31
  4013c8:	2201      	movs	r2, #1
  4013ca:	fa02 f303 	lsl.w	r3, r2, r3
  4013ce:	461a      	mov	r2, r3
  4013d0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4013d4:	68f8      	ldr	r0, [r7, #12]
  4013d6:	4b42      	ldr	r3, [pc, #264]	; (4014e0 <pio_configure_pin+0x1a0>)
  4013d8:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  4013da:	687b      	ldr	r3, [r7, #4]
  4013dc:	f003 031f 	and.w	r3, r3, #31
  4013e0:	2201      	movs	r2, #1
  4013e2:	fa02 f303 	lsl.w	r3, r2, r3
  4013e6:	4619      	mov	r1, r3
  4013e8:	683b      	ldr	r3, [r7, #0]
  4013ea:	f003 0301 	and.w	r3, r3, #1
  4013ee:	461a      	mov	r2, r3
  4013f0:	68f8      	ldr	r0, [r7, #12]
  4013f2:	4b3c      	ldr	r3, [pc, #240]	; (4014e4 <pio_configure_pin+0x1a4>)
  4013f4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  4013f6:	e06b      	b.n	4014d0 <pio_configure_pin+0x190>
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_TYPE_PIO_PERIPH_C:
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4013f8:	687b      	ldr	r3, [r7, #4]
  4013fa:	f003 031f 	and.w	r3, r3, #31
  4013fe:	2201      	movs	r2, #1
  401400:	fa02 f303 	lsl.w	r3, r2, r3
  401404:	461a      	mov	r2, r3
  401406:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  40140a:	68f8      	ldr	r0, [r7, #12]
  40140c:	4b34      	ldr	r3, [pc, #208]	; (4014e0 <pio_configure_pin+0x1a0>)
  40140e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401410:	687b      	ldr	r3, [r7, #4]
  401412:	f003 031f 	and.w	r3, r3, #31
  401416:	2201      	movs	r2, #1
  401418:	fa02 f303 	lsl.w	r3, r2, r3
  40141c:	4619      	mov	r1, r3
  40141e:	683b      	ldr	r3, [r7, #0]
  401420:	f003 0301 	and.w	r3, r3, #1
  401424:	461a      	mov	r2, r3
  401426:	68f8      	ldr	r0, [r7, #12]
  401428:	4b2e      	ldr	r3, [pc, #184]	; (4014e4 <pio_configure_pin+0x1a4>)
  40142a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  40142c:	e050      	b.n	4014d0 <pio_configure_pin+0x190>
	case PIO_TYPE_PIO_PERIPH_D:
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  40142e:	687b      	ldr	r3, [r7, #4]
  401430:	f003 031f 	and.w	r3, r3, #31
  401434:	2201      	movs	r2, #1
  401436:	fa02 f303 	lsl.w	r3, r2, r3
  40143a:	461a      	mov	r2, r3
  40143c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401440:	68f8      	ldr	r0, [r7, #12]
  401442:	4b27      	ldr	r3, [pc, #156]	; (4014e0 <pio_configure_pin+0x1a0>)
  401444:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
  401446:	687b      	ldr	r3, [r7, #4]
  401448:	f003 031f 	and.w	r3, r3, #31
  40144c:	2201      	movs	r2, #1
  40144e:	fa02 f303 	lsl.w	r3, r2, r3
  401452:	4619      	mov	r1, r3
  401454:	683b      	ldr	r3, [r7, #0]
  401456:	f003 0301 	and.w	r3, r3, #1
  40145a:	461a      	mov	r2, r3
  40145c:	68f8      	ldr	r0, [r7, #12]
  40145e:	4b21      	ldr	r3, [pc, #132]	; (4014e4 <pio_configure_pin+0x1a4>)
  401460:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
  401462:	e035      	b.n	4014d0 <pio_configure_pin+0x190>
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401464:	687b      	ldr	r3, [r7, #4]
  401466:	f003 031f 	and.w	r3, r3, #31
  40146a:	2201      	movs	r2, #1
  40146c:	fa02 f303 	lsl.w	r3, r2, r3
  401470:	683a      	ldr	r2, [r7, #0]
  401472:	4619      	mov	r1, r3
  401474:	68f8      	ldr	r0, [r7, #12]
  401476:	4b1c      	ldr	r3, [pc, #112]	; (4014e8 <pio_configure_pin+0x1a8>)
  401478:	4798      	blx	r3
		break;
  40147a:	e029      	b.n	4014d0 <pio_configure_pin+0x190>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  40147c:	687b      	ldr	r3, [r7, #4]
  40147e:	f003 031f 	and.w	r3, r3, #31
  401482:	2201      	movs	r2, #1
  401484:	fa02 f303 	lsl.w	r3, r2, r3
  401488:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40148a:	683b      	ldr	r3, [r7, #0]
  40148c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  401490:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401494:	bf0c      	ite	eq
  401496:	2301      	moveq	r3, #1
  401498:	2300      	movne	r3, #0
  40149a:	b2db      	uxtb	r3, r3
  40149c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
  40149e:	683b      	ldr	r3, [r7, #0]
  4014a0:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4014a4:	2b00      	cmp	r3, #0
  4014a6:	bf14      	ite	ne
  4014a8:	2301      	movne	r3, #1
  4014aa:	2300      	moveq	r3, #0
  4014ac:	b2db      	uxtb	r3, r3
  4014ae:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
  4014b0:	683b      	ldr	r3, [r7, #0]
  4014b2:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4014b6:	2b00      	cmp	r3, #0
  4014b8:	bf14      	ite	ne
  4014ba:	2301      	movne	r3, #1
  4014bc:	2300      	moveq	r3, #0
  4014be:	b2db      	uxtb	r3, r3
  4014c0:	9300      	str	r3, [sp, #0]
  4014c2:	4603      	mov	r3, r0
  4014c4:	68f8      	ldr	r0, [r7, #12]
  4014c6:	4c09      	ldr	r4, [pc, #36]	; (4014ec <pio_configure_pin+0x1ac>)
  4014c8:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
  4014ca:	e001      	b.n	4014d0 <pio_configure_pin+0x190>

	default:
		return 0;
  4014cc:	2300      	movs	r3, #0
  4014ce:	e000      	b.n	4014d2 <pio_configure_pin+0x192>
	}

	return 1;
  4014d0:	2301      	movs	r3, #1
}
  4014d2:	4618      	mov	r0, r3
  4014d4:	3714      	adds	r7, #20
  4014d6:	46bd      	mov	sp, r7
  4014d8:	bd90      	pop	{r4, r7, pc}
  4014da:	bf00      	nop
  4014dc:	004014f1 	.word	0x004014f1
  4014e0:	00401101 	.word	0x00401101
  4014e4:	004010d5 	.word	0x004010d5
  4014e8:	00401211 	.word	0x00401211
  4014ec:	00401291 	.word	0x00401291

004014f0 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
  4014f0:	b480      	push	{r7}
  4014f2:	b085      	sub	sp, #20
  4014f4:	af00      	add	r7, sp, #0
  4014f6:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4014f8:	687b      	ldr	r3, [r7, #4]
  4014fa:	095b      	lsrs	r3, r3, #5
  4014fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  401500:	f203 7307 	addw	r3, r3, #1799	; 0x707
  401504:	025b      	lsls	r3, r3, #9
  401506:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
  401508:	68fb      	ldr	r3, [r7, #12]
}
  40150a:	4618      	mov	r0, r3
  40150c:	3714      	adds	r7, #20
  40150e:	46bd      	mov	sp, r7
  401510:	bc80      	pop	{r7}
  401512:	4770      	bx	lr

00401514 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401514:	b580      	push	{r7, lr}
  401516:	b084      	sub	sp, #16
  401518:	af00      	add	r7, sp, #0
  40151a:	6078      	str	r0, [r7, #4]
  40151c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40151e:	6878      	ldr	r0, [r7, #4]
  401520:	4b2c      	ldr	r3, [pc, #176]	; (4015d4 <pio_handler_process+0xc0>)
  401522:	4798      	blx	r3
  401524:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  401526:	6878      	ldr	r0, [r7, #4]
  401528:	4b2b      	ldr	r3, [pc, #172]	; (4015d8 <pio_handler_process+0xc4>)
  40152a:	4798      	blx	r3
  40152c:	4602      	mov	r2, r0
  40152e:	68fb      	ldr	r3, [r7, #12]
  401530:	4013      	ands	r3, r2
  401532:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401534:	68fb      	ldr	r3, [r7, #12]
  401536:	2b00      	cmp	r3, #0
  401538:	d03c      	beq.n	4015b4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  40153a:	2300      	movs	r3, #0
  40153c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  40153e:	e034      	b.n	4015aa <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401540:	4a26      	ldr	r2, [pc, #152]	; (4015dc <pio_handler_process+0xc8>)
  401542:	68bb      	ldr	r3, [r7, #8]
  401544:	011b      	lsls	r3, r3, #4
  401546:	4413      	add	r3, r2
  401548:	681a      	ldr	r2, [r3, #0]
  40154a:	683b      	ldr	r3, [r7, #0]
  40154c:	429a      	cmp	r2, r3
  40154e:	d126      	bne.n	40159e <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401550:	4a22      	ldr	r2, [pc, #136]	; (4015dc <pio_handler_process+0xc8>)
  401552:	68bb      	ldr	r3, [r7, #8]
  401554:	011b      	lsls	r3, r3, #4
  401556:	4413      	add	r3, r2
  401558:	3304      	adds	r3, #4
  40155a:	681a      	ldr	r2, [r3, #0]
  40155c:	68fb      	ldr	r3, [r7, #12]
  40155e:	4013      	ands	r3, r2
  401560:	2b00      	cmp	r3, #0
  401562:	d01c      	beq.n	40159e <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401564:	4a1d      	ldr	r2, [pc, #116]	; (4015dc <pio_handler_process+0xc8>)
  401566:	68bb      	ldr	r3, [r7, #8]
  401568:	011b      	lsls	r3, r3, #4
  40156a:	4413      	add	r3, r2
  40156c:	330c      	adds	r3, #12
  40156e:	681b      	ldr	r3, [r3, #0]
  401570:	491a      	ldr	r1, [pc, #104]	; (4015dc <pio_handler_process+0xc8>)
  401572:	68ba      	ldr	r2, [r7, #8]
  401574:	0112      	lsls	r2, r2, #4
  401576:	440a      	add	r2, r1
  401578:	6810      	ldr	r0, [r2, #0]
  40157a:	4918      	ldr	r1, [pc, #96]	; (4015dc <pio_handler_process+0xc8>)
  40157c:	68ba      	ldr	r2, [r7, #8]
  40157e:	0112      	lsls	r2, r2, #4
  401580:	440a      	add	r2, r1
  401582:	3204      	adds	r2, #4
  401584:	6812      	ldr	r2, [r2, #0]
  401586:	4611      	mov	r1, r2
  401588:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  40158a:	4a14      	ldr	r2, [pc, #80]	; (4015dc <pio_handler_process+0xc8>)
  40158c:	68bb      	ldr	r3, [r7, #8]
  40158e:	011b      	lsls	r3, r3, #4
  401590:	4413      	add	r3, r2
  401592:	3304      	adds	r3, #4
  401594:	681b      	ldr	r3, [r3, #0]
  401596:	43db      	mvns	r3, r3
  401598:	68fa      	ldr	r2, [r7, #12]
  40159a:	4013      	ands	r3, r2
  40159c:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  40159e:	68bb      	ldr	r3, [r7, #8]
  4015a0:	3301      	adds	r3, #1
  4015a2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  4015a4:	68bb      	ldr	r3, [r7, #8]
  4015a6:	2b06      	cmp	r3, #6
  4015a8:	d803      	bhi.n	4015b2 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
  4015aa:	68fb      	ldr	r3, [r7, #12]
  4015ac:	2b00      	cmp	r3, #0
  4015ae:	d1c7      	bne.n	401540 <pio_handler_process+0x2c>
  4015b0:	e000      	b.n	4015b4 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
  4015b2:	bf00      	nop
		}
	}

	/* Check capture events */
#if (SAM3S || SAM4S || SAM4E)
	if (pio_capture_enable_flag) {
  4015b4:	4b0a      	ldr	r3, [pc, #40]	; (4015e0 <pio_handler_process+0xcc>)
  4015b6:	681b      	ldr	r3, [r3, #0]
  4015b8:	2b00      	cmp	r3, #0
  4015ba:	d007      	beq.n	4015cc <pio_handler_process+0xb8>
		if (pio_capture_handler) {
  4015bc:	4b09      	ldr	r3, [pc, #36]	; (4015e4 <pio_handler_process+0xd0>)
  4015be:	681b      	ldr	r3, [r3, #0]
  4015c0:	2b00      	cmp	r3, #0
  4015c2:	d003      	beq.n	4015cc <pio_handler_process+0xb8>
			pio_capture_handler(p_pio);
  4015c4:	4b07      	ldr	r3, [pc, #28]	; (4015e4 <pio_handler_process+0xd0>)
  4015c6:	681b      	ldr	r3, [r3, #0]
  4015c8:	6878      	ldr	r0, [r7, #4]
  4015ca:	4798      	blx	r3
		}
	}
#endif
}
  4015cc:	bf00      	nop
  4015ce:	3710      	adds	r7, #16
  4015d0:	46bd      	mov	sp, r7
  4015d2:	bd80      	pop	{r7, pc}
  4015d4:	00401311 	.word	0x00401311
  4015d8:	00401329 	.word	0x00401329
  4015dc:	20000864 	.word	0x20000864
  4015e0:	200008d8 	.word	0x200008d8
  4015e4:	200008d4 	.word	0x200008d4

004015e8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4015e8:	b580      	push	{r7, lr}
  4015ea:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  4015ec:	210b      	movs	r1, #11
  4015ee:	4802      	ldr	r0, [pc, #8]	; (4015f8 <PIOA_Handler+0x10>)
  4015f0:	4b02      	ldr	r3, [pc, #8]	; (4015fc <PIOA_Handler+0x14>)
  4015f2:	4798      	blx	r3
}
  4015f4:	bf00      	nop
  4015f6:	bd80      	pop	{r7, pc}
  4015f8:	400e0e00 	.word	0x400e0e00
  4015fc:	00401515 	.word	0x00401515

00401600 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401600:	b580      	push	{r7, lr}
  401602:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  401604:	210c      	movs	r1, #12
  401606:	4802      	ldr	r0, [pc, #8]	; (401610 <PIOB_Handler+0x10>)
  401608:	4b02      	ldr	r3, [pc, #8]	; (401614 <PIOB_Handler+0x14>)
  40160a:	4798      	blx	r3
}
  40160c:	bf00      	nop
  40160e:	bd80      	pop	{r7, pc}
  401610:	400e1000 	.word	0x400e1000
  401614:	00401515 	.word	0x00401515

00401618 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401618:	b580      	push	{r7, lr}
  40161a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  40161c:	210d      	movs	r1, #13
  40161e:	4802      	ldr	r0, [pc, #8]	; (401628 <PIOC_Handler+0x10>)
  401620:	4b02      	ldr	r3, [pc, #8]	; (40162c <PIOC_Handler+0x14>)
  401622:	4798      	blx	r3
}
  401624:	bf00      	nop
  401626:	bd80      	pop	{r7, pc}
  401628:	400e1200 	.word	0x400e1200
  40162c:	00401515 	.word	0x00401515

00401630 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  401630:	b480      	push	{r7}
  401632:	b085      	sub	sp, #20
  401634:	af00      	add	r7, sp, #0
  401636:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401638:	491c      	ldr	r1, [pc, #112]	; (4016ac <pmc_switch_mck_to_pllack+0x7c>)
  40163a:	4b1c      	ldr	r3, [pc, #112]	; (4016ac <pmc_switch_mck_to_pllack+0x7c>)
  40163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40163e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  401642:	687b      	ldr	r3, [r7, #4]
  401644:	4313      	orrs	r3, r2
  401646:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401648:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40164c:	60fb      	str	r3, [r7, #12]
  40164e:	e007      	b.n	401660 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401650:	68fb      	ldr	r3, [r7, #12]
  401652:	2b00      	cmp	r3, #0
  401654:	d101      	bne.n	40165a <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  401656:	2301      	movs	r3, #1
  401658:	e023      	b.n	4016a2 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40165a:	68fb      	ldr	r3, [r7, #12]
  40165c:	3b01      	subs	r3, #1
  40165e:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401660:	4b12      	ldr	r3, [pc, #72]	; (4016ac <pmc_switch_mck_to_pllack+0x7c>)
  401662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401664:	f003 0308 	and.w	r3, r3, #8
  401668:	2b00      	cmp	r3, #0
  40166a:	d0f1      	beq.n	401650 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40166c:	4a0f      	ldr	r2, [pc, #60]	; (4016ac <pmc_switch_mck_to_pllack+0x7c>)
  40166e:	4b0f      	ldr	r3, [pc, #60]	; (4016ac <pmc_switch_mck_to_pllack+0x7c>)
  401670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401672:	f023 0303 	bic.w	r3, r3, #3
  401676:	f043 0302 	orr.w	r3, r3, #2
  40167a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40167c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  401680:	60fb      	str	r3, [r7, #12]
  401682:	e007      	b.n	401694 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401684:	68fb      	ldr	r3, [r7, #12]
  401686:	2b00      	cmp	r3, #0
  401688:	d101      	bne.n	40168e <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  40168a:	2301      	movs	r3, #1
  40168c:	e009      	b.n	4016a2 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
  40168e:	68fb      	ldr	r3, [r7, #12]
  401690:	3b01      	subs	r3, #1
  401692:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401694:	4b05      	ldr	r3, [pc, #20]	; (4016ac <pmc_switch_mck_to_pllack+0x7c>)
  401696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401698:	f003 0308 	and.w	r3, r3, #8
  40169c:	2b00      	cmp	r3, #0
  40169e:	d0f1      	beq.n	401684 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
  4016a0:	2300      	movs	r3, #0
}
  4016a2:	4618      	mov	r0, r3
  4016a4:	3714      	adds	r7, #20
  4016a6:	46bd      	mov	sp, r7
  4016a8:	bc80      	pop	{r7}
  4016aa:	4770      	bx	lr
  4016ac:	400e0400 	.word	0x400e0400

004016b0 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  4016b0:	b480      	push	{r7}
  4016b2:	b083      	sub	sp, #12
  4016b4:	af00      	add	r7, sp, #0
  4016b6:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  4016b8:	687b      	ldr	r3, [r7, #4]
  4016ba:	2b01      	cmp	r3, #1
  4016bc:	d107      	bne.n	4016ce <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  4016be:	4a08      	ldr	r2, [pc, #32]	; (4016e0 <pmc_switch_sclk_to_32kxtal+0x30>)
  4016c0:	4b07      	ldr	r3, [pc, #28]	; (4016e0 <pmc_switch_sclk_to_32kxtal+0x30>)
  4016c2:	689b      	ldr	r3, [r3, #8]
  4016c4:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
  4016c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4016cc:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  4016ce:	4b04      	ldr	r3, [pc, #16]	; (4016e0 <pmc_switch_sclk_to_32kxtal+0x30>)
  4016d0:	4a04      	ldr	r2, [pc, #16]	; (4016e4 <pmc_switch_sclk_to_32kxtal+0x34>)
  4016d2:	601a      	str	r2, [r3, #0]
}
  4016d4:	bf00      	nop
  4016d6:	370c      	adds	r7, #12
  4016d8:	46bd      	mov	sp, r7
  4016da:	bc80      	pop	{r7}
  4016dc:	4770      	bx	lr
  4016de:	bf00      	nop
  4016e0:	400e1410 	.word	0x400e1410
  4016e4:	a5000008 	.word	0xa5000008

004016e8 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  4016e8:	b480      	push	{r7}
  4016ea:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  4016ec:	4b09      	ldr	r3, [pc, #36]	; (401714 <pmc_osc_is_ready_32kxtal+0x2c>)
  4016ee:	695b      	ldr	r3, [r3, #20]
  4016f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  4016f4:	2b00      	cmp	r3, #0
  4016f6:	d007      	beq.n	401708 <pmc_osc_is_ready_32kxtal+0x20>
  4016f8:	4b07      	ldr	r3, [pc, #28]	; (401718 <pmc_osc_is_ready_32kxtal+0x30>)
  4016fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4016fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  401700:	2b00      	cmp	r3, #0
  401702:	d001      	beq.n	401708 <pmc_osc_is_ready_32kxtal+0x20>
  401704:	2301      	movs	r3, #1
  401706:	e000      	b.n	40170a <pmc_osc_is_ready_32kxtal+0x22>
  401708:	2300      	movs	r3, #0
}
  40170a:	4618      	mov	r0, r3
  40170c:	46bd      	mov	sp, r7
  40170e:	bc80      	pop	{r7}
  401710:	4770      	bx	lr
  401712:	bf00      	nop
  401714:	400e1410 	.word	0x400e1410
  401718:	400e0400 	.word	0x400e0400

0040171c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40171c:	b480      	push	{r7}
  40171e:	b083      	sub	sp, #12
  401720:	af00      	add	r7, sp, #0
  401722:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  401724:	4a18      	ldr	r2, [pc, #96]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  401726:	4b18      	ldr	r3, [pc, #96]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  401728:	6a1b      	ldr	r3, [r3, #32]
  40172a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40172e:	f043 0308 	orr.w	r3, r3, #8
  401732:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  401734:	bf00      	nop
  401736:	4b14      	ldr	r3, [pc, #80]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  401738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40173e:	2b00      	cmp	r3, #0
  401740:	d0f9      	beq.n	401736 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401742:	4911      	ldr	r1, [pc, #68]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  401744:	4b10      	ldr	r3, [pc, #64]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  401746:	6a1b      	ldr	r3, [r3, #32]
  401748:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  40174c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  401750:	687a      	ldr	r2, [r7, #4]
  401752:	4313      	orrs	r3, r2
  401754:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  401758:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  40175a:	bf00      	nop
  40175c:	4b0a      	ldr	r3, [pc, #40]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  40175e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  401760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  401764:	2b00      	cmp	r3, #0
  401766:	d0f9      	beq.n	40175c <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401768:	4a07      	ldr	r2, [pc, #28]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  40176a:	4b07      	ldr	r3, [pc, #28]	; (401788 <pmc_switch_mainck_to_fastrc+0x6c>)
  40176c:	6a1b      	ldr	r3, [r3, #32]
  40176e:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
  401772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  401776:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40177a:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
  40177c:	bf00      	nop
  40177e:	370c      	adds	r7, #12
  401780:	46bd      	mov	sp, r7
  401782:	bc80      	pop	{r7}
  401784:	4770      	bx	lr
  401786:	bf00      	nop
  401788:	400e0400 	.word	0x400e0400

0040178c <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  40178c:	b480      	push	{r7}
  40178e:	b083      	sub	sp, #12
  401790:	af00      	add	r7, sp, #0
  401792:	6078      	str	r0, [r7, #4]
  401794:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401796:	687b      	ldr	r3, [r7, #4]
  401798:	2b00      	cmp	r3, #0
  40179a:	d008      	beq.n	4017ae <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40179c:	4916      	ldr	r1, [pc, #88]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  40179e:	4b16      	ldr	r3, [pc, #88]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  4017a0:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4017a2:	4a16      	ldr	r2, [pc, #88]	; (4017fc <pmc_switch_mainck_to_xtal+0x70>)
  4017a4:	401a      	ands	r2, r3
  4017a6:	4b16      	ldr	r3, [pc, #88]	; (401800 <pmc_switch_mainck_to_xtal+0x74>)
  4017a8:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4017aa:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  4017ac:	e01e      	b.n	4017ec <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4017ae:	4912      	ldr	r1, [pc, #72]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  4017b0:	4b11      	ldr	r3, [pc, #68]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  4017b2:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4017b4:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
  4017b8:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4017bc:	683a      	ldr	r2, [r7, #0]
  4017be:	0212      	lsls	r2, r2, #8
  4017c0:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4017c2:	4313      	orrs	r3, r2
  4017c4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4017c8:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4017cc:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4017ce:	bf00      	nop
  4017d0:	4b09      	ldr	r3, [pc, #36]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  4017d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4017d4:	f003 0301 	and.w	r3, r3, #1
  4017d8:	2b00      	cmp	r3, #0
  4017da:	d0f9      	beq.n	4017d0 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4017dc:	4a06      	ldr	r2, [pc, #24]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  4017de:	4b06      	ldr	r3, [pc, #24]	; (4017f8 <pmc_switch_mainck_to_xtal+0x6c>)
  4017e0:	6a1b      	ldr	r3, [r3, #32]
  4017e2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
  4017e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  4017ea:	6213      	str	r3, [r2, #32]
	}
}
  4017ec:	bf00      	nop
  4017ee:	370c      	adds	r7, #12
  4017f0:	46bd      	mov	sp, r7
  4017f2:	bc80      	pop	{r7}
  4017f4:	4770      	bx	lr
  4017f6:	bf00      	nop
  4017f8:	400e0400 	.word	0x400e0400
  4017fc:	fec8fffc 	.word	0xfec8fffc
  401800:	01370002 	.word	0x01370002

00401804 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  401804:	b480      	push	{r7}
  401806:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401808:	4b03      	ldr	r3, [pc, #12]	; (401818 <pmc_osc_is_ready_mainck+0x14>)
  40180a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40180c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  401810:	4618      	mov	r0, r3
  401812:	46bd      	mov	sp, r7
  401814:	bc80      	pop	{r7}
  401816:	4770      	bx	lr
  401818:	400e0400 	.word	0x400e0400

0040181c <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  40181c:	b480      	push	{r7}
  40181e:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401820:	4b03      	ldr	r3, [pc, #12]	; (401830 <pmc_disable_pllack+0x14>)
  401822:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401826:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  401828:	bf00      	nop
  40182a:	46bd      	mov	sp, r7
  40182c:	bc80      	pop	{r7}
  40182e:	4770      	bx	lr
  401830:	400e0400 	.word	0x400e0400

00401834 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  401834:	b480      	push	{r7}
  401836:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401838:	4b03      	ldr	r3, [pc, #12]	; (401848 <pmc_is_locked_pllack+0x14>)
  40183a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40183c:	f003 0302 	and.w	r3, r3, #2
}
  401840:	4618      	mov	r0, r3
  401842:	46bd      	mov	sp, r7
  401844:	bc80      	pop	{r7}
  401846:	4770      	bx	lr
  401848:	400e0400 	.word	0x400e0400

0040184c <pmc_disable_pllbck>:

/**
 * \brief Disable PLLB clock.
 */
void pmc_disable_pllbck(void)
{
  40184c:	b480      	push	{r7}
  40184e:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
  401850:	4b03      	ldr	r3, [pc, #12]	; (401860 <pmc_disable_pllbck+0x14>)
  401852:	2200      	movs	r2, #0
  401854:	62da      	str	r2, [r3, #44]	; 0x2c
}
  401856:	bf00      	nop
  401858:	46bd      	mov	sp, r7
  40185a:	bc80      	pop	{r7}
  40185c:	4770      	bx	lr
  40185e:	bf00      	nop
  401860:	400e0400 	.word	0x400e0400

00401864 <pmc_is_locked_pllbck>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllbck(void)
{
  401864:	b480      	push	{r7}
  401866:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKB);
  401868:	4b03      	ldr	r3, [pc, #12]	; (401878 <pmc_is_locked_pllbck+0x14>)
  40186a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40186c:	f003 0304 	and.w	r3, r3, #4
}
  401870:	4618      	mov	r0, r3
  401872:	46bd      	mov	sp, r7
  401874:	bc80      	pop	{r7}
  401876:	4770      	bx	lr
  401878:	400e0400 	.word	0x400e0400

0040187c <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  40187c:	b480      	push	{r7}
  40187e:	b083      	sub	sp, #12
  401880:	af00      	add	r7, sp, #0
  401882:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  401884:	687b      	ldr	r3, [r7, #4]
  401886:	2b22      	cmp	r3, #34	; 0x22
  401888:	d901      	bls.n	40188e <pmc_enable_periph_clk+0x12>
		return 1;
  40188a:	2301      	movs	r3, #1
  40188c:	e02f      	b.n	4018ee <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  40188e:	687b      	ldr	r3, [r7, #4]
  401890:	2b1f      	cmp	r3, #31
  401892:	d813      	bhi.n	4018bc <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  401894:	4b18      	ldr	r3, [pc, #96]	; (4018f8 <pmc_enable_periph_clk+0x7c>)
  401896:	699a      	ldr	r2, [r3, #24]
  401898:	2101      	movs	r1, #1
  40189a:	687b      	ldr	r3, [r7, #4]
  40189c:	fa01 f303 	lsl.w	r3, r1, r3
  4018a0:	401a      	ands	r2, r3
  4018a2:	2101      	movs	r1, #1
  4018a4:	687b      	ldr	r3, [r7, #4]
  4018a6:	fa01 f303 	lsl.w	r3, r1, r3
  4018aa:	429a      	cmp	r2, r3
  4018ac:	d01e      	beq.n	4018ec <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  4018ae:	4a12      	ldr	r2, [pc, #72]	; (4018f8 <pmc_enable_periph_clk+0x7c>)
  4018b0:	2101      	movs	r1, #1
  4018b2:	687b      	ldr	r3, [r7, #4]
  4018b4:	fa01 f303 	lsl.w	r3, r1, r3
  4018b8:	6113      	str	r3, [r2, #16]
  4018ba:	e017      	b.n	4018ec <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  4018bc:	687b      	ldr	r3, [r7, #4]
  4018be:	3b20      	subs	r3, #32
  4018c0:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4018c2:	4b0d      	ldr	r3, [pc, #52]	; (4018f8 <pmc_enable_periph_clk+0x7c>)
  4018c4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4018c8:	2101      	movs	r1, #1
  4018ca:	687b      	ldr	r3, [r7, #4]
  4018cc:	fa01 f303 	lsl.w	r3, r1, r3
  4018d0:	401a      	ands	r2, r3
  4018d2:	2101      	movs	r1, #1
  4018d4:	687b      	ldr	r3, [r7, #4]
  4018d6:	fa01 f303 	lsl.w	r3, r1, r3
  4018da:	429a      	cmp	r2, r3
  4018dc:	d006      	beq.n	4018ec <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  4018de:	4a06      	ldr	r2, [pc, #24]	; (4018f8 <pmc_enable_periph_clk+0x7c>)
  4018e0:	2101      	movs	r1, #1
  4018e2:	687b      	ldr	r3, [r7, #4]
  4018e4:	fa01 f303 	lsl.w	r3, r1, r3
  4018e8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  4018ec:	2300      	movs	r3, #0
}
  4018ee:	4618      	mov	r0, r3
  4018f0:	370c      	adds	r7, #12
  4018f2:	46bd      	mov	sp, r7
  4018f4:	bc80      	pop	{r7}
  4018f6:	4770      	bx	lr
  4018f8:	400e0400 	.word	0x400e0400

004018fc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4018fc:	b580      	push	{r7, lr}
  4018fe:	b082      	sub	sp, #8
  401900:	af00      	add	r7, sp, #0
  401902:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401904:	6878      	ldr	r0, [r7, #4]
  401906:	4b03      	ldr	r3, [pc, #12]	; (401914 <sysclk_enable_peripheral_clock+0x18>)
  401908:	4798      	blx	r3
}
  40190a:	bf00      	nop
  40190c:	3708      	adds	r7, #8
  40190e:	46bd      	mov	sp, r7
  401910:	bd80      	pop	{r7, pc}
  401912:	bf00      	nop
  401914:	0040187d 	.word	0x0040187d

00401918 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  401918:	b580      	push	{r7, lr}
  40191a:	b082      	sub	sp, #8
  40191c:	af00      	add	r7, sp, #0
  40191e:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
  401920:	2015      	movs	r0, #21
  401922:	4b03      	ldr	r3, [pc, #12]	; (401930 <spi_enable_clock+0x18>)
  401924:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  401926:	bf00      	nop
  401928:	3708      	adds	r7, #8
  40192a:	46bd      	mov	sp, r7
  40192c:	bd80      	pop	{r7, pc}
  40192e:	bf00      	nop
  401930:	004018fd 	.word	0x004018fd

00401934 <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  401934:	b480      	push	{r7}
  401936:	b083      	sub	sp, #12
  401938:	af00      	add	r7, sp, #0
  40193a:	6078      	str	r0, [r7, #4]
  40193c:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  40193e:	687b      	ldr	r3, [r7, #4]
  401940:	685b      	ldr	r3, [r3, #4]
  401942:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  401946:	687b      	ldr	r3, [r7, #4]
  401948:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40194a:	687b      	ldr	r3, [r7, #4]
  40194c:	685a      	ldr	r2, [r3, #4]
  40194e:	683b      	ldr	r3, [r7, #0]
  401950:	041b      	lsls	r3, r3, #16
  401952:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  401956:	431a      	orrs	r2, r3
  401958:	687b      	ldr	r3, [r7, #4]
  40195a:	605a      	str	r2, [r3, #4]
}
  40195c:	bf00      	nop
  40195e:	370c      	adds	r7, #12
  401960:	46bd      	mov	sp, r7
  401962:	bc80      	pop	{r7}
  401964:	4770      	bx	lr
  401966:	bf00      	nop

00401968 <spi_set_delay_between_chip_select>:
 *
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
  401968:	b480      	push	{r7}
  40196a:	b083      	sub	sp, #12
  40196c:	af00      	add	r7, sp, #0
  40196e:	6078      	str	r0, [r7, #4]
  401970:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401972:	687b      	ldr	r3, [r7, #4]
  401974:	685b      	ldr	r3, [r3, #4]
  401976:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
  40197a:	687b      	ldr	r3, [r7, #4]
  40197c:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  40197e:	687b      	ldr	r3, [r7, #4]
  401980:	685a      	ldr	r2, [r3, #4]
  401982:	683b      	ldr	r3, [r7, #0]
  401984:	061b      	lsls	r3, r3, #24
  401986:	431a      	orrs	r2, r3
  401988:	687b      	ldr	r3, [r7, #4]
  40198a:	605a      	str	r2, [r3, #4]
}
  40198c:	bf00      	nop
  40198e:	370c      	adds	r7, #12
  401990:	46bd      	mov	sp, r7
  401992:	bc80      	pop	{r7}
  401994:	4770      	bx	lr
  401996:	bf00      	nop

00401998 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  401998:	b480      	push	{r7}
  40199a:	b085      	sub	sp, #20
  40199c:	af00      	add	r7, sp, #0
  40199e:	60f8      	str	r0, [r7, #12]
  4019a0:	60b9      	str	r1, [r7, #8]
  4019a2:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  4019a4:	687b      	ldr	r3, [r7, #4]
  4019a6:	2b00      	cmp	r3, #0
  4019a8:	d00c      	beq.n	4019c4 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4019aa:	68fb      	ldr	r3, [r7, #12]
  4019ac:	68ba      	ldr	r2, [r7, #8]
  4019ae:	320c      	adds	r2, #12
  4019b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4019b4:	f043 0101 	orr.w	r1, r3, #1
  4019b8:	68fb      	ldr	r3, [r7, #12]
  4019ba:	68ba      	ldr	r2, [r7, #8]
  4019bc:	320c      	adds	r2, #12
  4019be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  4019c2:	e00b      	b.n	4019dc <spi_set_clock_polarity+0x44>
		uint32_t ul_polarity)
{
	if (ul_polarity) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4019c4:	68fb      	ldr	r3, [r7, #12]
  4019c6:	68ba      	ldr	r2, [r7, #8]
  4019c8:	320c      	adds	r2, #12
  4019ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4019ce:	f023 0101 	bic.w	r1, r3, #1
  4019d2:	68fb      	ldr	r3, [r7, #12]
  4019d4:	68ba      	ldr	r2, [r7, #8]
  4019d6:	320c      	adds	r2, #12
  4019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
  4019dc:	bf00      	nop
  4019de:	3714      	adds	r7, #20
  4019e0:	46bd      	mov	sp, r7
  4019e2:	bc80      	pop	{r7}
  4019e4:	4770      	bx	lr
  4019e6:	bf00      	nop

004019e8 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  4019e8:	b480      	push	{r7}
  4019ea:	b085      	sub	sp, #20
  4019ec:	af00      	add	r7, sp, #0
  4019ee:	60f8      	str	r0, [r7, #12]
  4019f0:	60b9      	str	r1, [r7, #8]
  4019f2:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  4019f4:	687b      	ldr	r3, [r7, #4]
  4019f6:	2b00      	cmp	r3, #0
  4019f8:	d00c      	beq.n	401a14 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4019fa:	68fb      	ldr	r3, [r7, #12]
  4019fc:	68ba      	ldr	r2, [r7, #8]
  4019fe:	320c      	adds	r2, #12
  401a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401a04:	f043 0102 	orr.w	r1, r3, #2
  401a08:	68fb      	ldr	r3, [r7, #12]
  401a0a:	68ba      	ldr	r2, [r7, #8]
  401a0c:	320c      	adds	r2, #12
  401a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  401a12:	e00b      	b.n	401a2c <spi_set_clock_phase+0x44>
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  401a14:	68fb      	ldr	r3, [r7, #12]
  401a16:	68ba      	ldr	r2, [r7, #8]
  401a18:	320c      	adds	r2, #12
  401a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401a1e:	f023 0102 	bic.w	r1, r3, #2
  401a22:	68fb      	ldr	r3, [r7, #12]
  401a24:	68ba      	ldr	r2, [r7, #8]
  401a26:	320c      	adds	r2, #12
  401a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
  401a2c:	bf00      	nop
  401a2e:	3714      	adds	r7, #20
  401a30:	46bd      	mov	sp, r7
  401a32:	bc80      	pop	{r7}
  401a34:	4770      	bx	lr
  401a36:	bf00      	nop

00401a38 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  401a38:	b480      	push	{r7}
  401a3a:	b085      	sub	sp, #20
  401a3c:	af00      	add	r7, sp, #0
  401a3e:	60f8      	str	r0, [r7, #12]
  401a40:	60b9      	str	r1, [r7, #8]
  401a42:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401a44:	687b      	ldr	r3, [r7, #4]
  401a46:	2b04      	cmp	r3, #4
  401a48:	d118      	bne.n	401a7c <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401a4a:	68fb      	ldr	r3, [r7, #12]
  401a4c:	68ba      	ldr	r2, [r7, #8]
  401a4e:	320c      	adds	r2, #12
  401a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401a54:	f023 0108 	bic.w	r1, r3, #8
  401a58:	68fb      	ldr	r3, [r7, #12]
  401a5a:	68ba      	ldr	r2, [r7, #8]
  401a5c:	320c      	adds	r2, #12
  401a5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401a62:	68fb      	ldr	r3, [r7, #12]
  401a64:	68ba      	ldr	r2, [r7, #8]
  401a66:	320c      	adds	r2, #12
  401a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401a6c:	f043 0104 	orr.w	r1, r3, #4
  401a70:	68fb      	ldr	r3, [r7, #12]
  401a72:	68ba      	ldr	r2, [r7, #8]
  401a74:	320c      	adds	r2, #12
  401a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  401a7a:	e02a      	b.n	401ad2 <spi_configure_cs_behavior+0x9a>
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  401a7c:	687b      	ldr	r3, [r7, #4]
  401a7e:	2b00      	cmp	r3, #0
  401a80:	d118      	bne.n	401ab4 <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401a82:	68fb      	ldr	r3, [r7, #12]
  401a84:	68ba      	ldr	r2, [r7, #8]
  401a86:	320c      	adds	r2, #12
  401a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401a8c:	f023 0108 	bic.w	r1, r3, #8
  401a90:	68fb      	ldr	r3, [r7, #12]
  401a92:	68ba      	ldr	r2, [r7, #8]
  401a94:	320c      	adds	r2, #12
  401a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  401a9a:	68fb      	ldr	r3, [r7, #12]
  401a9c:	68ba      	ldr	r2, [r7, #8]
  401a9e:	320c      	adds	r2, #12
  401aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401aa4:	f023 0104 	bic.w	r1, r3, #4
  401aa8:	68fb      	ldr	r3, [r7, #12]
  401aaa:	68ba      	ldr	r2, [r7, #8]
  401aac:	320c      	adds	r2, #12
  401aae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  401ab2:	e00e      	b.n	401ad2 <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  401ab4:	687b      	ldr	r3, [r7, #4]
  401ab6:	2b08      	cmp	r3, #8
  401ab8:	d10b      	bne.n	401ad2 <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401aba:	68fb      	ldr	r3, [r7, #12]
  401abc:	68ba      	ldr	r2, [r7, #8]
  401abe:	320c      	adds	r2, #12
  401ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401ac4:	f043 0108 	orr.w	r1, r3, #8
  401ac8:	68fb      	ldr	r3, [r7, #12]
  401aca:	68ba      	ldr	r2, [r7, #8]
  401acc:	320c      	adds	r2, #12
  401ace:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
  401ad2:	bf00      	nop
  401ad4:	3714      	adds	r7, #20
  401ad6:	46bd      	mov	sp, r7
  401ad8:	bc80      	pop	{r7}
  401ada:	4770      	bx	lr

00401adc <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401adc:	b480      	push	{r7}
  401ade:	b085      	sub	sp, #20
  401ae0:	af00      	add	r7, sp, #0
  401ae2:	60f8      	str	r0, [r7, #12]
  401ae4:	60b9      	str	r1, [r7, #8]
  401ae6:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401ae8:	68fb      	ldr	r3, [r7, #12]
  401aea:	68ba      	ldr	r2, [r7, #8]
  401aec:	320c      	adds	r2, #12
  401aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401af2:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  401af6:	68fb      	ldr	r3, [r7, #12]
  401af8:	68ba      	ldr	r2, [r7, #8]
  401afa:	320c      	adds	r2, #12
  401afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  401b00:	68fb      	ldr	r3, [r7, #12]
  401b02:	68ba      	ldr	r2, [r7, #8]
  401b04:	320c      	adds	r2, #12
  401b06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  401b0a:	687b      	ldr	r3, [r7, #4]
  401b0c:	ea42 0103 	orr.w	r1, r2, r3
  401b10:	68fb      	ldr	r3, [r7, #12]
  401b12:	68ba      	ldr	r2, [r7, #8]
  401b14:	320c      	adds	r2, #12
  401b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  401b1a:	bf00      	nop
  401b1c:	3714      	adds	r7, #20
  401b1e:	46bd      	mov	sp, r7
  401b20:	bc80      	pop	{r7}
  401b22:	4770      	bx	lr

00401b24 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  401b24:	b480      	push	{r7}
  401b26:	b085      	sub	sp, #20
  401b28:	af00      	add	r7, sp, #0
  401b2a:	6078      	str	r0, [r7, #4]
  401b2c:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  401b2e:	683a      	ldr	r2, [r7, #0]
  401b30:	687b      	ldr	r3, [r7, #4]
  401b32:	4413      	add	r3, r2
  401b34:	1e5a      	subs	r2, r3, #1
  401b36:	687b      	ldr	r3, [r7, #4]
  401b38:	fbb2 f3f3 	udiv	r3, r2, r3
  401b3c:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  401b3e:	68fb      	ldr	r3, [r7, #12]
  401b40:	2b00      	cmp	r3, #0
  401b42:	dd02      	ble.n	401b4a <spi_calc_baudrate_div+0x26>
  401b44:	68fb      	ldr	r3, [r7, #12]
  401b46:	2bff      	cmp	r3, #255	; 0xff
  401b48:	dd02      	ble.n	401b50 <spi_calc_baudrate_div+0x2c>
		return -1;
  401b4a:	f04f 33ff 	mov.w	r3, #4294967295
  401b4e:	e001      	b.n	401b54 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  401b50:	68fb      	ldr	r3, [r7, #12]
  401b52:	b21b      	sxth	r3, r3
}
  401b54:	4618      	mov	r0, r3
  401b56:	3714      	adds	r7, #20
  401b58:	46bd      	mov	sp, r7
  401b5a:	bc80      	pop	{r7}
  401b5c:	4770      	bx	lr
  401b5e:	bf00      	nop

00401b60 <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  401b60:	b480      	push	{r7}
  401b62:	b085      	sub	sp, #20
  401b64:	af00      	add	r7, sp, #0
  401b66:	60f8      	str	r0, [r7, #12]
  401b68:	60b9      	str	r1, [r7, #8]
  401b6a:	4613      	mov	r3, r2
  401b6c:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  401b6e:	79fb      	ldrb	r3, [r7, #7]
  401b70:	2b00      	cmp	r3, #0
  401b72:	d102      	bne.n	401b7a <spi_set_baudrate_div+0x1a>
        return -1;
  401b74:	f04f 33ff 	mov.w	r3, #4294967295
  401b78:	e01b      	b.n	401bb2 <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401b7a:	68fb      	ldr	r3, [r7, #12]
  401b7c:	68ba      	ldr	r2, [r7, #8]
  401b7e:	320c      	adds	r2, #12
  401b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401b84:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  401b88:	68fb      	ldr	r3, [r7, #12]
  401b8a:	68ba      	ldr	r2, [r7, #8]
  401b8c:	320c      	adds	r2, #12
  401b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401b92:	68fb      	ldr	r3, [r7, #12]
  401b94:	68ba      	ldr	r2, [r7, #8]
  401b96:	320c      	adds	r2, #12
  401b98:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  401b9c:	79fb      	ldrb	r3, [r7, #7]
  401b9e:	021b      	lsls	r3, r3, #8
  401ba0:	b29b      	uxth	r3, r3
  401ba2:	ea42 0103 	orr.w	r1, r2, r3
  401ba6:	68fb      	ldr	r3, [r7, #12]
  401ba8:	68ba      	ldr	r2, [r7, #8]
  401baa:	320c      	adds	r2, #12
  401bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  401bb0:	2300      	movs	r3, #0
}
  401bb2:	4618      	mov	r0, r3
  401bb4:	3714      	adds	r7, #20
  401bb6:	46bd      	mov	sp, r7
  401bb8:	bc80      	pop	{r7}
  401bba:	4770      	bx	lr

00401bbc <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401bbc:	b480      	push	{r7}
  401bbe:	b085      	sub	sp, #20
  401bc0:	af00      	add	r7, sp, #0
  401bc2:	60f8      	str	r0, [r7, #12]
  401bc4:	60b9      	str	r1, [r7, #8]
  401bc6:	4611      	mov	r1, r2
  401bc8:	461a      	mov	r2, r3
  401bca:	460b      	mov	r3, r1
  401bcc:	71fb      	strb	r3, [r7, #7]
  401bce:	4613      	mov	r3, r2
  401bd0:	71bb      	strb	r3, [r7, #6]
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401bd2:	68fb      	ldr	r3, [r7, #12]
  401bd4:	68ba      	ldr	r2, [r7, #8]
  401bd6:	320c      	adds	r2, #12
  401bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  401bdc:	b299      	uxth	r1, r3
  401bde:	68fb      	ldr	r3, [r7, #12]
  401be0:	68ba      	ldr	r2, [r7, #8]
  401be2:	320c      	adds	r2, #12
  401be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401be8:	68fb      	ldr	r3, [r7, #12]
  401bea:	68ba      	ldr	r2, [r7, #8]
  401bec:	320c      	adds	r2, #12
  401bee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  401bf2:	79fb      	ldrb	r3, [r7, #7]
  401bf4:	041b      	lsls	r3, r3, #16
  401bf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
			| SPI_CSR_DLYBCT(uc_dlybct);
  401bfa:	79b9      	ldrb	r1, [r7, #6]
  401bfc:	0609      	lsls	r1, r1, #24
  401bfe:	430b      	orrs	r3, r1
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401c00:	ea42 0103 	orr.w	r1, r2, r3
  401c04:	68fb      	ldr	r3, [r7, #12]
  401c06:	68ba      	ldr	r2, [r7, #8]
  401c08:	320c      	adds	r2, #12
  401c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401c0e:	bf00      	nop
  401c10:	3714      	adds	r7, #20
  401c12:	46bd      	mov	sp, r7
  401c14:	bc80      	pop	{r7}
  401c16:	4770      	bx	lr

00401c18 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
  401c18:	b480      	push	{r7}
  401c1a:	b083      	sub	sp, #12
  401c1c:	af00      	add	r7, sp, #0
  401c1e:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
  401c20:	687b      	ldr	r3, [r7, #4]
  401c22:	2208      	movs	r2, #8
  401c24:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
  401c26:	687b      	ldr	r3, [r7, #4]
  401c28:	2220      	movs	r2, #32
  401c2a:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
  401c2c:	687b      	ldr	r3, [r7, #4]
  401c2e:	2204      	movs	r2, #4
  401c30:	601a      	str	r2, [r3, #0]
}
  401c32:	bf00      	nop
  401c34:	370c      	adds	r7, #12
  401c36:	46bd      	mov	sp, r7
  401c38:	bc80      	pop	{r7}
  401c3a:	4770      	bx	lr

00401c3c <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
  401c3c:	b580      	push	{r7, lr}
  401c3e:	b084      	sub	sp, #16
  401c40:	af00      	add	r7, sp, #0
  401c42:	6078      	str	r0, [r7, #4]
  401c44:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
  401c46:	2300      	movs	r3, #0
  401c48:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
  401c4a:	687b      	ldr	r3, [r7, #4]
  401c4c:	f04f 32ff 	mov.w	r2, #4294967295
  401c50:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
  401c52:	687b      	ldr	r3, [r7, #4]
  401c54:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
  401c56:	6878      	ldr	r0, [r7, #4]
  401c58:	4b0e      	ldr	r3, [pc, #56]	; (401c94 <twi_master_init+0x58>)
  401c5a:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
  401c5c:	6878      	ldr	r0, [r7, #4]
  401c5e:	4b0e      	ldr	r3, [pc, #56]	; (401c98 <twi_master_init+0x5c>)
  401c60:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
  401c62:	683b      	ldr	r3, [r7, #0]
  401c64:	6859      	ldr	r1, [r3, #4]
  401c66:	683b      	ldr	r3, [r7, #0]
  401c68:	681b      	ldr	r3, [r3, #0]
  401c6a:	461a      	mov	r2, r3
  401c6c:	6878      	ldr	r0, [r7, #4]
  401c6e:	4b0b      	ldr	r3, [pc, #44]	; (401c9c <twi_master_init+0x60>)
  401c70:	4798      	blx	r3
  401c72:	4603      	mov	r3, r0
  401c74:	2b01      	cmp	r3, #1
  401c76:	d101      	bne.n	401c7c <twi_master_init+0x40>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
  401c78:	2301      	movs	r3, #1
  401c7a:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
  401c7c:	683b      	ldr	r3, [r7, #0]
  401c7e:	7a5b      	ldrb	r3, [r3, #9]
  401c80:	2b01      	cmp	r3, #1
  401c82:	d102      	bne.n	401c8a <twi_master_init+0x4e>
		p_twi->TWI_CR = TWI_CR_QUICK;
  401c84:	687b      	ldr	r3, [r7, #4]
  401c86:	2240      	movs	r2, #64	; 0x40
  401c88:	601a      	str	r2, [r3, #0]
	}

	return status;
  401c8a:	68fb      	ldr	r3, [r7, #12]
}
  401c8c:	4618      	mov	r0, r3
  401c8e:	3710      	adds	r7, #16
  401c90:	46bd      	mov	sp, r7
  401c92:	bd80      	pop	{r7, pc}
  401c94:	00401f55 	.word	0x00401f55
  401c98:	00401c19 	.word	0x00401c19
  401c9c:	00401ca1 	.word	0x00401ca1

00401ca0 <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
  401ca0:	b480      	push	{r7}
  401ca2:	b087      	sub	sp, #28
  401ca4:	af00      	add	r7, sp, #0
  401ca6:	60f8      	str	r0, [r7, #12]
  401ca8:	60b9      	str	r1, [r7, #8]
  401caa:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
  401cac:	2300      	movs	r3, #0
  401cae:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
  401cb0:	68bb      	ldr	r3, [r7, #8]
  401cb2:	4a16      	ldr	r2, [pc, #88]	; (401d0c <twi_set_speed+0x6c>)
  401cb4:	4293      	cmp	r3, r2
  401cb6:	d901      	bls.n	401cbc <twi_set_speed+0x1c>
		return FAIL;
  401cb8:	2301      	movs	r3, #1
  401cba:	e021      	b.n	401d00 <twi_set_speed+0x60>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
  401cbc:	68bb      	ldr	r3, [r7, #8]
  401cbe:	005b      	lsls	r3, r3, #1
  401cc0:	687a      	ldr	r2, [r7, #4]
  401cc2:	fbb2 f3f3 	udiv	r3, r2, r3
  401cc6:	3b04      	subs	r3, #4
  401cc8:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401cca:	e005      	b.n	401cd8 <twi_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
  401ccc:	697b      	ldr	r3, [r7, #20]
  401cce:	3301      	adds	r3, #1
  401cd0:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
  401cd2:	693b      	ldr	r3, [r7, #16]
  401cd4:	085b      	lsrs	r3, r3, #1
  401cd6:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
  401cd8:	693b      	ldr	r3, [r7, #16]
  401cda:	2bff      	cmp	r3, #255	; 0xff
  401cdc:	d902      	bls.n	401ce4 <twi_set_speed+0x44>
  401cde:	697b      	ldr	r3, [r7, #20]
  401ce0:	2b06      	cmp	r3, #6
  401ce2:	d9f3      	bls.n	401ccc <twi_set_speed+0x2c>
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401ce4:	693b      	ldr	r3, [r7, #16]
  401ce6:	b2da      	uxtb	r2, r3
  401ce8:	693b      	ldr	r3, [r7, #16]
  401cea:	021b      	lsls	r3, r3, #8
  401cec:	b29b      	uxth	r3, r3
  401cee:	431a      	orrs	r2, r3
			TWI_CWGR_CKDIV(ckdiv);
  401cf0:	697b      	ldr	r3, [r7, #20]
  401cf2:	041b      	lsls	r3, r3, #16
  401cf4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
  401cf8:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}

	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
  401cfa:	68fb      	ldr	r3, [r7, #12]
  401cfc:	611a      	str	r2, [r3, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
  401cfe:	2300      	movs	r3, #0
}
  401d00:	4618      	mov	r0, r3
  401d02:	371c      	adds	r7, #28
  401d04:	46bd      	mov	sp, r7
  401d06:	bc80      	pop	{r7}
  401d08:	4770      	bx	lr
  401d0a:	bf00      	nop
  401d0c:	00061a80 	.word	0x00061a80

00401d10 <twi_mk_addr>:
 * which byte is the MSB to start with.
 *
 * Please see the device datasheet for details on this.
 */
uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
  401d10:	b480      	push	{r7}
  401d12:	b085      	sub	sp, #20
  401d14:	af00      	add	r7, sp, #0
  401d16:	6078      	str	r0, [r7, #4]
  401d18:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
  401d1a:	683b      	ldr	r3, [r7, #0]
  401d1c:	2b00      	cmp	r3, #0
  401d1e:	d101      	bne.n	401d24 <twi_mk_addr+0x14>
		return 0;
  401d20:	2300      	movs	r3, #0
  401d22:	e01d      	b.n	401d60 <twi_mk_addr+0x50>

	val = addr[0];
  401d24:	687b      	ldr	r3, [r7, #4]
  401d26:	781b      	ldrb	r3, [r3, #0]
  401d28:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
  401d2a:	683b      	ldr	r3, [r7, #0]
  401d2c:	2b01      	cmp	r3, #1
  401d2e:	dd09      	ble.n	401d44 <twi_mk_addr+0x34>
		val <<= 8;
  401d30:	68fb      	ldr	r3, [r7, #12]
  401d32:	021b      	lsls	r3, r3, #8
  401d34:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
  401d36:	687b      	ldr	r3, [r7, #4]
  401d38:	3301      	adds	r3, #1
  401d3a:	781b      	ldrb	r3, [r3, #0]
  401d3c:	461a      	mov	r2, r3
  401d3e:	68fb      	ldr	r3, [r7, #12]
  401d40:	4313      	orrs	r3, r2
  401d42:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
  401d44:	683b      	ldr	r3, [r7, #0]
  401d46:	2b02      	cmp	r3, #2
  401d48:	dd09      	ble.n	401d5e <twi_mk_addr+0x4e>
		val <<= 8;
  401d4a:	68fb      	ldr	r3, [r7, #12]
  401d4c:	021b      	lsls	r3, r3, #8
  401d4e:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
  401d50:	687b      	ldr	r3, [r7, #4]
  401d52:	3302      	adds	r3, #2
  401d54:	781b      	ldrb	r3, [r3, #0]
  401d56:	461a      	mov	r2, r3
  401d58:	68fb      	ldr	r3, [r7, #12]
  401d5a:	4313      	orrs	r3, r2
  401d5c:	60fb      	str	r3, [r7, #12]
	}
	return val;
  401d5e:	68fb      	ldr	r3, [r7, #12]
}
  401d60:	4618      	mov	r0, r3
  401d62:	3714      	adds	r7, #20
  401d64:	46bd      	mov	sp, r7
  401d66:	bc80      	pop	{r7}
  401d68:	4770      	bx	lr
  401d6a:	bf00      	nop

00401d6c <twi_master_read>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were read, error code otherwise.
 */
uint32_t twi_master_read(Twi *p_twi, twi_packet_t *p_packet)
{
  401d6c:	b580      	push	{r7, lr}
  401d6e:	b088      	sub	sp, #32
  401d70:	af00      	add	r7, sp, #0
  401d72:	6078      	str	r0, [r7, #4]
  401d74:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401d76:	683b      	ldr	r3, [r7, #0]
  401d78:	68db      	ldr	r3, [r3, #12]
  401d7a:	61fb      	str	r3, [r7, #28]
	uint8_t *buffer = p_packet->buffer;
  401d7c:	683b      	ldr	r3, [r7, #0]
  401d7e:	689b      	ldr	r3, [r3, #8]
  401d80:	61bb      	str	r3, [r7, #24]
	uint8_t stop_sent = 0;
  401d82:	2300      	movs	r3, #0
  401d84:	75fb      	strb	r3, [r7, #23]
	uint32_t timeout = TWI_TIMEOUT;;
  401d86:	f643 2398 	movw	r3, #15000	; 0x3a98
  401d8a:	613b      	str	r3, [r7, #16]
	
	/* Check argument */
	if (cnt == 0) {
  401d8c:	69fb      	ldr	r3, [r7, #28]
  401d8e:	2b00      	cmp	r3, #0
  401d90:	d101      	bne.n	401d96 <twi_master_read+0x2a>
		return TWI_INVALID_ARGUMENT;
  401d92:	2301      	movs	r3, #1
  401d94:	e069      	b.n	401e6a <twi_master_read+0xfe>
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401d96:	687b      	ldr	r3, [r7, #4]
  401d98:	2200      	movs	r2, #0
  401d9a:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401d9c:	683b      	ldr	r3, [r7, #0]
  401d9e:	7c1b      	ldrb	r3, [r3, #16]
  401da0:	041b      	lsls	r3, r3, #16
  401da2:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401da6:	683b      	ldr	r3, [r7, #0]
  401da8:	685b      	ldr	r3, [r3, #4]
  401daa:	021b      	lsls	r3, r3, #8
  401dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set read mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
  401db0:	4313      	orrs	r3, r2
  401db2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
  401db6:	687b      	ldr	r3, [r7, #4]
  401db8:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401dba:	687b      	ldr	r3, [r7, #4]
  401dbc:	2200      	movs	r2, #0
  401dbe:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401dc0:	683a      	ldr	r2, [r7, #0]
  401dc2:	683b      	ldr	r3, [r7, #0]
  401dc4:	685b      	ldr	r3, [r3, #4]
  401dc6:	4619      	mov	r1, r3
  401dc8:	4610      	mov	r0, r2
  401dca:	4b2a      	ldr	r3, [pc, #168]	; (401e74 <twi_master_read+0x108>)
  401dcc:	4798      	blx	r3
  401dce:	4602      	mov	r2, r0
  401dd0:	687b      	ldr	r3, [r7, #4]
  401dd2:	60da      	str	r2, [r3, #12]

	/* Send a START condition */
	if (cnt == 1) {
  401dd4:	69fb      	ldr	r3, [r7, #28]
  401dd6:	2b01      	cmp	r3, #1
  401dd8:	d105      	bne.n	401de6 <twi_master_read+0x7a>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
  401dda:	687b      	ldr	r3, [r7, #4]
  401ddc:	2203      	movs	r2, #3
  401dde:	601a      	str	r2, [r3, #0]
		stop_sent = 1;
  401de0:	2301      	movs	r3, #1
  401de2:	75fb      	strb	r3, [r7, #23]
  401de4:	e034      	b.n	401e50 <twi_master_read+0xe4>
	} else {
		p_twi->TWI_CR = TWI_CR_START;
  401de6:	687b      	ldr	r3, [r7, #4]
  401de8:	2201      	movs	r2, #1
  401dea:	601a      	str	r2, [r3, #0]
		stop_sent = 0;
  401dec:	2300      	movs	r3, #0
  401dee:	75fb      	strb	r3, [r7, #23]
	}

	while (cnt > 0) {
  401df0:	e02e      	b.n	401e50 <twi_master_read+0xe4>
		status = p_twi->TWI_SR;
  401df2:	687b      	ldr	r3, [r7, #4]
  401df4:	6a1b      	ldr	r3, [r3, #32]
  401df6:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  401df8:	68fb      	ldr	r3, [r7, #12]
  401dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401dfe:	2b00      	cmp	r3, #0
  401e00:	d001      	beq.n	401e06 <twi_master_read+0x9a>
			return TWI_RECEIVE_NACK;
  401e02:	2305      	movs	r3, #5
  401e04:	e031      	b.n	401e6a <twi_master_read+0xfe>
		}

		if (!timeout--) {
  401e06:	693b      	ldr	r3, [r7, #16]
  401e08:	1e5a      	subs	r2, r3, #1
  401e0a:	613a      	str	r2, [r7, #16]
  401e0c:	2b00      	cmp	r3, #0
  401e0e:	d101      	bne.n	401e14 <twi_master_read+0xa8>
			return TWI_ERROR_TIMEOUT;
  401e10:	2309      	movs	r3, #9
  401e12:	e02a      	b.n	401e6a <twi_master_read+0xfe>
		}
				
		/* Last byte ? */
		if (cnt == 1  && !stop_sent) {
  401e14:	69fb      	ldr	r3, [r7, #28]
  401e16:	2b01      	cmp	r3, #1
  401e18:	d107      	bne.n	401e2a <twi_master_read+0xbe>
  401e1a:	7dfb      	ldrb	r3, [r7, #23]
  401e1c:	2b00      	cmp	r3, #0
  401e1e:	d104      	bne.n	401e2a <twi_master_read+0xbe>
			p_twi->TWI_CR = TWI_CR_STOP;
  401e20:	687b      	ldr	r3, [r7, #4]
  401e22:	2202      	movs	r2, #2
  401e24:	601a      	str	r2, [r3, #0]
			stop_sent = 1;
  401e26:	2301      	movs	r3, #1
  401e28:	75fb      	strb	r3, [r7, #23]
		}

		if (!(status & TWI_SR_RXRDY)) {
  401e2a:	68fb      	ldr	r3, [r7, #12]
  401e2c:	f003 0302 	and.w	r3, r3, #2
  401e30:	2b00      	cmp	r3, #0
  401e32:	d100      	bne.n	401e36 <twi_master_read+0xca>
			continue;
  401e34:	e00c      	b.n	401e50 <twi_master_read+0xe4>
		}
		*buffer++ = p_twi->TWI_RHR;
  401e36:	69bb      	ldr	r3, [r7, #24]
  401e38:	1c5a      	adds	r2, r3, #1
  401e3a:	61ba      	str	r2, [r7, #24]
  401e3c:	687a      	ldr	r2, [r7, #4]
  401e3e:	6b12      	ldr	r2, [r2, #48]	; 0x30
  401e40:	b2d2      	uxtb	r2, r2
  401e42:	701a      	strb	r2, [r3, #0]

		cnt--;
  401e44:	69fb      	ldr	r3, [r7, #28]
  401e46:	3b01      	subs	r3, #1
  401e48:	61fb      	str	r3, [r7, #28]
		timeout = TWI_TIMEOUT;
  401e4a:	f643 2398 	movw	r3, #15000	; 0x3a98
  401e4e:	613b      	str	r3, [r7, #16]
	} else {
		p_twi->TWI_CR = TWI_CR_START;
		stop_sent = 0;
	}

	while (cnt > 0) {
  401e50:	69fb      	ldr	r3, [r7, #28]
  401e52:	2b00      	cmp	r3, #0
  401e54:	d1cd      	bne.n	401df2 <twi_master_read+0x86>

		cnt--;
		timeout = TWI_TIMEOUT;
	}

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401e56:	bf00      	nop
  401e58:	687b      	ldr	r3, [r7, #4]
  401e5a:	6a1b      	ldr	r3, [r3, #32]
  401e5c:	f003 0301 	and.w	r3, r3, #1
  401e60:	2b00      	cmp	r3, #0
  401e62:	d0f9      	beq.n	401e58 <twi_master_read+0xec>
	}

	p_twi->TWI_SR;
  401e64:	687b      	ldr	r3, [r7, #4]
  401e66:	6a1b      	ldr	r3, [r3, #32]

	return TWI_SUCCESS;
  401e68:	2300      	movs	r3, #0
}
  401e6a:	4618      	mov	r0, r3
  401e6c:	3720      	adds	r7, #32
  401e6e:	46bd      	mov	sp, r7
  401e70:	bd80      	pop	{r7, pc}
  401e72:	bf00      	nop
  401e74:	00401d11 	.word	0x00401d11

00401e78 <twi_master_write>:
 * \param p_packet Packet information and data (see \ref twi_packet_t).
 *
 * \return TWI_SUCCESS if all bytes were written, error code otherwise.
 */
uint32_t twi_master_write(Twi *p_twi, twi_packet_t *p_packet)
{
  401e78:	b580      	push	{r7, lr}
  401e7a:	b086      	sub	sp, #24
  401e7c:	af00      	add	r7, sp, #0
  401e7e:	6078      	str	r0, [r7, #4]
  401e80:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t cnt = p_packet->length;
  401e82:	683b      	ldr	r3, [r7, #0]
  401e84:	68db      	ldr	r3, [r3, #12]
  401e86:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = p_packet->buffer;
  401e88:	683b      	ldr	r3, [r7, #0]
  401e8a:	689b      	ldr	r3, [r3, #8]
  401e8c:	613b      	str	r3, [r7, #16]

	/* Check argument */
	if (cnt == 0) {
  401e8e:	697b      	ldr	r3, [r7, #20]
  401e90:	2b00      	cmp	r3, #0
  401e92:	d101      	bne.n	401e98 <twi_master_write+0x20>
		return TWI_INVALID_ARGUMENT;
  401e94:	2301      	movs	r3, #1
  401e96:	e056      	b.n	401f46 <twi_master_write+0xce>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
  401e98:	687b      	ldr	r3, [r7, #4]
  401e9a:	2200      	movs	r2, #0
  401e9c:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401e9e:	683b      	ldr	r3, [r7, #0]
  401ea0:	7c1b      	ldrb	r3, [r3, #16]
  401ea2:	041b      	lsls	r3, r3, #16
  401ea4:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
  401ea8:	683b      	ldr	r3, [r7, #0]
  401eaa:	685b      	ldr	r3, [r3, #4]
  401eac:	021b      	lsls	r3, r3, #8
  401eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
  401eb2:	431a      	orrs	r2, r3
  401eb4:	687b      	ldr	r3, [r7, #4]
  401eb6:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
  401eb8:	687b      	ldr	r3, [r7, #4]
  401eba:	2200      	movs	r2, #0
  401ebc:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
  401ebe:	683a      	ldr	r2, [r7, #0]
  401ec0:	683b      	ldr	r3, [r7, #0]
  401ec2:	685b      	ldr	r3, [r3, #4]
  401ec4:	4619      	mov	r1, r3
  401ec6:	4610      	mov	r0, r2
  401ec8:	4b21      	ldr	r3, [pc, #132]	; (401f50 <twi_master_write+0xd8>)
  401eca:	4798      	blx	r3
  401ecc:	4602      	mov	r2, r0
  401ece:	687b      	ldr	r3, [r7, #4]
  401ed0:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
  401ed2:	e019      	b.n	401f08 <twi_master_write+0x90>
		status = p_twi->TWI_SR;
  401ed4:	687b      	ldr	r3, [r7, #4]
  401ed6:	6a1b      	ldr	r3, [r3, #32]
  401ed8:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  401eda:	68fb      	ldr	r3, [r7, #12]
  401edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401ee0:	2b00      	cmp	r3, #0
  401ee2:	d001      	beq.n	401ee8 <twi_master_write+0x70>
			return TWI_RECEIVE_NACK;
  401ee4:	2305      	movs	r3, #5
  401ee6:	e02e      	b.n	401f46 <twi_master_write+0xce>
		}

		if (!(status & TWI_SR_TXRDY)) {
  401ee8:	68fb      	ldr	r3, [r7, #12]
  401eea:	f003 0304 	and.w	r3, r3, #4
  401eee:	2b00      	cmp	r3, #0
  401ef0:	d100      	bne.n	401ef4 <twi_master_write+0x7c>
			continue;
  401ef2:	e009      	b.n	401f08 <twi_master_write+0x90>
		}
		p_twi->TWI_THR = *buffer++;
  401ef4:	693b      	ldr	r3, [r7, #16]
  401ef6:	1c5a      	adds	r2, r3, #1
  401ef8:	613a      	str	r2, [r7, #16]
  401efa:	781b      	ldrb	r3, [r3, #0]
  401efc:	461a      	mov	r2, r3
  401efe:	687b      	ldr	r3, [r7, #4]
  401f00:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
  401f02:	697b      	ldr	r3, [r7, #20]
  401f04:	3b01      	subs	r3, #1
  401f06:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
  401f08:	697b      	ldr	r3, [r7, #20]
  401f0a:	2b00      	cmp	r3, #0
  401f0c:	d1e2      	bne.n	401ed4 <twi_master_write+0x5c>

		cnt--;
	}

	while (1) {
		status = p_twi->TWI_SR;
  401f0e:	687b      	ldr	r3, [r7, #4]
  401f10:	6a1b      	ldr	r3, [r3, #32]
  401f12:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
  401f14:	68fb      	ldr	r3, [r7, #12]
  401f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
  401f1a:	2b00      	cmp	r3, #0
  401f1c:	d001      	beq.n	401f22 <twi_master_write+0xaa>
			return TWI_RECEIVE_NACK;
  401f1e:	2305      	movs	r3, #5
  401f20:	e011      	b.n	401f46 <twi_master_write+0xce>
		}

		if (status & TWI_SR_TXRDY) {
  401f22:	68fb      	ldr	r3, [r7, #12]
  401f24:	f003 0304 	and.w	r3, r3, #4
  401f28:	2b00      	cmp	r3, #0
  401f2a:	d100      	bne.n	401f2e <twi_master_write+0xb6>
			break;
		}
	}
  401f2c:	e7ef      	b.n	401f0e <twi_master_write+0x96>
		if (status & TWI_SR_NACK) {
			return TWI_RECEIVE_NACK;
		}

		if (status & TWI_SR_TXRDY) {
			break;
  401f2e:	bf00      	nop
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
  401f30:	687b      	ldr	r3, [r7, #4]
  401f32:	2202      	movs	r2, #2
  401f34:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
  401f36:	bf00      	nop
  401f38:	687b      	ldr	r3, [r7, #4]
  401f3a:	6a1b      	ldr	r3, [r3, #32]
  401f3c:	f003 0301 	and.w	r3, r3, #1
  401f40:	2b00      	cmp	r3, #0
  401f42:	d0f9      	beq.n	401f38 <twi_master_write+0xc0>
	}

	return TWI_SUCCESS;
  401f44:	2300      	movs	r3, #0
}
  401f46:	4618      	mov	r0, r3
  401f48:	3718      	adds	r7, #24
  401f4a:	46bd      	mov	sp, r7
  401f4c:	bd80      	pop	{r7, pc}
  401f4e:	bf00      	nop
  401f50:	00401d11 	.word	0x00401d11

00401f54 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
  401f54:	b480      	push	{r7}
  401f56:	b083      	sub	sp, #12
  401f58:	af00      	add	r7, sp, #0
  401f5a:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
  401f5c:	687b      	ldr	r3, [r7, #4]
  401f5e:	2280      	movs	r2, #128	; 0x80
  401f60:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
  401f62:	687b      	ldr	r3, [r7, #4]
  401f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
  401f66:	bf00      	nop
  401f68:	370c      	adds	r7, #12
  401f6a:	46bd      	mov	sp, r7
  401f6c:	bc80      	pop	{r7}
  401f6e:	4770      	bx	lr

00401f70 <wdt_disable>:

/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
  401f70:	b480      	push	{r7}
  401f72:	b083      	sub	sp, #12
  401f74:	af00      	add	r7, sp, #0
  401f76:	6078      	str	r0, [r7, #4]
	p_wdt->WDT_MR = WDT_MR_WDDIS;
  401f78:	687b      	ldr	r3, [r7, #4]
  401f7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401f7e:	605a      	str	r2, [r3, #4]

}
  401f80:	bf00      	nop
  401f82:	370c      	adds	r7, #12
  401f84:	46bd      	mov	sp, r7
  401f86:	bc80      	pop	{r7}
  401f88:	4770      	bx	lr
  401f8a:	bf00      	nop

00401f8c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  401f8c:	b580      	push	{r7, lr}
  401f8e:	b084      	sub	sp, #16
  401f90:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
  401f92:	4b27      	ldr	r3, [pc, #156]	; (402030 <Reset_Handler+0xa4>)
  401f94:	60fb      	str	r3, [r7, #12]
	pDest = &_srelocate;
  401f96:	4b27      	ldr	r3, [pc, #156]	; (402034 <Reset_Handler+0xa8>)
  401f98:	60bb      	str	r3, [r7, #8]

	if (pSrc > pDest) {
  401f9a:	68fa      	ldr	r2, [r7, #12]
  401f9c:	68bb      	ldr	r3, [r7, #8]
  401f9e:	429a      	cmp	r2, r3
  401fa0:	d90d      	bls.n	401fbe <Reset_Handler+0x32>
		for (; pDest < &_erelocate;) {
  401fa2:	e007      	b.n	401fb4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
  401fa4:	68bb      	ldr	r3, [r7, #8]
  401fa6:	1d1a      	adds	r2, r3, #4
  401fa8:	60ba      	str	r2, [r7, #8]
  401faa:	68fa      	ldr	r2, [r7, #12]
  401fac:	1d11      	adds	r1, r2, #4
  401fae:	60f9      	str	r1, [r7, #12]
  401fb0:	6812      	ldr	r2, [r2, #0]
  401fb2:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc > pDest) {
		for (; pDest < &_erelocate;) {
  401fb4:	68bb      	ldr	r3, [r7, #8]
  401fb6:	4a20      	ldr	r2, [pc, #128]	; (402038 <Reset_Handler+0xac>)
  401fb8:	4293      	cmp	r3, r2
  401fba:	d3f3      	bcc.n	401fa4 <Reset_Handler+0x18>
  401fbc:	e020      	b.n	402000 <Reset_Handler+0x74>
			*pDest++ = *pSrc++;
		}
	} else if (pSrc < pDest) {
  401fbe:	68fa      	ldr	r2, [r7, #12]
  401fc0:	68bb      	ldr	r3, [r7, #8]
  401fc2:	429a      	cmp	r2, r3
  401fc4:	d21c      	bcs.n	402000 <Reset_Handler+0x74>
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
  401fc6:	4a1c      	ldr	r2, [pc, #112]	; (402038 <Reset_Handler+0xac>)
  401fc8:	4b1a      	ldr	r3, [pc, #104]	; (402034 <Reset_Handler+0xa8>)
  401fca:	1ad3      	subs	r3, r2, r3
  401fcc:	607b      	str	r3, [r7, #4]
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
  401fce:	68fa      	ldr	r2, [r7, #12]
  401fd0:	687b      	ldr	r3, [r7, #4]
  401fd2:	4413      	add	r3, r2
  401fd4:	3b04      	subs	r3, #4
  401fd6:	60fb      	str	r3, [r7, #12]
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
  401fd8:	68ba      	ldr	r2, [r7, #8]
  401fda:	687b      	ldr	r3, [r7, #4]
  401fdc:	4413      	add	r3, r2
  401fde:	3b04      	subs	r3, #4
  401fe0:	60bb      	str	r3, [r7, #8]
		for (;nb_bytes;nb_bytes -= 4) {
  401fe2:	e00a      	b.n	401ffa <Reset_Handler+0x6e>
			*pDest-- = *pSrc--;
  401fe4:	68bb      	ldr	r3, [r7, #8]
  401fe6:	1f1a      	subs	r2, r3, #4
  401fe8:	60ba      	str	r2, [r7, #8]
  401fea:	68fa      	ldr	r2, [r7, #12]
  401fec:	1f11      	subs	r1, r2, #4
  401fee:	60f9      	str	r1, [r7, #12]
  401ff0:	6812      	ldr	r2, [r2, #0]
  401ff2:	601a      	str	r2, [r3, #0]
		}
	} else if (pSrc < pDest) {
		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
		for (;nb_bytes;nb_bytes -= 4) {
  401ff4:	687b      	ldr	r3, [r7, #4]
  401ff6:	3b04      	subs	r3, #4
  401ff8:	607b      	str	r3, [r7, #4]
  401ffa:	687b      	ldr	r3, [r7, #4]
  401ffc:	2b00      	cmp	r3, #0
  401ffe:	d1f1      	bne.n	401fe4 <Reset_Handler+0x58>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  402000:	bf00      	nop
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402002:	4b0e      	ldr	r3, [pc, #56]	; (40203c <Reset_Handler+0xb0>)
  402004:	60bb      	str	r3, [r7, #8]
  402006:	e004      	b.n	402012 <Reset_Handler+0x86>
		*pDest++ = 0;
  402008:	68bb      	ldr	r3, [r7, #8]
  40200a:	1d1a      	adds	r2, r3, #4
  40200c:	60ba      	str	r2, [r7, #8]
  40200e:	2200      	movs	r2, #0
  402010:	601a      	str	r2, [r3, #0]
		}
	}
	__NOP();

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
  402012:	68bb      	ldr	r3, [r7, #8]
  402014:	4a0a      	ldr	r2, [pc, #40]	; (402040 <Reset_Handler+0xb4>)
  402016:	4293      	cmp	r3, r2
  402018:	d3f6      	bcc.n	402008 <Reset_Handler+0x7c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
  40201a:	4b0a      	ldr	r3, [pc, #40]	; (402044 <Reset_Handler+0xb8>)
  40201c:	60fb      	str	r3, [r7, #12]
	SCB->VTOR = ((uint32_t) pSrc);
  40201e:	4a0a      	ldr	r2, [pc, #40]	; (402048 <Reset_Handler+0xbc>)
  402020:	68fb      	ldr	r3, [r7, #12]
  402022:	6093      	str	r3, [r2, #8]

	/* Initialize the C library */
	__libc_init_array();
  402024:	4b09      	ldr	r3, [pc, #36]	; (40204c <Reset_Handler+0xc0>)
  402026:	4798      	blx	r3

	/* Branch to main function */
	main();
  402028:	4b09      	ldr	r3, [pc, #36]	; (402050 <Reset_Handler+0xc4>)
  40202a:	4798      	blx	r3

	/* Infinite loop */
	while (1);
  40202c:	e7fe      	b.n	40202c <Reset_Handler+0xa0>
  40202e:	bf00      	nop
  402030:	00402e0c 	.word	0x00402e0c
  402034:	20000000 	.word	0x20000000
  402038:	20000848 	.word	0x20000848
  40203c:	20000848 	.word	0x20000848
  402040:	200008e4 	.word	0x200008e4
  402044:	00400000 	.word	0x00400000
  402048:	e000ed00 	.word	0xe000ed00
  40204c:	00402c91 	.word	0x00402c91
  402050:	004028f5 	.word	0x004028f5

00402054 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402054:	b480      	push	{r7}
  402056:	af00      	add	r7, sp, #0
	while (1) {
	}
  402058:	e7fe      	b.n	402058 <Dummy_Handler+0x4>
  40205a:	bf00      	nop

0040205c <SystemCoreClockUpdate>:

/**
 * \brief Get Core Clock Frequency.
 */
void SystemCoreClockUpdate( void )
{
  40205c:	b480      	push	{r7}
  40205e:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
  402060:	4b5d      	ldr	r3, [pc, #372]	; (4021d8 <SystemCoreClockUpdate+0x17c>)
  402062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402064:	f003 0303 	and.w	r3, r3, #3
  402068:	2b03      	cmp	r3, #3
  40206a:	f200 8096 	bhi.w	40219a <SystemCoreClockUpdate+0x13e>
  40206e:	a201      	add	r2, pc, #4	; (adr r2, 402074 <SystemCoreClockUpdate+0x18>)
  402070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402074:	00402085 	.word	0x00402085
  402078:	004020a5 	.word	0x004020a5
  40207c:	004020ef 	.word	0x004020ef
  402080:	004020ef 	.word	0x004020ef
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
  402084:	4b55      	ldr	r3, [pc, #340]	; (4021dc <SystemCoreClockUpdate+0x180>)
  402086:	695b      	ldr	r3, [r3, #20]
  402088:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40208c:	2b00      	cmp	r3, #0
  40208e:	d004      	beq.n	40209a <SystemCoreClockUpdate+0x3e>
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
  402090:	4b53      	ldr	r3, [pc, #332]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  402092:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  402096:	601a      	str	r2, [r3, #0]
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
			}
		break;
  402098:	e080      	b.n	40219c <SystemCoreClockUpdate+0x140>
	switch ( PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk ) {
	case PMC_MCKR_CSS_SLOW_CLK: /* Slow clock */
			if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL ) {
				SystemCoreClock = CHIP_FREQ_XTAL_32K;
			} else {
				SystemCoreClock = CHIP_FREQ_SLCK_RC;
  40209a:	4b51      	ldr	r3, [pc, #324]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  40209c:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4020a0:	601a      	str	r2, [r3, #0]
			}
		break;
  4020a2:	e07b      	b.n	40219c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4020a4:	4b4c      	ldr	r3, [pc, #304]	; (4021d8 <SystemCoreClockUpdate+0x17c>)
  4020a6:	6a1b      	ldr	r3, [r3, #32]
  4020a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4020ac:	2b00      	cmp	r3, #0
  4020ae:	d003      	beq.n	4020b8 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL;
  4020b0:	4b4b      	ldr	r3, [pc, #300]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  4020b2:	4a4c      	ldr	r2, [pc, #304]	; (4021e4 <SystemCoreClockUpdate+0x188>)
  4020b4:	601a      	str	r2, [r3, #0]
			
			default:
			break;
			}
		}
		break;
  4020b6:	e071      	b.n	40219c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_MAIN_CLK: /* Main clock */
		if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
			SystemCoreClock = CHIP_FREQ_XTAL;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020b8:	4b49      	ldr	r3, [pc, #292]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  4020ba:	4a4b      	ldr	r2, [pc, #300]	; (4021e8 <SystemCoreClockUpdate+0x18c>)
  4020bc:	601a      	str	r2, [r3, #0]
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  4020be:	4b46      	ldr	r3, [pc, #280]	; (4021d8 <SystemCoreClockUpdate+0x17c>)
  4020c0:	6a1b      	ldr	r3, [r3, #32]
  4020c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4020c6:	2b10      	cmp	r3, #16
  4020c8:	d008      	beq.n	4020dc <SystemCoreClockUpdate+0x80>
  4020ca:	2b20      	cmp	r3, #32
  4020cc:	d00a      	beq.n	4020e4 <SystemCoreClockUpdate+0x88>
  4020ce:	2b00      	cmp	r3, #0
  4020d0:	d000      	beq.n	4020d4 <SystemCoreClockUpdate+0x78>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
			break;
			
			default:
			break;
  4020d2:	e00b      	b.n	4020ec <SystemCoreClockUpdate+0x90>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
			
			switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4020d4:	4b42      	ldr	r3, [pc, #264]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  4020d6:	4a44      	ldr	r2, [pc, #272]	; (4021e8 <SystemCoreClockUpdate+0x18c>)
  4020d8:	601a      	str	r2, [r3, #0]
			break;
  4020da:	e007      	b.n	4020ec <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  4020dc:	4b40      	ldr	r3, [pc, #256]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  4020de:	4a43      	ldr	r2, [pc, #268]	; (4021ec <SystemCoreClockUpdate+0x190>)
  4020e0:	601a      	str	r2, [r3, #0]
			break;
  4020e2:	e003      	b.n	4020ec <SystemCoreClockUpdate+0x90>
			
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  4020e4:	4b3e      	ldr	r3, [pc, #248]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  4020e6:	4a3f      	ldr	r2, [pc, #252]	; (4021e4 <SystemCoreClockUpdate+0x188>)
  4020e8:	601a      	str	r2, [r3, #0]
			break;
  4020ea:	bf00      	nop
			
			default:
			break;
			}
		}
		break;
  4020ec:	e056      	b.n	40219c <SystemCoreClockUpdate+0x140>
		
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_PLLB_CLK:	/* PLLB clock */
			if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL ) {
  4020ee:	4b3a      	ldr	r3, [pc, #232]	; (4021d8 <SystemCoreClockUpdate+0x17c>)
  4020f0:	6a1b      	ldr	r3, [r3, #32]
  4020f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4020f6:	2b00      	cmp	r3, #0
  4020f8:	d003      	beq.n	402102 <SystemCoreClockUpdate+0xa6>
				SystemCoreClock = CHIP_FREQ_XTAL;
  4020fa:	4b39      	ldr	r3, [pc, #228]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  4020fc:	4a39      	ldr	r2, [pc, #228]	; (4021e4 <SystemCoreClockUpdate+0x188>)
  4020fe:	601a      	str	r2, [r3, #0]
  402100:	e019      	b.n	402136 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402102:	4b37      	ldr	r3, [pc, #220]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  402104:	4a38      	ldr	r2, [pc, #224]	; (4021e8 <SystemCoreClockUpdate+0x18c>)
  402106:	601a      	str	r2, [r3, #0]
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
  402108:	4b33      	ldr	r3, [pc, #204]	; (4021d8 <SystemCoreClockUpdate+0x17c>)
  40210a:	6a1b      	ldr	r3, [r3, #32]
  40210c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402110:	2b10      	cmp	r3, #16
  402112:	d008      	beq.n	402126 <SystemCoreClockUpdate+0xca>
  402114:	2b20      	cmp	r3, #32
  402116:	d00a      	beq.n	40212e <SystemCoreClockUpdate+0xd2>
  402118:	2b00      	cmp	r3, #0
  40211a:	d000      	beq.n	40211e <SystemCoreClockUpdate+0xc2>
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
					break;
				
				default:
					break;
  40211c:	e00b      	b.n	402136 <SystemCoreClockUpdate+0xda>
			} else {
				SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
				
				switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk ) {
				case CKGR_MOR_MOSCRCF_4_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  40211e:	4b30      	ldr	r3, [pc, #192]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  402120:	4a31      	ldr	r2, [pc, #196]	; (4021e8 <SystemCoreClockUpdate+0x18c>)
  402122:	601a      	str	r2, [r3, #0]
					break;
  402124:	e007      	b.n	402136 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_8_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_8MHZ;
  402126:	4b2e      	ldr	r3, [pc, #184]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  402128:	4a30      	ldr	r2, [pc, #192]	; (4021ec <SystemCoreClockUpdate+0x190>)
  40212a:	601a      	str	r2, [r3, #0]
					break;
  40212c:	e003      	b.n	402136 <SystemCoreClockUpdate+0xda>
				
				case CKGR_MOR_MOSCRCF_12_MHz:
					SystemCoreClock = CHIP_FREQ_MAINCK_RC_12MHZ;
  40212e:	4b2c      	ldr	r3, [pc, #176]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  402130:	4a2c      	ldr	r2, [pc, #176]	; (4021e4 <SystemCoreClockUpdate+0x188>)
  402132:	601a      	str	r2, [r3, #0]
					break;
  402134:	bf00      	nop
				default:
					break;
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
  402136:	4b28      	ldr	r3, [pc, #160]	; (4021d8 <SystemCoreClockUpdate+0x17c>)
  402138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40213a:	f003 0303 	and.w	r3, r3, #3
  40213e:	2b02      	cmp	r3, #2
  402140:	d115      	bne.n	40216e <SystemCoreClockUpdate+0x112>
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  402142:	4b25      	ldr	r3, [pc, #148]	; (4021d8 <SystemCoreClockUpdate+0x17c>)
  402144:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  402146:	4b2a      	ldr	r3, [pc, #168]	; (4021f0 <SystemCoreClockUpdate+0x194>)
  402148:	4013      	ands	r3, r2
						>> CKGR_PLLAR_MULA_Pos) + 1U);
  40214a:	0c1b      	lsrs	r3, r3, #16
  40214c:	3301      	adds	r3, #1
				}
			}
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
  40214e:	4a24      	ldr	r2, [pc, #144]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  402150:	6812      	ldr	r2, [r2, #0]
  402152:	fb02 f303 	mul.w	r3, r2, r3
  402156:	4a22      	ldr	r2, [pc, #136]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  402158:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  40215a:	4b1f      	ldr	r3, [pc, #124]	; (4021d8 <SystemCoreClockUpdate+0x17c>)
  40215c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
						>> CKGR_PLLAR_DIVA_Pos));
  40215e:	b2db      	uxtb	r3, r3
			
			if ( (uint32_t)(PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) ==
					PMC_MCKR_CSS_PLLA_CLK ) {
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
  402160:	4a1f      	ldr	r2, [pc, #124]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  402162:	6812      	ldr	r2, [r2, #0]
  402164:	fbb2 f3f3 	udiv	r3, r2, r3
  402168:	4a1d      	ldr	r2, [pc, #116]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  40216a:	6013      	str	r3, [r2, #0]
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  40216c:	e016      	b.n	40219c <SystemCoreClockUpdate+0x140>
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40216e:	4b1a      	ldr	r3, [pc, #104]	; (4021d8 <SystemCoreClockUpdate+0x17c>)
  402170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  402172:	4b1f      	ldr	r3, [pc, #124]	; (4021f0 <SystemCoreClockUpdate+0x194>)
  402174:	4013      	ands	r3, r2
						>> CKGR_PLLBR_MULB_Pos) + 1U);
  402176:	0c1b      	lsrs	r3, r3, #16
  402178:	3301      	adds	r3, #1
				SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk)
						>> CKGR_PLLAR_MULA_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
  40217a:	4a19      	ldr	r2, [pc, #100]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  40217c:	6812      	ldr	r2, [r2, #0]
  40217e:	fb02 f303 	mul.w	r3, r2, r3
  402182:	4a17      	ldr	r2, [pc, #92]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  402184:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  402186:	4b14      	ldr	r3, [pc, #80]	; (4021d8 <SystemCoreClockUpdate+0x17c>)
  402188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						>> CKGR_PLLBR_DIVB_Pos));
  40218a:	b2db      	uxtb	r3, r3
				SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk)
						>> CKGR_PLLAR_DIVA_Pos));
			} else {
				SystemCoreClock *= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_MULB_Msk)
						>> CKGR_PLLBR_MULB_Pos) + 1U);
				SystemCoreClock /= ((((PMC->CKGR_PLLBR) & CKGR_PLLBR_DIVB_Msk)
  40218c:	4a14      	ldr	r2, [pc, #80]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  40218e:	6812      	ldr	r2, [r2, #0]
  402190:	fbb2 f3f3 	udiv	r3, r2, r3
  402194:	4a12      	ldr	r2, [pc, #72]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  402196:	6013      	str	r3, [r2, #0]
						>> CKGR_PLLBR_DIVB_Pos));
			}
		break;
  402198:	e000      	b.n	40219c <SystemCoreClockUpdate+0x140>
		
	default:
		break;
  40219a:	bf00      	nop
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
  40219c:	4b0e      	ldr	r3, [pc, #56]	; (4021d8 <SystemCoreClockUpdate+0x17c>)
  40219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021a4:	2b70      	cmp	r3, #112	; 0x70
  4021a6:	d108      	bne.n	4021ba <SystemCoreClockUpdate+0x15e>
		SystemCoreClock /= 3U;
  4021a8:	4b0d      	ldr	r3, [pc, #52]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  4021aa:	681b      	ldr	r3, [r3, #0]
  4021ac:	4a11      	ldr	r2, [pc, #68]	; (4021f4 <SystemCoreClockUpdate+0x198>)
  4021ae:	fba2 2303 	umull	r2, r3, r2, r3
  4021b2:	085b      	lsrs	r3, r3, #1
  4021b4:	4a0a      	ldr	r2, [pc, #40]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  4021b6:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4021b8:	e00a      	b.n	4021d0 <SystemCoreClockUpdate+0x174>

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4021ba:	4b07      	ldr	r3, [pc, #28]	; (4021d8 <SystemCoreClockUpdate+0x17c>)
  4021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021be:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4021c2:	091b      	lsrs	r3, r3, #4
	}

	if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 ) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>=
  4021c4:	4a06      	ldr	r2, [pc, #24]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  4021c6:	6812      	ldr	r2, [r2, #0]
  4021c8:	fa22 f303 	lsr.w	r3, r2, r3
  4021cc:	4a04      	ldr	r2, [pc, #16]	; (4021e0 <SystemCoreClockUpdate+0x184>)
  4021ce:	6013      	str	r3, [r2, #0]
			((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
	}
}
  4021d0:	bf00      	nop
  4021d2:	46bd      	mov	sp, r7
  4021d4:	bc80      	pop	{r7}
  4021d6:	4770      	bx	lr
  4021d8:	400e0400 	.word	0x400e0400
  4021dc:	400e1410 	.word	0x400e1410
  4021e0:	20000418 	.word	0x20000418
  4021e4:	00b71b00 	.word	0x00b71b00
  4021e8:	003d0900 	.word	0x003d0900
  4021ec:	007a1200 	.word	0x007a1200
  4021f0:	07ff0000 	.word	0x07ff0000
  4021f4:	aaaaaaab 	.word	0xaaaaaaab

004021f8 <system_init_flash>:
 * \brief Initialize flash wait state according to operating frequency.
 *
 * \param ul_clk System clock frequency.
 */
void system_init_flash( uint32_t ul_clk )
{
  4021f8:	b480      	push	{r7}
  4021fa:	b083      	sub	sp, #12
  4021fc:	af00      	add	r7, sp, #0
  4021fe:	6078      	str	r0, [r7, #4]
				}
			}
		}
	}
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
  402200:	687b      	ldr	r3, [r7, #4]
  402202:	4a22      	ldr	r2, [pc, #136]	; (40228c <system_init_flash+0x94>)
  402204:	4293      	cmp	r3, r2
  402206:	d808      	bhi.n	40221a <system_init_flash+0x22>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402208:	4b21      	ldr	r3, [pc, #132]	; (402290 <system_init_flash+0x98>)
  40220a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  40220e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402210:	4b20      	ldr	r3, [pc, #128]	; (402294 <system_init_flash+0x9c>)
  402212:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402216:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402218:	e033      	b.n	402282 <system_init_flash+0x8a>
#else
	if ( ul_clk < CHIP_FREQ_FWS_0 ) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
  40221a:	687b      	ldr	r3, [r7, #4]
  40221c:	4a1e      	ldr	r2, [pc, #120]	; (402298 <system_init_flash+0xa0>)
  40221e:	4293      	cmp	r3, r2
  402220:	d806      	bhi.n	402230 <system_init_flash+0x38>
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402222:	4b1b      	ldr	r3, [pc, #108]	; (402290 <system_init_flash+0x98>)
  402224:	4a1d      	ldr	r2, [pc, #116]	; (40229c <system_init_flash+0xa4>)
  402226:	601a      	str	r2, [r3, #0]
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402228:	4b1a      	ldr	r3, [pc, #104]	; (402294 <system_init_flash+0x9c>)
  40222a:	4a1c      	ldr	r2, [pc, #112]	; (40229c <system_init_flash+0xa4>)
  40222c:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40222e:	e028      	b.n	402282 <system_init_flash+0x8a>
	} else {
		if ( ul_clk < CHIP_FREQ_FWS_1 ) {
			EFC0->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
			EFC1->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
  402230:	687b      	ldr	r3, [r7, #4]
  402232:	4a1b      	ldr	r2, [pc, #108]	; (4022a0 <system_init_flash+0xa8>)
  402234:	4293      	cmp	r3, r2
  402236:	d806      	bhi.n	402246 <system_init_flash+0x4e>
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402238:	4b15      	ldr	r3, [pc, #84]	; (402290 <system_init_flash+0x98>)
  40223a:	4a1a      	ldr	r2, [pc, #104]	; (4022a4 <system_init_flash+0xac>)
  40223c:	601a      	str	r2, [r3, #0]
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  40223e:	4b15      	ldr	r3, [pc, #84]	; (402294 <system_init_flash+0x9c>)
  402240:	4a18      	ldr	r2, [pc, #96]	; (4022a4 <system_init_flash+0xac>)
  402242:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402244:	e01d      	b.n	402282 <system_init_flash+0x8a>
		} else {
			if ( ul_clk < CHIP_FREQ_FWS_2 ) {
				EFC0->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
				EFC1->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
  402246:	687b      	ldr	r3, [r7, #4]
  402248:	4a17      	ldr	r2, [pc, #92]	; (4022a8 <system_init_flash+0xb0>)
  40224a:	4293      	cmp	r3, r2
  40224c:	d806      	bhi.n	40225c <system_init_flash+0x64>
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40224e:	4b10      	ldr	r3, [pc, #64]	; (402290 <system_init_flash+0x98>)
  402250:	4a16      	ldr	r2, [pc, #88]	; (4022ac <system_init_flash+0xb4>)
  402252:	601a      	str	r2, [r3, #0]
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402254:	4b0f      	ldr	r3, [pc, #60]	; (402294 <system_init_flash+0x9c>)
  402256:	4a15      	ldr	r2, [pc, #84]	; (4022ac <system_init_flash+0xb4>)
  402258:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  40225a:	e012      	b.n	402282 <system_init_flash+0x8a>
			} else {
				if ( ul_clk < CHIP_FREQ_FWS_3 ) {
					EFC0->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
					EFC1->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
  40225c:	687b      	ldr	r3, [r7, #4]
  40225e:	4a14      	ldr	r2, [pc, #80]	; (4022b0 <system_init_flash+0xb8>)
  402260:	4293      	cmp	r3, r2
  402262:	d808      	bhi.n	402276 <system_init_flash+0x7e>
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402264:	4b0a      	ldr	r3, [pc, #40]	; (402290 <system_init_flash+0x98>)
  402266:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  40226a:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  40226c:	4b09      	ldr	r3, [pc, #36]	; (402294 <system_init_flash+0x9c>)
  40226e:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402272:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402274:	e005      	b.n	402282 <system_init_flash+0x8a>
				} else {
					if ( ul_clk < CHIP_FREQ_FWS_4 ) {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
						EFC1->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
					} else {
						EFC0->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402276:	4b06      	ldr	r3, [pc, #24]	; (402290 <system_init_flash+0x98>)
  402278:	4a0e      	ldr	r2, [pc, #56]	; (4022b4 <system_init_flash+0xbc>)
  40227a:	601a      	str	r2, [r3, #0]
						EFC1->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  40227c:	4b05      	ldr	r3, [pc, #20]	; (402294 <system_init_flash+0x9c>)
  40227e:	4a0d      	ldr	r2, [pc, #52]	; (4022b4 <system_init_flash+0xbc>)
  402280:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
#endif
}
  402282:	bf00      	nop
  402284:	370c      	adds	r7, #12
  402286:	46bd      	mov	sp, r7
  402288:	bc80      	pop	{r7}
  40228a:	4770      	bx	lr
  40228c:	01312cff 	.word	0x01312cff
  402290:	400e0a00 	.word	0x400e0a00
  402294:	400e0c00 	.word	0x400e0c00
  402298:	026259ff 	.word	0x026259ff
  40229c:	04000100 	.word	0x04000100
  4022a0:	039386ff 	.word	0x039386ff
  4022a4:	04000200 	.word	0x04000200
  4022a8:	04c4b3ff 	.word	0x04c4b3ff
  4022ac:	04000300 	.word	0x04000300
  4022b0:	05f5e0ff 	.word	0x05f5e0ff
  4022b4:	04000500 	.word	0x04000500

004022b8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  4022b8:	b480      	push	{r7}
  4022ba:	b083      	sub	sp, #12
  4022bc:	af00      	add	r7, sp, #0
  4022be:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  4022c0:	687b      	ldr	r3, [r7, #4]
  4022c2:	2b07      	cmp	r3, #7
  4022c4:	d825      	bhi.n	402312 <osc_get_rate+0x5a>
  4022c6:	a201      	add	r2, pc, #4	; (adr r2, 4022cc <osc_get_rate+0x14>)
  4022c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4022cc:	004022ed 	.word	0x004022ed
  4022d0:	004022f3 	.word	0x004022f3
  4022d4:	004022f9 	.word	0x004022f9
  4022d8:	004022ff 	.word	0x004022ff
  4022dc:	00402303 	.word	0x00402303
  4022e0:	00402307 	.word	0x00402307
  4022e4:	0040230b 	.word	0x0040230b
  4022e8:	0040230f 	.word	0x0040230f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  4022ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4022f0:	e010      	b.n	402314 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  4022f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4022f6:	e00d      	b.n	402314 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  4022f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4022fc:	e00a      	b.n	402314 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  4022fe:	4b08      	ldr	r3, [pc, #32]	; (402320 <osc_get_rate+0x68>)
  402300:	e008      	b.n	402314 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  402302:	4b08      	ldr	r3, [pc, #32]	; (402324 <osc_get_rate+0x6c>)
  402304:	e006      	b.n	402314 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  402306:	4b08      	ldr	r3, [pc, #32]	; (402328 <osc_get_rate+0x70>)
  402308:	e004      	b.n	402314 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  40230a:	4b07      	ldr	r3, [pc, #28]	; (402328 <osc_get_rate+0x70>)
  40230c:	e002      	b.n	402314 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  40230e:	4b06      	ldr	r3, [pc, #24]	; (402328 <osc_get_rate+0x70>)
  402310:	e000      	b.n	402314 <osc_get_rate+0x5c>
	}

	return 0;
  402312:	2300      	movs	r3, #0
}
  402314:	4618      	mov	r0, r3
  402316:	370c      	adds	r7, #12
  402318:	46bd      	mov	sp, r7
  40231a:	bc80      	pop	{r7}
  40231c:	4770      	bx	lr
  40231e:	bf00      	nop
  402320:	003d0900 	.word	0x003d0900
  402324:	007a1200 	.word	0x007a1200
  402328:	00b71b00 	.word	0x00b71b00

0040232c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
  40232c:	b580      	push	{r7, lr}
  40232e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
  402330:	2006      	movs	r0, #6
  402332:	4b04      	ldr	r3, [pc, #16]	; (402344 <sysclk_get_main_hz+0x18>)
  402334:	4798      	blx	r3
  402336:	4602      	mov	r2, r0
  402338:	4613      	mov	r3, r2
  40233a:	009b      	lsls	r3, r3, #2
  40233c:	4413      	add	r3, r2
  40233e:	009b      	lsls	r3, r3, #2

	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
  402340:	4618      	mov	r0, r3
  402342:	bd80      	pop	{r7, pc}
  402344:	004022b9 	.word	0x004022b9

00402348 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
  402348:	b580      	push	{r7, lr}
  40234a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
  40234c:	4b02      	ldr	r3, [pc, #8]	; (402358 <sysclk_get_cpu_hz+0x10>)
  40234e:	4798      	blx	r3
  402350:	4603      	mov	r3, r0
  402352:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
  402354:	4618      	mov	r0, r3
  402356:	bd80      	pop	{r7, pc}
  402358:	0040232d 	.word	0x0040232d

0040235c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  40235c:	b580      	push	{r7, lr}
  40235e:	b082      	sub	sp, #8
  402360:	af00      	add	r7, sp, #0
  402362:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  402364:	6878      	ldr	r0, [r7, #4]
  402366:	4b03      	ldr	r3, [pc, #12]	; (402374 <sysclk_enable_peripheral_clock+0x18>)
  402368:	4798      	blx	r3
}
  40236a:	bf00      	nop
  40236c:	3708      	adds	r7, #8
  40236e:	46bd      	mov	sp, r7
  402370:	bd80      	pop	{r7, pc}
  402372:	bf00      	nop
  402374:	0040187d 	.word	0x0040187d

00402378 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  402378:	b480      	push	{r7}
  40237a:	b08d      	sub	sp, #52	; 0x34
  40237c:	af00      	add	r7, sp, #0
  40237e:	6078      	str	r0, [r7, #4]
  402380:	460b      	mov	r3, r1
  402382:	70fb      	strb	r3, [r7, #3]
  402384:	687b      	ldr	r3, [r7, #4]
  402386:	62fb      	str	r3, [r7, #44]	; 0x2c
  402388:	78fb      	ldrb	r3, [r7, #3]
  40238a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40238e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402390:	627b      	str	r3, [r7, #36]	; 0x24
  402392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402394:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402396:	6a3b      	ldr	r3, [r7, #32]
  402398:	095b      	lsrs	r3, r3, #5
  40239a:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40239c:	69fb      	ldr	r3, [r7, #28]
  40239e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  4023a2:	f203 7307 	addw	r3, r3, #1799	; 0x707
  4023a6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  4023a8:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  4023aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4023ae:	2b01      	cmp	r3, #1
  4023b0:	d109      	bne.n	4023c6 <ioport_set_pin_dir+0x4e>
  4023b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4023b4:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4023b6:	697b      	ldr	r3, [r7, #20]
  4023b8:	f003 031f 	and.w	r3, r3, #31
  4023bc:	2201      	movs	r2, #1
  4023be:	409a      	lsls	r2, r3
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4023c0:	69bb      	ldr	r3, [r7, #24]
  4023c2:	611a      	str	r2, [r3, #16]
  4023c4:	e00c      	b.n	4023e0 <ioport_set_pin_dir+0x68>
	} else if (dir == IOPORT_DIR_INPUT) {
  4023c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4023ca:	2b00      	cmp	r3, #0
  4023cc:	d108      	bne.n	4023e0 <ioport_set_pin_dir+0x68>
  4023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4023d0:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4023d2:	693b      	ldr	r3, [r7, #16]
  4023d4:	f003 031f 	and.w	r3, r3, #31
  4023d8:	2201      	movs	r2, #1
  4023da:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4023dc:	69bb      	ldr	r3, [r7, #24]
  4023de:	615a      	str	r2, [r3, #20]
  4023e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4023e2:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4023e4:	68fb      	ldr	r3, [r7, #12]
  4023e6:	f003 031f 	and.w	r3, r3, #31
  4023ea:	2201      	movs	r2, #1
  4023ec:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4023ee:	69bb      	ldr	r3, [r7, #24]
  4023f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  4023f4:	bf00      	nop
  4023f6:	3734      	adds	r7, #52	; 0x34
  4023f8:	46bd      	mov	sp, r7
  4023fa:	bc80      	pop	{r7}
  4023fc:	4770      	bx	lr
  4023fe:	bf00      	nop

00402400 <spi_put>:
 * \param p_spi Base address of the SPI instance.
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
  402400:	b480      	push	{r7}
  402402:	b083      	sub	sp, #12
  402404:	af00      	add	r7, sp, #0
  402406:	6078      	str	r0, [r7, #4]
  402408:	460b      	mov	r3, r1
  40240a:	807b      	strh	r3, [r7, #2]
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  40240c:	887a      	ldrh	r2, [r7, #2]
  40240e:	687b      	ldr	r3, [r7, #4]
  402410:	60da      	str	r2, [r3, #12]
}
  402412:	bf00      	nop
  402414:	370c      	adds	r7, #12
  402416:	46bd      	mov	sp, r7
  402418:	bc80      	pop	{r7}
  40241a:	4770      	bx	lr

0040241c <spi_write_single>:
 * \param p_spi     Base address of the SPI instance.
 * \param data      Data to write.
 *
 */
static inline void spi_write_single(Spi *p_spi, uint8_t data)
{
  40241c:	b580      	push	{r7, lr}
  40241e:	b082      	sub	sp, #8
  402420:	af00      	add	r7, sp, #0
  402422:	6078      	str	r0, [r7, #4]
  402424:	460b      	mov	r3, r1
  402426:	70fb      	strb	r3, [r7, #3]
	spi_put(p_spi, (uint16_t)data);
  402428:	78fb      	ldrb	r3, [r7, #3]
  40242a:	b29b      	uxth	r3, r3
  40242c:	4619      	mov	r1, r3
  40242e:	6878      	ldr	r0, [r7, #4]
  402430:	4b02      	ldr	r3, [pc, #8]	; (40243c <spi_write_single+0x20>)
  402432:	4798      	blx	r3
}
  402434:	bf00      	nop
  402436:	3708      	adds	r7, #8
  402438:	46bd      	mov	sp, r7
  40243a:	bd80      	pop	{r7, pc}
  40243c:	00402401 	.word	0x00402401

00402440 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
static void ssd1306_write_command(uint8_t command)
{
  402440:	b5f0      	push	{r4, r5, r6, r7, lr}
  402442:	b08d      	sub	sp, #52	; 0x34
  402444:	af00      	add	r7, sp, #0
  402446:	4603      	mov	r3, r0
  402448:	71fb      	strb	r3, [r7, #7]
	usart_spi_select_device(SSD1306_USART_SPI, &device);
	ssd1306_sel_cmd();
	usart_spi_transmit(SSD1306_USART_SPI, command);
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  40244a:	2301      	movs	r3, #1
  40244c:	60fb      	str	r3, [r7, #12]
	spi_select_device(SSD1306_SPI, &device);
  40244e:	f107 030c 	add.w	r3, r7, #12
  402452:	4619      	mov	r1, r3
  402454:	2000      	movs	r0, #0
  402456:	4b30      	ldr	r3, [pc, #192]	; (402518 <ssd1306_write_command+0xd8>)
  402458:	4798      	blx	r3
  40245a:	2300      	movs	r3, #0
  40245c:	62fb      	str	r3, [r7, #44]	; 0x2c
  40245e:	2300      	movs	r3, #0
  402460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  402464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402466:	627b      	str	r3, [r7, #36]	; 0x24
  402468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40246a:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  40246c:	6a3b      	ldr	r3, [r7, #32]
  40246e:	095b      	lsrs	r3, r3, #5
  402470:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  402472:	69fb      	ldr	r3, [r7, #28]
  402474:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402478:	f203 7307 	addw	r3, r3, #1799	; 0x707
  40247c:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  40247e:	61bb      	str	r3, [r7, #24]

	if (level) {
  402480:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  402484:	2b00      	cmp	r3, #0
  402486:	d009      	beq.n	40249c <ssd1306_write_command+0x5c>
  402488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40248a:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  40248c:	697b      	ldr	r3, [r7, #20]
  40248e:	f003 031f 	and.w	r3, r3, #31
  402492:	2201      	movs	r2, #1
  402494:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  402496:	69bb      	ldr	r3, [r7, #24]
  402498:	631a      	str	r2, [r3, #48]	; 0x30
  40249a:	e008      	b.n	4024ae <ssd1306_write_command+0x6e>
  40249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40249e:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  4024a0:	693b      	ldr	r3, [r7, #16]
  4024a2:	f003 031f 	and.w	r3, r3, #31
  4024a6:	2201      	movs	r2, #1
  4024a8:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4024aa:	69bb      	ldr	r3, [r7, #24]
  4024ac:	635a      	str	r2, [r3, #52]	; 0x34
	ssd1306_sel_cmd();
	spi_write_single(SSD1306_SPI, command);
  4024ae:	79fb      	ldrb	r3, [r7, #7]
  4024b0:	4619      	mov	r1, r3
  4024b2:	2000      	movs	r0, #0
  4024b4:	4b19      	ldr	r3, [pc, #100]	; (40251c <ssd1306_write_command+0xdc>)
  4024b6:	4798      	blx	r3
	delay_us(SSD1306_LATENCY); // At least 3us
  4024b8:	4b19      	ldr	r3, [pc, #100]	; (402520 <ssd1306_write_command+0xe0>)
  4024ba:	4798      	blx	r3
  4024bc:	4603      	mov	r3, r0
  4024be:	f04f 0400 	mov.w	r4, #0
  4024c2:	18db      	adds	r3, r3, r3
  4024c4:	eb44 0404 	adc.w	r4, r4, r4
  4024c8:	00a6      	lsls	r6, r4, #2
  4024ca:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4024ce:	009d      	lsls	r5, r3, #2
  4024d0:	195b      	adds	r3, r3, r5
  4024d2:	eb44 0406 	adc.w	r4, r4, r6
  4024d6:	a20e      	add	r2, pc, #56	; (adr r2, 402510 <ssd1306_write_command+0xd0>)
  4024d8:	e9d2 1200 	ldrd	r1, r2, [r2]
  4024dc:	185d      	adds	r5, r3, r1
  4024de:	eb44 0602 	adc.w	r6, r4, r2
  4024e2:	4628      	mov	r0, r5
  4024e4:	4631      	mov	r1, r6
  4024e6:	4c0f      	ldr	r4, [pc, #60]	; (402524 <ssd1306_write_command+0xe4>)
  4024e8:	4a0f      	ldr	r2, [pc, #60]	; (402528 <ssd1306_write_command+0xe8>)
  4024ea:	f04f 0300 	mov.w	r3, #0
  4024ee:	47a0      	blx	r4
  4024f0:	4603      	mov	r3, r0
  4024f2:	460c      	mov	r4, r1
  4024f4:	4618      	mov	r0, r3
  4024f6:	4b0d      	ldr	r3, [pc, #52]	; (40252c <ssd1306_write_command+0xec>)
  4024f8:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4024fa:	f107 030c 	add.w	r3, r7, #12
  4024fe:	4619      	mov	r1, r3
  402500:	2000      	movs	r0, #0
  402502:	4b0b      	ldr	r3, [pc, #44]	; (402530 <ssd1306_write_command+0xf0>)
  402504:	4798      	blx	r3
#endif
}
  402506:	bf00      	nop
  402508:	3734      	adds	r7, #52	; 0x34
  40250a:	46bd      	mov	sp, r7
  40250c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40250e:	bf00      	nop
  402510:	00d59f7f 	.word	0x00d59f7f
  402514:	00000000 	.word	0x00000000
  402518:	00400d59 	.word	0x00400d59
  40251c:	0040241d 	.word	0x0040241d
  402520:	00402349 	.word	0x00402349
  402524:	00402979 	.word	0x00402979
  402528:	00d59f80 	.word	0x00d59f80
  40252c:	20000001 	.word	0x20000001
  402530:	00400db1 	.word	0x00400db1
  402534:	00000000 	.word	0x00000000

00402538 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
static inline void ssd1306_write_data(uint8_t data)
{
  402538:	b5f0      	push	{r4, r5, r6, r7, lr}
  40253a:	b08d      	sub	sp, #52	; 0x34
  40253c:	af00      	add	r7, sp, #0
  40253e:	4603      	mov	r3, r0
  402540:	71fb      	strb	r3, [r7, #7]
	arch_ioport_set_pin_level(SSD1306_DC_PIN, true);
	usart_spi_transmit(SSD1306_USART_SPI, data);
	ssd1306_sel_cmd();
	usart_spi_deselect_device(SSD1306_USART_SPI, &device);
#elif defined(SSD1306_SPI_INTERFACE)
	struct spi_device device = {.id = SSD1306_CS_PIN};
  402542:	2301      	movs	r3, #1
  402544:	60fb      	str	r3, [r7, #12]
	spi_select_device(SSD1306_SPI, &device);
  402546:	f107 030c 	add.w	r3, r7, #12
  40254a:	4619      	mov	r1, r3
  40254c:	2000      	movs	r0, #0
  40254e:	4b30      	ldr	r3, [pc, #192]	; (402610 <ssd1306_write_data+0xd8>)
  402550:	4798      	blx	r3
  402552:	2300      	movs	r3, #0
  402554:	62fb      	str	r3, [r7, #44]	; 0x2c
  402556:	2301      	movs	r3, #1
  402558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  40255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  40255e:	627b      	str	r3, [r7, #36]	; 0x24
  402560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402562:	623b      	str	r3, [r7, #32]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  402564:	6a3b      	ldr	r3, [r7, #32]
  402566:	095b      	lsrs	r3, r3, #5
  402568:	61fb      	str	r3, [r7, #28]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40256a:	69fb      	ldr	r3, [r7, #28]
  40256c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
  402570:	f203 7307 	addw	r3, r3, #1799	; 0x707
  402574:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  402576:	61bb      	str	r3, [r7, #24]

	if (level) {
  402578:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40257c:	2b00      	cmp	r3, #0
  40257e:	d009      	beq.n	402594 <ssd1306_write_data+0x5c>
  402580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402582:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402584:	697b      	ldr	r3, [r7, #20]
  402586:	f003 031f 	and.w	r3, r3, #31
  40258a:	2201      	movs	r2, #1
  40258c:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40258e:	69bb      	ldr	r3, [r7, #24]
  402590:	631a      	str	r2, [r3, #48]	; 0x30
  402592:	e008      	b.n	4025a6 <ssd1306_write_data+0x6e>
  402594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  402596:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  402598:	693b      	ldr	r3, [r7, #16]
  40259a:	f003 031f 	and.w	r3, r3, #31
  40259e:	2201      	movs	r2, #1
  4025a0:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4025a2:	69bb      	ldr	r3, [r7, #24]
  4025a4:	635a      	str	r2, [r3, #52]	; 0x34
	ssd1306_sel_data();
	spi_write_single(SSD1306_SPI, data);
  4025a6:	79fb      	ldrb	r3, [r7, #7]
  4025a8:	4619      	mov	r1, r3
  4025aa:	2000      	movs	r0, #0
  4025ac:	4b19      	ldr	r3, [pc, #100]	; (402614 <ssd1306_write_data+0xdc>)
  4025ae:	4798      	blx	r3
	delay_us(SSD1306_LATENCY); // At least 3us
  4025b0:	4b19      	ldr	r3, [pc, #100]	; (402618 <ssd1306_write_data+0xe0>)
  4025b2:	4798      	blx	r3
  4025b4:	4603      	mov	r3, r0
  4025b6:	f04f 0400 	mov.w	r4, #0
  4025ba:	18db      	adds	r3, r3, r3
  4025bc:	eb44 0404 	adc.w	r4, r4, r4
  4025c0:	00a6      	lsls	r6, r4, #2
  4025c2:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4025c6:	009d      	lsls	r5, r3, #2
  4025c8:	195b      	adds	r3, r3, r5
  4025ca:	eb44 0406 	adc.w	r4, r4, r6
  4025ce:	a20e      	add	r2, pc, #56	; (adr r2, 402608 <ssd1306_write_data+0xd0>)
  4025d0:	e9d2 1200 	ldrd	r1, r2, [r2]
  4025d4:	185d      	adds	r5, r3, r1
  4025d6:	eb44 0602 	adc.w	r6, r4, r2
  4025da:	4628      	mov	r0, r5
  4025dc:	4631      	mov	r1, r6
  4025de:	4c0f      	ldr	r4, [pc, #60]	; (40261c <ssd1306_write_data+0xe4>)
  4025e0:	4a0f      	ldr	r2, [pc, #60]	; (402620 <ssd1306_write_data+0xe8>)
  4025e2:	f04f 0300 	mov.w	r3, #0
  4025e6:	47a0      	blx	r4
  4025e8:	4603      	mov	r3, r0
  4025ea:	460c      	mov	r4, r1
  4025ec:	4618      	mov	r0, r3
  4025ee:	4b0d      	ldr	r3, [pc, #52]	; (402624 <ssd1306_write_data+0xec>)
  4025f0:	4798      	blx	r3
	spi_deselect_device(SSD1306_SPI, &device);
  4025f2:	f107 030c 	add.w	r3, r7, #12
  4025f6:	4619      	mov	r1, r3
  4025f8:	2000      	movs	r0, #0
  4025fa:	4b0b      	ldr	r3, [pc, #44]	; (402628 <ssd1306_write_data+0xf0>)
  4025fc:	4798      	blx	r3
#endif
}
  4025fe:	bf00      	nop
  402600:	3734      	adds	r7, #52	; 0x34
  402602:	46bd      	mov	sp, r7
  402604:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402606:	bf00      	nop
  402608:	00d59f7f 	.word	0x00d59f7f
  40260c:	00000000 	.word	0x00000000
  402610:	00400d59 	.word	0x00400d59
  402614:	0040241d 	.word	0x0040241d
  402618:	00402349 	.word	0x00402349
  40261c:	00402979 	.word	0x00402979
  402620:	00d59f80 	.word	0x00d59f80
  402624:	20000001 	.word	0x20000001
  402628:	00400db1 	.word	0x00400db1

0040262c <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
  40262c:	b580      	push	{r7, lr}
  40262e:	b082      	sub	sp, #8
  402630:	af00      	add	r7, sp, #0
  402632:	4603      	mov	r3, r0
  402634:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  402636:	79fb      	ldrb	r3, [r7, #7]
  402638:	f003 030f 	and.w	r3, r3, #15
  40263c:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  40263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402642:	f003 0307 	and.w	r3, r3, #7
  402646:	b25b      	sxtb	r3, r3
  402648:	f063 034f 	orn	r3, r3, #79	; 0x4f
  40264c:	b25b      	sxtb	r3, r3
  40264e:	b2db      	uxtb	r3, r3
  402650:	4618      	mov	r0, r3
  402652:	4b03      	ldr	r3, [pc, #12]	; (402660 <ssd1306_set_page_address+0x34>)
  402654:	4798      	blx	r3
}
  402656:	bf00      	nop
  402658:	3708      	adds	r7, #8
  40265a:	46bd      	mov	sp, r7
  40265c:	bd80      	pop	{r7, pc}
  40265e:	bf00      	nop
  402660:	00402441 	.word	0x00402441

00402664 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
  402664:	b580      	push	{r7, lr}
  402666:	b082      	sub	sp, #8
  402668:	af00      	add	r7, sp, #0
  40266a:	4603      	mov	r3, r0
  40266c:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
  40266e:	79fb      	ldrb	r3, [r7, #7]
  402670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  402674:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_HIGH_COL(address >> 4));
  402676:	79fb      	ldrb	r3, [r7, #7]
  402678:	091b      	lsrs	r3, r3, #4
  40267a:	b2db      	uxtb	r3, r3
  40267c:	f043 0310 	orr.w	r3, r3, #16
  402680:	b2db      	uxtb	r3, r3
  402682:	4618      	mov	r0, r3
  402684:	4b06      	ldr	r3, [pc, #24]	; (4026a0 <ssd1306_set_column_address+0x3c>)
  402686:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_LOW_COL(address & 0x0F));
  402688:	79fb      	ldrb	r3, [r7, #7]
  40268a:	f003 030f 	and.w	r3, r3, #15
  40268e:	b2db      	uxtb	r3, r3
  402690:	4618      	mov	r0, r3
  402692:	4b03      	ldr	r3, [pc, #12]	; (4026a0 <ssd1306_set_column_address+0x3c>)
  402694:	4798      	blx	r3
}
  402696:	bf00      	nop
  402698:	3708      	adds	r7, #8
  40269a:	46bd      	mov	sp, r7
  40269c:	bd80      	pop	{r7, pc}
  40269e:	bf00      	nop
  4026a0:	00402441 	.word	0x00402441

004026a4 <ssd1306_clear>:
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
}

static inline void ssd1306_clear(void)
{
  4026a4:	b580      	push	{r7, lr}
  4026a6:	b082      	sub	sp, #8
  4026a8:	af00      	add	r7, sp, #0
	uint8_t page = 0;
  4026aa:	2300      	movs	r3, #0
  4026ac:	71fb      	strb	r3, [r7, #7]
	uint8_t col = 0;
  4026ae:	2300      	movs	r3, #0
  4026b0:	71bb      	strb	r3, [r7, #6]

	for (page = 0; page < 4; ++page)
  4026b2:	2300      	movs	r3, #0
  4026b4:	71fb      	strb	r3, [r7, #7]
  4026b6:	e016      	b.n	4026e6 <ssd1306_clear+0x42>
	{
		ssd1306_set_page_address(page);
  4026b8:	79fb      	ldrb	r3, [r7, #7]
  4026ba:	4618      	mov	r0, r3
  4026bc:	4b0d      	ldr	r3, [pc, #52]	; (4026f4 <ssd1306_clear+0x50>)
  4026be:	4798      	blx	r3
		ssd1306_set_column_address(0);
  4026c0:	2000      	movs	r0, #0
  4026c2:	4b0d      	ldr	r3, [pc, #52]	; (4026f8 <ssd1306_clear+0x54>)
  4026c4:	4798      	blx	r3
		for (col = 0; col < 128; ++col)
  4026c6:	2300      	movs	r3, #0
  4026c8:	71bb      	strb	r3, [r7, #6]
  4026ca:	e005      	b.n	4026d8 <ssd1306_clear+0x34>
		{
			ssd1306_write_data(0x00);
  4026cc:	2000      	movs	r0, #0
  4026ce:	4b0b      	ldr	r3, [pc, #44]	; (4026fc <ssd1306_clear+0x58>)
  4026d0:	4798      	blx	r3

	for (page = 0; page < 4; ++page)
	{
		ssd1306_set_page_address(page);
		ssd1306_set_column_address(0);
		for (col = 0; col < 128; ++col)
  4026d2:	79bb      	ldrb	r3, [r7, #6]
  4026d4:	3301      	adds	r3, #1
  4026d6:	71bb      	strb	r3, [r7, #6]
  4026d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
  4026dc:	2b00      	cmp	r3, #0
  4026de:	daf5      	bge.n	4026cc <ssd1306_clear+0x28>
static inline void ssd1306_clear(void)
{
	uint8_t page = 0;
	uint8_t col = 0;

	for (page = 0; page < 4; ++page)
  4026e0:	79fb      	ldrb	r3, [r7, #7]
  4026e2:	3301      	adds	r3, #1
  4026e4:	71fb      	strb	r3, [r7, #7]
  4026e6:	79fb      	ldrb	r3, [r7, #7]
  4026e8:	2b03      	cmp	r3, #3
  4026ea:	d9e5      	bls.n	4026b8 <ssd1306_clear+0x14>
		for (col = 0; col < 128; ++col)
		{
			ssd1306_write_data(0x00);
		}
	}
}
  4026ec:	bf00      	nop
  4026ee:	3708      	adds	r7, #8
  4026f0:	46bd      	mov	sp, r7
  4026f2:	bd80      	pop	{r7, pc}
  4026f4:	0040262d 	.word	0x0040262d
  4026f8:	00402665 	.word	0x00402665
  4026fc:	00402539 	.word	0x00402539

00402700 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
  402700:	b580      	push	{r7, lr}
  402702:	b082      	sub	sp, #8
  402704:	af00      	add	r7, sp, #0
  402706:	6078      	str	r0, [r7, #4]
  402708:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_cpu_hz();
  40270a:	4b10      	ldr	r3, [pc, #64]	; (40274c <twi_master_setup+0x4c>)
  40270c:	4798      	blx	r3
  40270e:	4602      	mov	r2, r0
  402710:	683b      	ldr	r3, [r7, #0]
  402712:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
  402714:	683b      	ldr	r3, [r7, #0]
  402716:	2200      	movs	r2, #0
  402718:	725a      	strb	r2, [r3, #9]
	} else {
		// Do Nothing
	}
#else
#if (!(SAMG51 || SAMG53 || SAMG54))
	if (p_twi == TWI0) {
  40271a:	687b      	ldr	r3, [r7, #4]
  40271c:	4a0c      	ldr	r2, [pc, #48]	; (402750 <twi_master_setup+0x50>)
  40271e:	4293      	cmp	r3, r2
  402720:	d103      	bne.n	40272a <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
  402722:	2013      	movs	r0, #19
  402724:	4b0b      	ldr	r3, [pc, #44]	; (402754 <twi_master_setup+0x54>)
  402726:	4798      	blx	r3
  402728:	e006      	b.n	402738 <twi_master_setup+0x38>
	} else
#endif
	if (p_twi == TWI1) {
  40272a:	687b      	ldr	r3, [r7, #4]
  40272c:	4a0a      	ldr	r2, [pc, #40]	; (402758 <twi_master_setup+0x58>)
  40272e:	4293      	cmp	r3, r2
  402730:	d102      	bne.n	402738 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
  402732:	2014      	movs	r0, #20
  402734:	4b07      	ldr	r3, [pc, #28]	; (402754 <twi_master_setup+0x54>)
  402736:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
  402738:	6839      	ldr	r1, [r7, #0]
  40273a:	6878      	ldr	r0, [r7, #4]
  40273c:	4b07      	ldr	r3, [pc, #28]	; (40275c <twi_master_setup+0x5c>)
  40273e:	4798      	blx	r3
  402740:	4603      	mov	r3, r0
}
  402742:	4618      	mov	r0, r3
  402744:	3708      	adds	r7, #8
  402746:	46bd      	mov	sp, r7
  402748:	bd80      	pop	{r7, pc}
  40274a:	bf00      	nop
  40274c:	00402349 	.word	0x00402349
  402750:	40018000 	.word	0x40018000
  402754:	0040235d 	.word	0x0040235d
  402758:	4001c000 	.word	0x4001c000
  40275c:	00401c3d 	.word	0x00401c3d

00402760 <twi_init>:
#define NUNCHUCK_ADDRESS 0x52
//#define LED0 IOPORT_CREATE_PIN( PIOC, 23)

uint8_t nunchuck_data[6];
static void twi_init(void)
{
  402760:	b580      	push	{r7, lr}
  402762:	b084      	sub	sp, #16
  402764:	af00      	add	r7, sp, #0
	twi_master_options_t opt =
  402766:	1d3b      	adds	r3, r7, #4
  402768:	2200      	movs	r2, #0
  40276a:	601a      	str	r2, [r3, #0]
  40276c:	605a      	str	r2, [r3, #4]
  40276e:	609a      	str	r2, [r3, #8]
  402770:	4b06      	ldr	r3, [pc, #24]	; (40278c <twi_init+0x2c>)
  402772:	60bb      	str	r3, [r7, #8]
  402774:	2352      	movs	r3, #82	; 0x52
  402776:	733b      	strb	r3, [r7, #12]
	{
		.speed = 100000,
		.chip = 0x52
	};
	twi_master_setup(TWI0, &opt);
  402778:	1d3b      	adds	r3, r7, #4
  40277a:	4619      	mov	r1, r3
  40277c:	4804      	ldr	r0, [pc, #16]	; (402790 <twi_init+0x30>)
  40277e:	4b05      	ldr	r3, [pc, #20]	; (402794 <twi_init+0x34>)
  402780:	4798      	blx	r3
}
  402782:	bf00      	nop
  402784:	3710      	adds	r7, #16
  402786:	46bd      	mov	sp, r7
  402788:	bd80      	pop	{r7, pc}
  40278a:	bf00      	nop
  40278c:	000186a0 	.word	0x000186a0
  402790:	40018000 	.word	0x40018000
  402794:	00402701 	.word	0x00402701

00402798 <nunchuck_x_axis>:
static uint8_t nunchuck_x_axis() 
{
  402798:	b480      	push	{r7}
  40279a:	af00      	add	r7, sp, #0
	return nunchuck_data[0];
  40279c:	4b02      	ldr	r3, [pc, #8]	; (4027a8 <nunchuck_x_axis+0x10>)
  40279e:	781b      	ldrb	r3, [r3, #0]
}
  4027a0:	4618      	mov	r0, r3
  4027a2:	46bd      	mov	sp, r7
  4027a4:	bc80      	pop	{r7}
  4027a6:	4770      	bx	lr
  4027a8:	200008dc 	.word	0x200008dc

004027ac <nunchuck_read>:
{
	x =  (x ^ 0x17) + 0x17;
	return x;
}
static void nunchuck_read(void)
{
  4027ac:	b580      	push	{r7, lr}
  4027ae:	b08e      	sub	sp, #56	; 0x38
  4027b0:	af00      	add	r7, sp, #0
	uint8_t data_received[6];
	
	twi_packet_t packet_read =
  4027b2:	f107 031c 	add.w	r3, r7, #28
  4027b6:	2200      	movs	r2, #0
  4027b8:	601a      	str	r2, [r3, #0]
  4027ba:	605a      	str	r2, [r3, #4]
  4027bc:	609a      	str	r2, [r3, #8]
  4027be:	60da      	str	r2, [r3, #12]
  4027c0:	611a      	str	r2, [r3, #16]
  4027c2:	2302      	movs	r3, #2
  4027c4:	623b      	str	r3, [r7, #32]
  4027c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
  4027ca:	627b      	str	r3, [r7, #36]	; 0x24
  4027cc:	2306      	movs	r3, #6
  4027ce:	62bb      	str	r3, [r7, #40]	; 0x28
  4027d0:	2352      	movs	r3, #82	; 0x52
  4027d2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		.addr_length = sizeof (uint16_t),
		.chip = NUNCHUCK_ADDRESS,
		.buffer = &data_received,
		.length = 6
	};
	while(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS);
  4027d6:	bf00      	nop
  4027d8:	f107 031c 	add.w	r3, r7, #28
  4027dc:	4619      	mov	r1, r3
  4027de:	481c      	ldr	r0, [pc, #112]	; (402850 <nunchuck_read+0xa4>)
  4027e0:	4b1c      	ldr	r3, [pc, #112]	; (402854 <nunchuck_read+0xa8>)
  4027e2:	4798      	blx	r3
  4027e4:	4603      	mov	r3, r0
  4027e6:	2b00      	cmp	r3, #0
  4027e8:	d1f6      	bne.n	4027d8 <nunchuck_read+0x2c>
	uint8_t i;
	for (i=0; i<6; i++)
  4027ea:	2300      	movs	r3, #0
  4027ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  4027f0:	e00f      	b.n	402812 <nunchuck_read+0x66>
	{
		nunchuck_data[i] = data_received[i];
  4027f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  4027f6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
  4027fa:	f107 0138 	add.w	r1, r7, #56	; 0x38
  4027fe:	440a      	add	r2, r1
  402800:	f812 1c08 	ldrb.w	r1, [r2, #-8]
  402804:	4a14      	ldr	r2, [pc, #80]	; (402858 <nunchuck_read+0xac>)
  402806:	54d1      	strb	r1, [r2, r3]
		.buffer = &data_received,
		.length = 6
	};
	while(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS);
	uint8_t i;
	for (i=0; i<6; i++)
  402808:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  40280c:	3301      	adds	r3, #1
  40280e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  402812:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
  402816:	2b05      	cmp	r3, #5
  402818:	d9eb      	bls.n	4027f2 <nunchuck_read+0x46>
	{
		nunchuck_data[i] = data_received[i];
	}
	const uint8_t emptyByte[] = {0x00};
  40281a:	2300      	movs	r3, #0
  40281c:	763b      	strb	r3, [r7, #24]
	twi_packet_t packet_write =
  40281e:	1d3b      	adds	r3, r7, #4
  402820:	2200      	movs	r2, #0
  402822:	601a      	str	r2, [r3, #0]
  402824:	605a      	str	r2, [r3, #4]
  402826:	609a      	str	r2, [r3, #8]
  402828:	60da      	str	r2, [r3, #12]
  40282a:	611a      	str	r2, [r3, #16]
  40282c:	2302      	movs	r3, #2
  40282e:	60bb      	str	r3, [r7, #8]
  402830:	f107 0318 	add.w	r3, r7, #24
  402834:	60fb      	str	r3, [r7, #12]
  402836:	2301      	movs	r3, #1
  402838:	613b      	str	r3, [r7, #16]
  40283a:	2352      	movs	r3, #82	; 0x52
  40283c:	753b      	strb	r3, [r7, #20]
		.addr_length = sizeof (uint16_t),
		.chip = NUNCHUCK_ADDRESS,
		.buffer = (void *)emptyByte,
		.length = sizeof(emptyByte),
	};
	twi_master_write(TWI0, &packet_write);
  40283e:	1d3b      	adds	r3, r7, #4
  402840:	4619      	mov	r1, r3
  402842:	4803      	ldr	r0, [pc, #12]	; (402850 <nunchuck_read+0xa4>)
  402844:	4b05      	ldr	r3, [pc, #20]	; (40285c <nunchuck_read+0xb0>)
  402846:	4798      	blx	r3
}
  402848:	bf00      	nop
  40284a:	3738      	adds	r7, #56	; 0x38
  40284c:	46bd      	mov	sp, r7
  40284e:	bd80      	pop	{r7, pc}
  402850:	40018000 	.word	0x40018000
  402854:	00401d6d 	.word	0x00401d6d
  402858:	200008dc 	.word	0x200008dc
  40285c:	00401e79 	.word	0x00401e79

00402860 <nunchuck_init>:
static void nunchuck_init(void)
{
  402860:	b580      	push	{r7, lr}
  402862:	b08c      	sub	sp, #48	; 0x30
  402864:	af00      	add	r7, sp, #0
	const uint8_t handshake1[] = {0x40, 0x00};
  402866:	2340      	movs	r3, #64	; 0x40
  402868:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  40286c:	2300      	movs	r3, #0
  40286e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	const uint8_t handshake2[] = {0x00};
  402872:	2300      	movs	r3, #0
  402874:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	twi_packet_t packet_write1 =
  402878:	f107 0314 	add.w	r3, r7, #20
  40287c:	2200      	movs	r2, #0
  40287e:	601a      	str	r2, [r3, #0]
  402880:	605a      	str	r2, [r3, #4]
  402882:	609a      	str	r2, [r3, #8]
  402884:	60da      	str	r2, [r3, #12]
  402886:	611a      	str	r2, [r3, #16]
  402888:	2302      	movs	r3, #2
  40288a:	61bb      	str	r3, [r7, #24]
  40288c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
  402890:	61fb      	str	r3, [r7, #28]
  402892:	2302      	movs	r3, #2
  402894:	623b      	str	r3, [r7, #32]
  402896:	2352      	movs	r3, #82	; 0x52
  402898:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		.addr_length = sizeof (uint16_t),
		.chip = NUNCHUCK_ADDRESS,
		.buffer = (void *)handshake1,
		.length = sizeof(handshake1)
	};
	twi_packet_t packet_write2 =
  40289c:	463b      	mov	r3, r7
  40289e:	2200      	movs	r2, #0
  4028a0:	601a      	str	r2, [r3, #0]
  4028a2:	605a      	str	r2, [r3, #4]
  4028a4:	609a      	str	r2, [r3, #8]
  4028a6:	60da      	str	r2, [r3, #12]
  4028a8:	611a      	str	r2, [r3, #16]
  4028aa:	2302      	movs	r3, #2
  4028ac:	607b      	str	r3, [r7, #4]
  4028ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
  4028b2:	60bb      	str	r3, [r7, #8]
  4028b4:	2301      	movs	r3, #1
  4028b6:	60fb      	str	r3, [r7, #12]
  4028b8:	2352      	movs	r3, #82	; 0x52
  4028ba:	743b      	strb	r3, [r7, #16]
		.addr_length = sizeof (uint16_t),
		.chip = NUNCHUCK_ADDRESS,
		.buffer = (void *)handshake2,
		.length = sizeof(handshake2)
	};
	while(twi_master_write(TWI0, &packet_write1) != TWI_SUCCESS);
  4028bc:	bf00      	nop
  4028be:	f107 0314 	add.w	r3, r7, #20
  4028c2:	4619      	mov	r1, r3
  4028c4:	4809      	ldr	r0, [pc, #36]	; (4028ec <nunchuck_init+0x8c>)
  4028c6:	4b0a      	ldr	r3, [pc, #40]	; (4028f0 <nunchuck_init+0x90>)
  4028c8:	4798      	blx	r3
  4028ca:	4603      	mov	r3, r0
  4028cc:	2b00      	cmp	r3, #0
  4028ce:	d1f6      	bne.n	4028be <nunchuck_init+0x5e>
	while(twi_master_write(TWI0, &packet_write2) != TWI_SUCCESS);
  4028d0:	bf00      	nop
  4028d2:	463b      	mov	r3, r7
  4028d4:	4619      	mov	r1, r3
  4028d6:	4805      	ldr	r0, [pc, #20]	; (4028ec <nunchuck_init+0x8c>)
  4028d8:	4b05      	ldr	r3, [pc, #20]	; (4028f0 <nunchuck_init+0x90>)
  4028da:	4798      	blx	r3
  4028dc:	4603      	mov	r3, r0
  4028de:	2b00      	cmp	r3, #0
  4028e0:	d1f7      	bne.n	4028d2 <nunchuck_init+0x72>
	
}
  4028e2:	bf00      	nop
  4028e4:	3730      	adds	r7, #48	; 0x30
  4028e6:	46bd      	mov	sp, r7
  4028e8:	bd80      	pop	{r7, pc}
  4028ea:	bf00      	nop
  4028ec:	40018000 	.word	0x40018000
  4028f0:	00401e79 	.word	0x00401e79

004028f4 <main>:

int main(void)
{
  4028f4:	b580      	push	{r7, lr}
  4028f6:	af00      	add	r7, sp, #0
	sysclk_init();
  4028f8:	4b11      	ldr	r3, [pc, #68]	; (402940 <main+0x4c>)
  4028fa:	4798      	blx	r3
	board_init();
  4028fc:	4b11      	ldr	r3, [pc, #68]	; (402944 <main+0x50>)
  4028fe:	4798      	blx	r3
	ssd1306_init();
  402900:	4b11      	ldr	r3, [pc, #68]	; (402948 <main+0x54>)
  402902:	4798      	blx	r3
	ssd1306_clear();
  402904:	4b11      	ldr	r3, [pc, #68]	; (40294c <main+0x58>)
  402906:	4798      	blx	r3
	
	twi_init();
  402908:	4b11      	ldr	r3, [pc, #68]	; (402950 <main+0x5c>)
  40290a:	4798      	blx	r3
	nunchuck_init();
  40290c:	4b11      	ldr	r3, [pc, #68]	; (402954 <main+0x60>)
  40290e:	4798      	blx	r3
	ioport_set_pin_dir( LED0, IOPORT_DIR_OUTPUT );
  402910:	2101      	movs	r1, #1
  402912:	2057      	movs	r0, #87	; 0x57
  402914:	4b10      	ldr	r3, [pc, #64]	; (402958 <main+0x64>)
  402916:	4798      	blx	r3
	while(true)
	{
		ssd1306_clear();
  402918:	4b0c      	ldr	r3, [pc, #48]	; (40294c <main+0x58>)
  40291a:	4798      	blx	r3
		ssd1306_set_column_address(95);
  40291c:	205f      	movs	r0, #95	; 0x5f
  40291e:	4b0f      	ldr	r3, [pc, #60]	; (40295c <main+0x68>)
  402920:	4798      	blx	r3
		ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(0));
  402922:	20b0      	movs	r0, #176	; 0xb0
  402924:	4b0e      	ldr	r3, [pc, #56]	; (402960 <main+0x6c>)
  402926:	4798      	blx	r3
		nunchuck_read();
  402928:	4b0e      	ldr	r3, [pc, #56]	; (402964 <main+0x70>)
  40292a:	4798      	blx	r3
		ssd1306_write_text("X-axis: ");
  40292c:	480e      	ldr	r0, [pc, #56]	; (402968 <main+0x74>)
  40292e:	4b0f      	ldr	r3, [pc, #60]	; (40296c <main+0x78>)
  402930:	4798      	blx	r3
		ssd1306_write_data(nunchuck_x_axis());
  402932:	4b0f      	ldr	r3, [pc, #60]	; (402970 <main+0x7c>)
  402934:	4798      	blx	r3
  402936:	4603      	mov	r3, r0
  402938:	4618      	mov	r0, r3
  40293a:	4b0e      	ldr	r3, [pc, #56]	; (402974 <main+0x80>)
  40293c:	4798      	blx	r3
	}
  40293e:	e7eb      	b.n	402918 <main+0x24>
  402940:	00400a05 	.word	0x00400a05
  402944:	00401039 	.word	0x00401039
  402948:	00400611 	.word	0x00400611
  40294c:	004026a5 	.word	0x004026a5
  402950:	00402761 	.word	0x00402761
  402954:	00402861 	.word	0x00402861
  402958:	00402379 	.word	0x00402379
  40295c:	00402665 	.word	0x00402665
  402960:	00402441 	.word	0x00402441
  402964:	004027ad 	.word	0x004027ad
  402968:	00402dcc 	.word	0x00402dcc
  40296c:	004006b5 	.word	0x004006b5
  402970:	00402799 	.word	0x00402799
  402974:	00402539 	.word	0x00402539

00402978 <__aeabi_uldivmod>:
  402978:	b953      	cbnz	r3, 402990 <__aeabi_uldivmod+0x18>
  40297a:	b94a      	cbnz	r2, 402990 <__aeabi_uldivmod+0x18>
  40297c:	2900      	cmp	r1, #0
  40297e:	bf08      	it	eq
  402980:	2800      	cmpeq	r0, #0
  402982:	bf1c      	itt	ne
  402984:	f04f 31ff 	movne.w	r1, #4294967295
  402988:	f04f 30ff 	movne.w	r0, #4294967295
  40298c:	f000 b97e 	b.w	402c8c <__aeabi_idiv0>
  402990:	f1ad 0c08 	sub.w	ip, sp, #8
  402994:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  402998:	f000 f806 	bl	4029a8 <__udivmoddi4>
  40299c:	f8dd e004 	ldr.w	lr, [sp, #4]
  4029a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4029a4:	b004      	add	sp, #16
  4029a6:	4770      	bx	lr

004029a8 <__udivmoddi4>:
  4029a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4029ac:	468c      	mov	ip, r1
  4029ae:	460e      	mov	r6, r1
  4029b0:	4604      	mov	r4, r0
  4029b2:	9d08      	ldr	r5, [sp, #32]
  4029b4:	2b00      	cmp	r3, #0
  4029b6:	d150      	bne.n	402a5a <__udivmoddi4+0xb2>
  4029b8:	428a      	cmp	r2, r1
  4029ba:	4617      	mov	r7, r2
  4029bc:	d96c      	bls.n	402a98 <__udivmoddi4+0xf0>
  4029be:	fab2 fe82 	clz	lr, r2
  4029c2:	f1be 0f00 	cmp.w	lr, #0
  4029c6:	d00b      	beq.n	4029e0 <__udivmoddi4+0x38>
  4029c8:	f1ce 0420 	rsb	r4, lr, #32
  4029cc:	fa20 f404 	lsr.w	r4, r0, r4
  4029d0:	fa01 f60e 	lsl.w	r6, r1, lr
  4029d4:	ea44 0c06 	orr.w	ip, r4, r6
  4029d8:	fa02 f70e 	lsl.w	r7, r2, lr
  4029dc:	fa00 f40e 	lsl.w	r4, r0, lr
  4029e0:	ea4f 4917 	mov.w	r9, r7, lsr #16
  4029e4:	0c22      	lsrs	r2, r4, #16
  4029e6:	fbbc f0f9 	udiv	r0, ip, r9
  4029ea:	fa1f f887 	uxth.w	r8, r7
  4029ee:	fb09 c610 	mls	r6, r9, r0, ip
  4029f2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  4029f6:	fb00 f308 	mul.w	r3, r0, r8
  4029fa:	42b3      	cmp	r3, r6
  4029fc:	d909      	bls.n	402a12 <__udivmoddi4+0x6a>
  4029fe:	19f6      	adds	r6, r6, r7
  402a00:	f100 32ff 	add.w	r2, r0, #4294967295
  402a04:	f080 8122 	bcs.w	402c4c <__udivmoddi4+0x2a4>
  402a08:	42b3      	cmp	r3, r6
  402a0a:	f240 811f 	bls.w	402c4c <__udivmoddi4+0x2a4>
  402a0e:	3802      	subs	r0, #2
  402a10:	443e      	add	r6, r7
  402a12:	1af6      	subs	r6, r6, r3
  402a14:	b2a2      	uxth	r2, r4
  402a16:	fbb6 f3f9 	udiv	r3, r6, r9
  402a1a:	fb09 6613 	mls	r6, r9, r3, r6
  402a1e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  402a22:	fb03 f808 	mul.w	r8, r3, r8
  402a26:	45a0      	cmp	r8, r4
  402a28:	d909      	bls.n	402a3e <__udivmoddi4+0x96>
  402a2a:	19e4      	adds	r4, r4, r7
  402a2c:	f103 32ff 	add.w	r2, r3, #4294967295
  402a30:	f080 810a 	bcs.w	402c48 <__udivmoddi4+0x2a0>
  402a34:	45a0      	cmp	r8, r4
  402a36:	f240 8107 	bls.w	402c48 <__udivmoddi4+0x2a0>
  402a3a:	3b02      	subs	r3, #2
  402a3c:	443c      	add	r4, r7
  402a3e:	ebc8 0404 	rsb	r4, r8, r4
  402a42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  402a46:	2100      	movs	r1, #0
  402a48:	2d00      	cmp	r5, #0
  402a4a:	d062      	beq.n	402b12 <__udivmoddi4+0x16a>
  402a4c:	fa24 f40e 	lsr.w	r4, r4, lr
  402a50:	2300      	movs	r3, #0
  402a52:	602c      	str	r4, [r5, #0]
  402a54:	606b      	str	r3, [r5, #4]
  402a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a5a:	428b      	cmp	r3, r1
  402a5c:	d907      	bls.n	402a6e <__udivmoddi4+0xc6>
  402a5e:	2d00      	cmp	r5, #0
  402a60:	d055      	beq.n	402b0e <__udivmoddi4+0x166>
  402a62:	2100      	movs	r1, #0
  402a64:	e885 0041 	stmia.w	r5, {r0, r6}
  402a68:	4608      	mov	r0, r1
  402a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a6e:	fab3 f183 	clz	r1, r3
  402a72:	2900      	cmp	r1, #0
  402a74:	f040 8090 	bne.w	402b98 <__udivmoddi4+0x1f0>
  402a78:	42b3      	cmp	r3, r6
  402a7a:	d302      	bcc.n	402a82 <__udivmoddi4+0xda>
  402a7c:	4282      	cmp	r2, r0
  402a7e:	f200 80f8 	bhi.w	402c72 <__udivmoddi4+0x2ca>
  402a82:	1a84      	subs	r4, r0, r2
  402a84:	eb66 0603 	sbc.w	r6, r6, r3
  402a88:	2001      	movs	r0, #1
  402a8a:	46b4      	mov	ip, r6
  402a8c:	2d00      	cmp	r5, #0
  402a8e:	d040      	beq.n	402b12 <__udivmoddi4+0x16a>
  402a90:	e885 1010 	stmia.w	r5, {r4, ip}
  402a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402a98:	b912      	cbnz	r2, 402aa0 <__udivmoddi4+0xf8>
  402a9a:	2701      	movs	r7, #1
  402a9c:	fbb7 f7f2 	udiv	r7, r7, r2
  402aa0:	fab7 fe87 	clz	lr, r7
  402aa4:	f1be 0f00 	cmp.w	lr, #0
  402aa8:	d135      	bne.n	402b16 <__udivmoddi4+0x16e>
  402aaa:	1bf3      	subs	r3, r6, r7
  402aac:	ea4f 4817 	mov.w	r8, r7, lsr #16
  402ab0:	fa1f fc87 	uxth.w	ip, r7
  402ab4:	2101      	movs	r1, #1
  402ab6:	fbb3 f0f8 	udiv	r0, r3, r8
  402aba:	0c22      	lsrs	r2, r4, #16
  402abc:	fb08 3610 	mls	r6, r8, r0, r3
  402ac0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
  402ac4:	fb0c f300 	mul.w	r3, ip, r0
  402ac8:	42b3      	cmp	r3, r6
  402aca:	d907      	bls.n	402adc <__udivmoddi4+0x134>
  402acc:	19f6      	adds	r6, r6, r7
  402ace:	f100 32ff 	add.w	r2, r0, #4294967295
  402ad2:	d202      	bcs.n	402ada <__udivmoddi4+0x132>
  402ad4:	42b3      	cmp	r3, r6
  402ad6:	f200 80ce 	bhi.w	402c76 <__udivmoddi4+0x2ce>
  402ada:	4610      	mov	r0, r2
  402adc:	1af6      	subs	r6, r6, r3
  402ade:	b2a2      	uxth	r2, r4
  402ae0:	fbb6 f3f8 	udiv	r3, r6, r8
  402ae4:	fb08 6613 	mls	r6, r8, r3, r6
  402ae8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
  402aec:	fb0c fc03 	mul.w	ip, ip, r3
  402af0:	45a4      	cmp	ip, r4
  402af2:	d907      	bls.n	402b04 <__udivmoddi4+0x15c>
  402af4:	19e4      	adds	r4, r4, r7
  402af6:	f103 32ff 	add.w	r2, r3, #4294967295
  402afa:	d202      	bcs.n	402b02 <__udivmoddi4+0x15a>
  402afc:	45a4      	cmp	ip, r4
  402afe:	f200 80b5 	bhi.w	402c6c <__udivmoddi4+0x2c4>
  402b02:	4613      	mov	r3, r2
  402b04:	ebcc 0404 	rsb	r4, ip, r4
  402b08:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
  402b0c:	e79c      	b.n	402a48 <__udivmoddi4+0xa0>
  402b0e:	4629      	mov	r1, r5
  402b10:	4628      	mov	r0, r5
  402b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402b16:	f1ce 0120 	rsb	r1, lr, #32
  402b1a:	fa06 f30e 	lsl.w	r3, r6, lr
  402b1e:	fa07 f70e 	lsl.w	r7, r7, lr
  402b22:	fa20 f901 	lsr.w	r9, r0, r1
  402b26:	ea4f 4817 	mov.w	r8, r7, lsr #16
  402b2a:	40ce      	lsrs	r6, r1
  402b2c:	ea49 0903 	orr.w	r9, r9, r3
  402b30:	fbb6 faf8 	udiv	sl, r6, r8
  402b34:	ea4f 4419 	mov.w	r4, r9, lsr #16
  402b38:	fb08 661a 	mls	r6, r8, sl, r6
  402b3c:	fa1f fc87 	uxth.w	ip, r7
  402b40:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
  402b44:	fb0a f20c 	mul.w	r2, sl, ip
  402b48:	429a      	cmp	r2, r3
  402b4a:	fa00 f40e 	lsl.w	r4, r0, lr
  402b4e:	d90a      	bls.n	402b66 <__udivmoddi4+0x1be>
  402b50:	19db      	adds	r3, r3, r7
  402b52:	f10a 31ff 	add.w	r1, sl, #4294967295
  402b56:	f080 8087 	bcs.w	402c68 <__udivmoddi4+0x2c0>
  402b5a:	429a      	cmp	r2, r3
  402b5c:	f240 8084 	bls.w	402c68 <__udivmoddi4+0x2c0>
  402b60:	f1aa 0a02 	sub.w	sl, sl, #2
  402b64:	443b      	add	r3, r7
  402b66:	1a9b      	subs	r3, r3, r2
  402b68:	fa1f f989 	uxth.w	r9, r9
  402b6c:	fbb3 f1f8 	udiv	r1, r3, r8
  402b70:	fb08 3311 	mls	r3, r8, r1, r3
  402b74:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
  402b78:	fb01 f60c 	mul.w	r6, r1, ip
  402b7c:	429e      	cmp	r6, r3
  402b7e:	d907      	bls.n	402b90 <__udivmoddi4+0x1e8>
  402b80:	19db      	adds	r3, r3, r7
  402b82:	f101 32ff 	add.w	r2, r1, #4294967295
  402b86:	d26b      	bcs.n	402c60 <__udivmoddi4+0x2b8>
  402b88:	429e      	cmp	r6, r3
  402b8a:	d969      	bls.n	402c60 <__udivmoddi4+0x2b8>
  402b8c:	3902      	subs	r1, #2
  402b8e:	443b      	add	r3, r7
  402b90:	1b9b      	subs	r3, r3, r6
  402b92:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
  402b96:	e78e      	b.n	402ab6 <__udivmoddi4+0x10e>
  402b98:	f1c1 0e20 	rsb	lr, r1, #32
  402b9c:	fa22 f40e 	lsr.w	r4, r2, lr
  402ba0:	408b      	lsls	r3, r1
  402ba2:	4323      	orrs	r3, r4
  402ba4:	fa20 f70e 	lsr.w	r7, r0, lr
  402ba8:	fa06 f401 	lsl.w	r4, r6, r1
  402bac:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  402bb0:	fa26 f60e 	lsr.w	r6, r6, lr
  402bb4:	433c      	orrs	r4, r7
  402bb6:	fbb6 f9fc 	udiv	r9, r6, ip
  402bba:	0c27      	lsrs	r7, r4, #16
  402bbc:	fb0c 6619 	mls	r6, ip, r9, r6
  402bc0:	fa1f f883 	uxth.w	r8, r3
  402bc4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
  402bc8:	fb09 f708 	mul.w	r7, r9, r8
  402bcc:	42b7      	cmp	r7, r6
  402bce:	fa02 f201 	lsl.w	r2, r2, r1
  402bd2:	fa00 fa01 	lsl.w	sl, r0, r1
  402bd6:	d908      	bls.n	402bea <__udivmoddi4+0x242>
  402bd8:	18f6      	adds	r6, r6, r3
  402bda:	f109 30ff 	add.w	r0, r9, #4294967295
  402bde:	d241      	bcs.n	402c64 <__udivmoddi4+0x2bc>
  402be0:	42b7      	cmp	r7, r6
  402be2:	d93f      	bls.n	402c64 <__udivmoddi4+0x2bc>
  402be4:	f1a9 0902 	sub.w	r9, r9, #2
  402be8:	441e      	add	r6, r3
  402bea:	1bf6      	subs	r6, r6, r7
  402bec:	b2a0      	uxth	r0, r4
  402bee:	fbb6 f4fc 	udiv	r4, r6, ip
  402bf2:	fb0c 6614 	mls	r6, ip, r4, r6
  402bf6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
  402bfa:	fb04 f808 	mul.w	r8, r4, r8
  402bfe:	45b8      	cmp	r8, r7
  402c00:	d907      	bls.n	402c12 <__udivmoddi4+0x26a>
  402c02:	18ff      	adds	r7, r7, r3
  402c04:	f104 30ff 	add.w	r0, r4, #4294967295
  402c08:	d228      	bcs.n	402c5c <__udivmoddi4+0x2b4>
  402c0a:	45b8      	cmp	r8, r7
  402c0c:	d926      	bls.n	402c5c <__udivmoddi4+0x2b4>
  402c0e:	3c02      	subs	r4, #2
  402c10:	441f      	add	r7, r3
  402c12:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
  402c16:	ebc8 0707 	rsb	r7, r8, r7
  402c1a:	fba0 8902 	umull	r8, r9, r0, r2
  402c1e:	454f      	cmp	r7, r9
  402c20:	4644      	mov	r4, r8
  402c22:	464e      	mov	r6, r9
  402c24:	d314      	bcc.n	402c50 <__udivmoddi4+0x2a8>
  402c26:	d029      	beq.n	402c7c <__udivmoddi4+0x2d4>
  402c28:	b365      	cbz	r5, 402c84 <__udivmoddi4+0x2dc>
  402c2a:	ebba 0304 	subs.w	r3, sl, r4
  402c2e:	eb67 0706 	sbc.w	r7, r7, r6
  402c32:	fa07 fe0e 	lsl.w	lr, r7, lr
  402c36:	40cb      	lsrs	r3, r1
  402c38:	40cf      	lsrs	r7, r1
  402c3a:	ea4e 0303 	orr.w	r3, lr, r3
  402c3e:	e885 0088 	stmia.w	r5, {r3, r7}
  402c42:	2100      	movs	r1, #0
  402c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c48:	4613      	mov	r3, r2
  402c4a:	e6f8      	b.n	402a3e <__udivmoddi4+0x96>
  402c4c:	4610      	mov	r0, r2
  402c4e:	e6e0      	b.n	402a12 <__udivmoddi4+0x6a>
  402c50:	ebb8 0402 	subs.w	r4, r8, r2
  402c54:	eb69 0603 	sbc.w	r6, r9, r3
  402c58:	3801      	subs	r0, #1
  402c5a:	e7e5      	b.n	402c28 <__udivmoddi4+0x280>
  402c5c:	4604      	mov	r4, r0
  402c5e:	e7d8      	b.n	402c12 <__udivmoddi4+0x26a>
  402c60:	4611      	mov	r1, r2
  402c62:	e795      	b.n	402b90 <__udivmoddi4+0x1e8>
  402c64:	4681      	mov	r9, r0
  402c66:	e7c0      	b.n	402bea <__udivmoddi4+0x242>
  402c68:	468a      	mov	sl, r1
  402c6a:	e77c      	b.n	402b66 <__udivmoddi4+0x1be>
  402c6c:	3b02      	subs	r3, #2
  402c6e:	443c      	add	r4, r7
  402c70:	e748      	b.n	402b04 <__udivmoddi4+0x15c>
  402c72:	4608      	mov	r0, r1
  402c74:	e70a      	b.n	402a8c <__udivmoddi4+0xe4>
  402c76:	3802      	subs	r0, #2
  402c78:	443e      	add	r6, r7
  402c7a:	e72f      	b.n	402adc <__udivmoddi4+0x134>
  402c7c:	45c2      	cmp	sl, r8
  402c7e:	d3e7      	bcc.n	402c50 <__udivmoddi4+0x2a8>
  402c80:	463e      	mov	r6, r7
  402c82:	e7d1      	b.n	402c28 <__udivmoddi4+0x280>
  402c84:	4629      	mov	r1, r5
  402c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402c8a:	bf00      	nop

00402c8c <__aeabi_idiv0>:
  402c8c:	4770      	bx	lr
  402c8e:	bf00      	nop

00402c90 <__libc_init_array>:
  402c90:	b570      	push	{r4, r5, r6, lr}
  402c92:	4e0f      	ldr	r6, [pc, #60]	; (402cd0 <__libc_init_array+0x40>)
  402c94:	4d0f      	ldr	r5, [pc, #60]	; (402cd4 <__libc_init_array+0x44>)
  402c96:	1b76      	subs	r6, r6, r5
  402c98:	10b6      	asrs	r6, r6, #2
  402c9a:	bf18      	it	ne
  402c9c:	2400      	movne	r4, #0
  402c9e:	d005      	beq.n	402cac <__libc_init_array+0x1c>
  402ca0:	3401      	adds	r4, #1
  402ca2:	f855 3b04 	ldr.w	r3, [r5], #4
  402ca6:	4798      	blx	r3
  402ca8:	42a6      	cmp	r6, r4
  402caa:	d1f9      	bne.n	402ca0 <__libc_init_array+0x10>
  402cac:	4e0a      	ldr	r6, [pc, #40]	; (402cd8 <__libc_init_array+0x48>)
  402cae:	4d0b      	ldr	r5, [pc, #44]	; (402cdc <__libc_init_array+0x4c>)
  402cb0:	1b76      	subs	r6, r6, r5
  402cb2:	f000 f895 	bl	402de0 <_init>
  402cb6:	10b6      	asrs	r6, r6, #2
  402cb8:	bf18      	it	ne
  402cba:	2400      	movne	r4, #0
  402cbc:	d006      	beq.n	402ccc <__libc_init_array+0x3c>
  402cbe:	3401      	adds	r4, #1
  402cc0:	f855 3b04 	ldr.w	r3, [r5], #4
  402cc4:	4798      	blx	r3
  402cc6:	42a6      	cmp	r6, r4
  402cc8:	d1f9      	bne.n	402cbe <__libc_init_array+0x2e>
  402cca:	bd70      	pop	{r4, r5, r6, pc}
  402ccc:	bd70      	pop	{r4, r5, r6, pc}
  402cce:	bf00      	nop
  402cd0:	00402dec 	.word	0x00402dec
  402cd4:	00402dec 	.word	0x00402dec
  402cd8:	00402df4 	.word	0x00402df4
  402cdc:	00402dec 	.word	0x00402dec

00402ce0 <register_fini>:
  402ce0:	4b02      	ldr	r3, [pc, #8]	; (402cec <register_fini+0xc>)
  402ce2:	b113      	cbz	r3, 402cea <register_fini+0xa>
  402ce4:	4802      	ldr	r0, [pc, #8]	; (402cf0 <register_fini+0x10>)
  402ce6:	f000 b805 	b.w	402cf4 <atexit>
  402cea:	4770      	bx	lr
  402cec:	00000000 	.word	0x00000000
  402cf0:	00402d01 	.word	0x00402d01

00402cf4 <atexit>:
  402cf4:	2300      	movs	r3, #0
  402cf6:	4601      	mov	r1, r0
  402cf8:	461a      	mov	r2, r3
  402cfa:	4618      	mov	r0, r3
  402cfc:	f000 b814 	b.w	402d28 <__register_exitproc>

00402d00 <__libc_fini_array>:
  402d00:	b538      	push	{r3, r4, r5, lr}
  402d02:	4d07      	ldr	r5, [pc, #28]	; (402d20 <__libc_fini_array+0x20>)
  402d04:	4c07      	ldr	r4, [pc, #28]	; (402d24 <__libc_fini_array+0x24>)
  402d06:	1b2c      	subs	r4, r5, r4
  402d08:	10a4      	asrs	r4, r4, #2
  402d0a:	d005      	beq.n	402d18 <__libc_fini_array+0x18>
  402d0c:	3c01      	subs	r4, #1
  402d0e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
  402d12:	4798      	blx	r3
  402d14:	2c00      	cmp	r4, #0
  402d16:	d1f9      	bne.n	402d0c <__libc_fini_array+0xc>
  402d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  402d1c:	f000 b86a 	b.w	402df4 <_fini>
  402d20:	00402e04 	.word	0x00402e04
  402d24:	00402e00 	.word	0x00402e00

00402d28 <__register_exitproc>:
  402d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402d2c:	4c25      	ldr	r4, [pc, #148]	; (402dc4 <__register_exitproc+0x9c>)
  402d2e:	6825      	ldr	r5, [r4, #0]
  402d30:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  402d34:	4606      	mov	r6, r0
  402d36:	4688      	mov	r8, r1
  402d38:	4692      	mov	sl, r2
  402d3a:	4699      	mov	r9, r3
  402d3c:	b3c4      	cbz	r4, 402db0 <__register_exitproc+0x88>
  402d3e:	6860      	ldr	r0, [r4, #4]
  402d40:	281f      	cmp	r0, #31
  402d42:	dc17      	bgt.n	402d74 <__register_exitproc+0x4c>
  402d44:	1c43      	adds	r3, r0, #1
  402d46:	b176      	cbz	r6, 402d66 <__register_exitproc+0x3e>
  402d48:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  402d4c:	2201      	movs	r2, #1
  402d4e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  402d52:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  402d56:	4082      	lsls	r2, r0
  402d58:	4311      	orrs	r1, r2
  402d5a:	2e02      	cmp	r6, #2
  402d5c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  402d60:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  402d64:	d01e      	beq.n	402da4 <__register_exitproc+0x7c>
  402d66:	3002      	adds	r0, #2
  402d68:	6063      	str	r3, [r4, #4]
  402d6a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  402d6e:	2000      	movs	r0, #0
  402d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402d74:	4b14      	ldr	r3, [pc, #80]	; (402dc8 <__register_exitproc+0xa0>)
  402d76:	b303      	cbz	r3, 402dba <__register_exitproc+0x92>
  402d78:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402d7c:	f3af 8000 	nop.w
  402d80:	4604      	mov	r4, r0
  402d82:	b1d0      	cbz	r0, 402dba <__register_exitproc+0x92>
  402d84:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  402d88:	2700      	movs	r7, #0
  402d8a:	e880 0088 	stmia.w	r0, {r3, r7}
  402d8e:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402d92:	4638      	mov	r0, r7
  402d94:	2301      	movs	r3, #1
  402d96:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  402d9a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  402d9e:	2e00      	cmp	r6, #0
  402da0:	d0e1      	beq.n	402d66 <__register_exitproc+0x3e>
  402da2:	e7d1      	b.n	402d48 <__register_exitproc+0x20>
  402da4:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  402da8:	430a      	orrs	r2, r1
  402daa:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  402dae:	e7da      	b.n	402d66 <__register_exitproc+0x3e>
  402db0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  402db4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  402db8:	e7c1      	b.n	402d3e <__register_exitproc+0x16>
  402dba:	f04f 30ff 	mov.w	r0, #4294967295
  402dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402dc2:	bf00      	nop
  402dc4:	00402ddc 	.word	0x00402ddc
  402dc8:	00000000 	.word	0x00000000
  402dcc:	78612d58 	.word	0x78612d58
  402dd0:	203a7369 	.word	0x203a7369
  402dd4:	00000000 	.word	0x00000000
  402dd8:	00000043 	.word	0x00000043

00402ddc <_global_impure_ptr>:
  402ddc:	20000420                                 .. 

00402de0 <_init>:
  402de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402de2:	bf00      	nop
  402de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402de6:	bc08      	pop	{r3}
  402de8:	469e      	mov	lr, r3
  402dea:	4770      	bx	lr

00402dec <__init_array_start>:
  402dec:	00402ce1 	.word	0x00402ce1

00402df0 <__frame_dummy_init_array_entry>:
  402df0:	004000f1                                ..@.

00402df4 <_fini>:
  402df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402df6:	bf00      	nop
  402df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402dfa:	bc08      	pop	{r3}
  402dfc:	469e      	mov	lr, r3
  402dfe:	4770      	bx	lr

00402e00 <__fini_array_start>:
  402e00:	004000cd 	.word	0x004000cd

Disassembly of section .relocate:

20000000 <portable_delay_cycles>:
#include "cycle_counter.h"

// Delay loop is put to SRAM so that FWS will not affect delay time
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
20000000:	b480      	push	{r7}
20000002:	b083      	sub	sp, #12
20000004:	af00      	add	r7, sp, #0
20000006:	6078      	str	r0, [r7, #4]

20000008 <loop>:
	UNUSED(n);

	__asm (
20000008:	f3bf 8f5f 	dmb	sy
2000000c:	3801      	subs	r0, #1
2000000e:	d1fb      	bne.n	20000008 <loop>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
20000010:	bf00      	nop
20000012:	370c      	adds	r7, #12
20000014:	46bd      	mov	sp, r7
20000016:	bc80      	pop	{r7}
20000018:	4770      	bx	lr
2000001a:	bf00      	nop

2000001c <font_table>:
2000001c:	0198 2000 019c 2000 01a0 2000 01a4 2000     ... ... ... ... 
2000002c:	01ac 2000 01b4 2000 01bc 2000 01c4 2000     ... ... ... ... 
2000003c:	01c8 2000 01cc 2000 01d0 2000 01d4 2000     ... ... ... ... 
2000004c:	01d8 2000 01dc 2000 01e0 2000 01e4 2000     ... ... ... ... 
2000005c:	01e8 2000 01f0 2000 01f8 2000 0200 2000     ... ... ... ... 
2000006c:	0208 2000 0210 2000 0218 2000 0220 2000     ... ... ...  .. 
2000007c:	0228 2000 0230 2000 0238 2000 023c 2000     (.. 0.. 8.. <.. 
2000008c:	0240 2000 0248 2000 0250 2000 0258 2000     @.. H.. P.. X.. 
2000009c:	0260 2000 026c 2000 0274 2000 027c 2000     `.. l.. t.. |.. 
200000ac:	0284 2000 028c 2000 0294 2000 029c 2000     ... ... ... ... 
200000bc:	02a4 2000 02ac 2000 02b0 2000 02b8 2000     ... ... ... ... 
200000cc:	02c0 2000 02c8 2000 02d0 2000 02d8 2000     ... ... ... ... 
200000dc:	02e0 2000 02e8 2000 02f0 2000 02f8 2000     ... ... ... ... 
200000ec:	0300 2000 0308 2000 0310 2000 0318 2000     ... ... ... ... 
200000fc:	0320 2000 0328 2000 0330 2000 0338 2000      .. (.. 0.. 8.. 
2000010c:	033c 2000 0340 2000 0344 2000 0348 2000     <.. @.. D.. H.. 
2000011c:	034c 2000 0350 2000 0358 2000 0360 2000     L.. P.. X.. `.. 
2000012c:	0368 2000 0370 2000 0378 2000 037c 2000     h.. p.. x.. |.. 
2000013c:	0384 2000 038c 2000 0390 2000 0394 2000     ... ... ... ... 
2000014c:	039c 2000 03a0 2000 03a8 2000 03b0 2000     ... ... ... ... 
2000015c:	03b8 2000 03c0 2000 03c8 2000 03cc 2000     ... ... ... ... 
2000016c:	03d4 2000 03d8 2000 03e0 2000 03e8 2000     ... ... ... ... 
2000017c:	03f0 2000 03f8 2000 0400 2000 0404 2000     ... ... ... ... 
2000018c:	0408 2000 040c 2000 0410 2000               ... ... ... 

20000198 <Font08px_32>:
20000198:	0002 0000                                   ....

2000019c <Font08px_33>:
2000019c:	be01 0000                                   ....

200001a0 <Font08px_34>:
200001a0:	0603 0600                                   ....

200001a4 <Font08px_35>:
200001a4:	2805 28fe 28fe 0000                         .(.(.(..

200001ac <Font08px_36>:
200001ac:	4805 fe54 2454 0000                         .HT.T$..

200001b4 <Font08px_37>:
200001b4:	4605 1026 c4c8 0000                         .F&.....

200001bc <Font08px_38>:
200001bc:	6c05 ac92 a040 0000                         .l..@...

200001c4 <Font08px_39>:
200001c4:	0601 0000                                   ....

200001c8 <Font08px_40>:
200001c8:	3803 8244                                   .8D.

200001cc <Font08px_41>:
200001cc:	8203 3844                                   ..D8

200001d0 <Font08px_42>:
200001d0:	2803 2810                                   .(.(

200001d4 <Font08px_43>:
200001d4:	1003 1038                                   ..8.

200001d8 <Font08px_44>:
200001d8:	c001 0000                                   ....

200001dc <Font08px_45>:
200001dc:	1003 1010                                   ....

200001e0 <Font08px_46>:
200001e0:	8001 0000                                   ....

200001e4 <Font08px_47>:
200001e4:	c003 0638                                   ..8.

200001e8 <Font08px_N0>:
200001e8:	7c05 92a2 7c8a 0000                         .|...|..

200001f0 <Font08px_N1>:
200001f0:	0005 fe84 0080 0000                         ........

200001f8 <Font08px_N2>:
200001f8:	8405 a2c2 8c92 0000                         ........

20000200 <Font08px_N3>:
20000200:	4405 9282 6c92 0000                         .D...l..

20000208 <Font08px_N4>:
20000208:	3005 2428 20fe 0000                         .0($. ..

20000210 <Font08px_N5>:
20000210:	5e05 8a8a 728a 0000                         .^...r..

20000218 <Font08px_N6>:
20000218:	7c05 9292 6492 0000                         .|...d..

20000220 <Font08px_N7>:
20000220:	0205 f202 060a 0000                         ........

20000228 <Font08px_N8>:
20000228:	6c05 9292 6c92 0000                         .l...l..

20000230 <Font08px_N9>:
20000230:	4c05 9292 7c92 0000                         .L...|..

20000238 <Font08px_58>:
20000238:	4401 0000                                   .D..

2000023c <Font08px_59>:
2000023c:	c401 0000                                   ....

20000240 <Font08px_60>:
20000240:	1004 4428 0082 0000                         ..(D....

20000248 <Font08px_61>:
20000248:	2804 2828 0028 0000                         .((((...

20000250 <Font08px_62>:
20000250:	8204 2844 0010 0000                         ..D(....

20000258 <Font08px_63>:
20000258:	0405 a202 0c12 0000                         ........

20000260 <Font08px_64>:
20000260:	3808 9244 aaaa 24ba 0018 0000               .8D....$....

2000026c <Font08px_UA>:
2000026c:	f805 1214 f814 0000                         ........

20000274 <Font08px_UB>:
20000274:	fe04 9292 006c 0000                         ....l...

2000027c <Font08px_UC>:
2000027c:	7c04 8282 0044 0000                         .|..D...

20000284 <Font08px_UD>:
20000284:	fe04 8282 007c 0000                         ....|...

2000028c <Font08px_UE>:
2000028c:	fe04 9292 0082 0000                         ........

20000294 <Font08px_UF>:
20000294:	fe04 1212 0002 0000                         ........

2000029c <Font08px_UG>:
2000029c:	7c05 9282 f492 0000                         .|......

200002a4 <Font08px_UH>:
200002a4:	fe04 1010 00fe 0000                         ........

200002ac <Font08px_UI>:
200002ac:	8203 82fe                                   ....

200002b0 <Font08px_UJ>:
200002b0:	4004 8080 007e 0000                         .@..~...

200002b8 <Font08px_UK>:
200002b8:	fe05 2810 8244 0000                         ...(D...

200002c0 <Font08px_UL>:
200002c0:	fe04 8080 0080 0000                         ........

200002c8 <Font08px_UM>:
200002c8:	fe05 0804 fe04 0000                         ........

200002d0 <Font08px_UN>:
200002d0:	fe05 1804 fe60 0000                         ....`...

200002d8 <Font08px_UO>:
200002d8:	7c04 8282 007c 0000                         .|..|...

200002e0 <Font08px_UP>:
200002e0:	fe04 1212 000c 0000                         ........

200002e8 <Font08px_UQ>:
200002e8:	7c05 a282 bc42 0000                         .|..B...

200002f0 <Font08px_UR>:
200002f0:	fe04 3212 00cc 0000                         ...2....

200002f8 <Font08px_US>:
200002f8:	4c04 9292 0064 0000                         .L..d...

20000300 <Font08px_UT>:
20000300:	0205 fe02 0202 0000                         ........

20000308 <Font08px_UU>:
20000308:	7e04 8080 007e 0000                         .~..~...

20000310 <Font08px_UV>:
20000310:	0e05 c030 0e30 0000                         ..0.0...

20000318 <Font08px_UW>:
20000318:	3e05 38c0 3ec0 0000                         .>.8.>..

20000320 <Font08px_UX>:
20000320:	c605 1028 c628 0000                         ..(.(...

20000328 <Font08px_UY>:
20000328:	0605 f008 0608 0000                         ........

20000330 <Font08px_UZ>:
20000330:	c205 92a2 868a 0000                         ........

20000338 <Font08px_91>:
20000338:	fe03 8282                                   ....

2000033c <Font08px_92>:
2000033c:	0603 c038                                   ..8.

20000340 <Font08px_93>:
20000340:	8203 fe82                                   ....

20000344 <Font08px_94>:
20000344:	0403 0402                                   ....

20000348 <Font08px_95>:
20000348:	8003 8080                                   ....

2000034c <Font08px_96>:
2000034c:	0202 0004                                   ....

20000350 <Font08px_la>:
20000350:	7004 8888 00f8 0000                         .p......

20000358 <Font08px_lb>:
20000358:	fe04 8888 0070 0000                         ....p...

20000360 <Font08px_lc>:
20000360:	7004 8888 0088 0000                         .p......

20000368 <Font08px_ld>:
20000368:	7004 8888 00fe 0000                         .p......

20000370 <Font08px_le>:
20000370:	7004 a8a8 0030 0000                         .p..0...

20000378 <Font08px_lf>:
20000378:	fc03 0212                                   ....

2000037c <Font08px_lg>:
2000037c:	1004 a8a8 0078 0000                         ....x...

20000384 <Font08px_lh>:
20000384:	fe04 0810 00f0 0000                         ........

2000038c <Font08px_li>:
2000038c:	fa01 0000                                   ....

20000390 <Font08px_lj>:
20000390:	8002 007a                                   ..z.

20000394 <Font08px_lk>:
20000394:	fe04 5020 0088 0000                         .. P....

2000039c <Font08px_ll>:
2000039c:	fe01 0000                                   ....

200003a0 <Font08px_lm>:
200003a0:	f805 f008 f008 0000                         ........

200003a8 <Font08px_ln>:
200003a8:	f804 0810 00f0 0000                         ........

200003b0 <Font08px_lo>:
200003b0:	7004 8888 0070 0000                         .p..p...

200003b8 <Font08px_lp>:
200003b8:	f804 2828 0010 0000                         ..((....

200003c0 <Font08px_lq>:
200003c0:	1004 2828 00f8 0000                         ..((....

200003c8 <Font08px_lr>:
200003c8:	f803 0810                                   ....

200003cc <Font08px_ls>:
200003cc:	9004 a8a8 0048 0000                         ....H...

200003d4 <Font08px_lt>:
200003d4:	0803 887c                                   ..|.

200003d8 <Font08px_lu>:
200003d8:	7804 8080 00f8 0000                         .x......

200003e0 <Font08px_lv>:
200003e0:	1805 8060 1860 0000                         ..`.`...

200003e8 <Font08px_lw>:
200003e8:	3805 30c0 38c0 0000                         .8.0.8..

200003f0 <Font08px_lx>:
200003f0:	8805 2050 8850 0000                         ..P P...

200003f8 <Font08px_ly>:
200003f8:	1804 a0a0 0078 0000                         ....x...

20000400 <Font08px_lz>:
20000400:	c803 98a8                                   ....

20000404 <Font08px_123>:
20000404:	1003 826c                                   ..l.

20000408 <Font08px_124>:
20000408:	fe01 0000                                   ....

2000040c <Font08px_125>:
2000040c:	8203 106c                                   ..l.

20000410 <Font08px_126>:
20000410:	1005 1008 1020 0000                         .... ...

20000418 <SystemCoreClock>:
20000418:	0900 003d 0000 0000                         ..=.....

20000420 <impure_data>:
20000420:	0000 0000 070c 2000 0774 2000 07dc 2000     ....... t.. ... 
	...
20000454:	2dd8 0040 0000 0000 0000 0000 0000 0000     .-@.............
	...
200004c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200004d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...
